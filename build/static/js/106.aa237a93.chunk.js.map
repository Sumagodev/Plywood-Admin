{"version":3,"sources":["views/components/alerts/AlertIcon.js","views/components/alerts/AlertTitle.js","views/components/alerts/AlertColors.js","views/components/alerts/AlertExample.js","views/components/alerts/DefaultAlert.js","views/components/alerts/AlertDismissable.js","views/components/alerts/AlertUncontrolled.js","views/components/alerts/AlertSourceCode.js","views/components/alerts/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["AlertIcon","className","color","size","AlertTitle","href","onClick","e","preventDefault","AlertColors","AlertExample","visible","setVisible","useState","inputTerm","setInputTerm","htmlFor","placeholder","value","onChange","target","length","isNaN","handleInput","isOpen","DefaultAlert","AlertDismissable","toggle","AlertUncontrolled","defaultAlert","alertTitle","alertColors","alertDismissable","alertUncontrolled","alertIcon","alertExample","Alerts","useEffect","Prism","highlightAll","title","data","sm","code","BreadCrumbs","props","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","active","classnames","end","CardSnippet","children","noBody","iconCode","setIsOpen","IconCode","CardBody"],"mappings":"sOAoBeA,MAdG,IAEd,qBAAKC,UAAU,iBAAgB,SAC7B,cAAC,IAAK,CAACC,MAAM,UAAS,SACpB,sBAAKD,UAAU,uCAAsC,UACnD,cAAC,IAAI,CAACE,KAAM,KACZ,sBAAMF,UAAU,QAAO,SAAC,+FCOnBG,MAhBI,IAEf,qBAAKH,UAAU,iBAAgB,SAC7B,eAAC,IAAK,CAACC,MAAM,UAAS,UACpB,oBAAID,UAAU,gBAAe,SAAC,+BAC9B,sBAAKA,UAAU,aAAY,UAAC,6BACC,IAC3B,mBAAGA,UAAU,aAAaI,KAAK,IAAIC,QAASC,GAAKA,EAAEC,iBAAiB,SAAC,gBAEhE,IAAI,+CC8CJC,MAvDK,IAEhB,sBAAKR,UAAU,iBAAgB,UAC7B,eAAC,IAAK,CAACC,MAAM,UAAS,UACpB,oBAAID,UAAU,gBAAe,SAAC,YAC9B,qBAAKA,UAAU,aAAY,SAAC,iIAK9B,eAAC,IAAK,CAACC,MAAM,YAAW,UACtB,oBAAID,UAAU,gBAAe,SAAC,cAC9B,qBAAKA,UAAU,aAAY,SAAC,iIAK9B,eAAC,IAAK,CAACC,MAAM,UAAS,UACpB,oBAAID,UAAU,gBAAe,SAAC,YAC9B,qBAAKA,UAAU,aAAY,SAAC,iIAK9B,eAAC,IAAK,CAACC,MAAM,SAAQ,UACnB,oBAAID,UAAU,gBAAe,SAAC,WAC9B,qBAAKA,UAAU,aAAY,SAAC,iIAK9B,eAAC,IAAK,CAACC,MAAM,UAAS,UACpB,oBAAID,UAAU,gBAAe,SAAC,YAC9B,qBAAKA,UAAU,aAAY,SAAC,iIAK9B,eAAC,IAAK,CAACC,MAAM,OAAM,UACjB,oBAAID,UAAU,gBAAe,SAAC,SAC9B,qBAAKA,UAAU,aAAY,SAAC,iIAK9B,eAAC,IAAK,CAACC,MAAM,OAAM,UACjB,oBAAID,UAAU,gBAAe,SAAC,SAC9B,qBAAKA,UAAU,aAAY,SAAC,oI,SCPrBS,MAlCM,KAEnB,MAAOC,EAASC,GAAcC,oBAAS,IAChCC,EAAWC,GAAgBF,mBAAS,IAY3C,OACE,sBAAKZ,UAAU,iBAAgB,UAC7B,sBAAKA,UAAU,OAAM,UACnB,cAAC,IAAK,CAACA,UAAU,aAAae,QAAQ,UAAS,SAAC,uBAGhD,cAAC,IAAK,CAACf,UAAU,iBAAiBgB,YAAY,aAAaC,MAAOJ,EAAWK,SAAUZ,GAhBzEA,KAClBQ,EAAaR,EAAEa,OAAOF,OAElBX,EAAEa,OAAOF,MAAMG,OAAS,GAAKC,MAAMf,EAAEa,OAAOF,OAC9CN,GAAW,GAEXA,GAAW,EACb,EASgGW,CAAYhB,QAE1G,cAAC,IAAK,CAACL,MAAM,SAASsB,OAAQb,EAAQ,SACpC,sBAAKV,UAAU,aAAY,UACzB,cAAC,IAAW,CAACE,KAAM,KAAO,IAC1B,uBAAMF,UAAU,OAAM,UAAC,gBACR,iCAAQ,YAAgB,wCAIvC,ECzBKwB,MAZM,IAEjB,qBAAKxB,UAAU,iBAAgB,SAC7B,cAAC,IAAK,CAACC,MAAM,UAAS,SACpB,sBAAKD,UAAU,aAAY,UACzB,sBAAMA,UAAU,UAAS,SAAC,kBAC1B,+BAAM,6CCWDyB,MAdU,KAEvB,MAAOf,EAASC,GAAcC,oBAAS,GAEvC,OACE,qBAAKZ,UAAU,iBAAgB,SAC7B,cAAC,IAAK,CAACC,MAAM,UAAUsB,OAAQb,EAASgB,OAAQ,IAAMf,GAAW,GAAO,SACtE,qBAAKX,UAAU,aAAY,SAAC,2FAI1B,ECHK2B,MAXW,IAEtB,qBAAK3B,UAAU,iBAAgB,SAC7B,cAAC,KAAiB,CAACC,MAAM,UAAS,SAChC,qBAAKD,UAAU,aAAY,SAAC,4FCP7B,MAAM4B,EACX,qBAAK5B,UAAU,eAAc,SAC3B,sBAAMA,UAAU,eAAc,SAC1B,wYAsBK6B,EACX,8BACE,sBAAM7B,UAAU,eAAc,SAC1B,yWAkBK8B,EACX,8BACE,sBAAM9B,UAAU,eAAc,SAC1B,gsEAiEK+B,EACX,8BACE,sBAAM/B,UAAU,eAAc,SAC1B,qgBAuBKgC,EACX,8BACE,sBAAMhC,UAAU,eAAc,SAC1B,oaAqBKiC,EACX,8BACE,sBAAMjC,UAAU,eAAc,SAC1B,+eAyBKkC,EACX,8BACE,sBAAMlC,UAAU,eAAc,SAC1B,wpCChGOmC,UAlEA,KACbC,qBAAU,KACRC,IAAMC,cAAc,GACnB,IAED,eAAC,WAAQ,WACP,cAAC,IAAW,CAACC,MAAM,SAASC,KAAM,CAAC,CAAED,MAAO,cAAgB,CAAEA,MAAO,aACrE,eAAC,KAAG,WACF,cAAC,IAAG,CAACE,GAAG,KAAI,SACV,eAAC,IAAI,CAACF,MAAM,UAAUG,KAAMd,EAAa,UACvC,eAAC,IAAQ,WAAC,2FACgF,+BAAM,UAAa,IAAI,eACnG,+BAAM,UAAY,4CAEhC,cAAC,EAAY,SAGjB,cAAC,IAAG,CAACa,GAAG,KAAI,SACV,eAAC,IAAI,CAACF,MAAM,QAAQG,KAAMb,EAAW,UACnC,eAAC,IAAQ,WAAC,qCAC0B,+BAAM,sBAE1C,cAAC,EAAU,SAGf,cAAC,IAAG,CAACY,GAAG,KAAI,SACV,eAAC,IAAI,CAACF,MAAM,SAASG,KAAMZ,EAAY,UACrC,eAAC,IAAQ,WAAC,OACJ,+BAAM,UAAY,+CAExB,cAAC,EAAW,SAGhB,cAAC,IAAG,CAACW,GAAG,KAAI,SACV,eAAC,IAAI,CAACF,MAAM,oBAAoBG,KAAMX,EAAiB,UACrD,eAAC,IAAQ,WAAC,SACF,+BAAM,WAAa,QAAK,+BAAM,WAAa,0CAEnD,cAAC,EAAgB,SAGrB,cAAC,IAAG,CAACU,GAAG,KAAI,SACV,eAAC,IAAI,CAACF,MAAM,qBAAqBG,KAAMV,EAAkB,UACvD,cAAC,IAAQ,UAAC,kOAKV,cAAC,EAAiB,SAGtB,cAAC,IAAG,CAACS,GAAG,KAAI,SACV,cAAC,IAAI,CAACF,MAAM,OAAOG,KAAMT,EAAU,SACjC,cAAC,EAAS,QAGd,cAAC,IAAG,CAACQ,GAAG,KAAI,SACV,eAAC,IAAI,CAACF,MAAM,UAAUG,KAAMR,EAAa,UACvC,cAAC,IAAQ,UAAC,sFACV,cAAC,EAAY,e,mCC5FzB,kGAuFeS,IApEKC,IAElB,MAAM,KAAEJ,EAAI,MAAED,GAAUK,EAmBxB,OACE,sBAAK5C,UAAU,qBAAoB,UACjC,qBAAKA,UAAU,2CAA0C,SACvD,qBAAKA,UAAU,sBAAqB,SAClC,sBAAKA,UAAU,SAAQ,UACpBuC,EAAQ,oBAAIvC,UAAU,wCAAuC,SAAEuC,IAAc,GAC9E,qBAAKvC,UAAU,6DAA4D,SACzE,eAAC,IAAU,WACT,cAAC,IAAc,CAAC6C,IAAI,KAAI,SACtB,cAAC,IAAI,CAACC,GAAG,IAAG,SAAC,WAzBpBN,EAAKO,KAAI,CAACC,EAAMC,KACrB,MAAMC,EAAUF,EAAKG,KAAOC,IAAOC,WAC7BC,EAAad,EAAKpB,OAAS,IAAM6B,EACvC,OACE,cAAC,IAAc,CACbJ,IAAI,KAEJU,QAASD,EACTtD,UAAWwD,IAAW,CAAE,gBAAiBF,IAAc,SAEvD,cAACJ,EAAO,IAAMF,EAAKG,KAAO,CAAEL,GAAIE,EAAKG,MAAS,CAAC,EAAC,SAAIH,EAAKT,SAJpDU,EAKU,gBAsBnB,qBAAKjD,UAAU,qEAAoE,SACjF,qBAAKA,UAAU,4BAA2B,SACxC,eAAC,KAA0B,WACzB,cAAC,IAAc,CAACC,MAAM,UAAUD,UAAU,qCAAoC,SAC5E,cAAC,IAAI,CAACE,KAAM,OAEd,eAAC,IAAY,CAAC2C,IAAI,KAAKY,KAAG,YACxB,eAAC,IAAY,CAACZ,IAAKO,IAAMN,GAAG,aAAY,UACtC,cAAC,IAAW,CAAC9C,UAAU,OAAOE,KAAM,KACpC,sBAAMF,UAAU,eAAc,SAAC,YAEjC,eAAC,IAAY,CAAC6C,IAAKO,IAAMN,GAAG,aAAY,UACtC,cAAC,IAAa,CAAC9C,UAAU,OAAOE,KAAM,KACtC,sBAAMF,UAAU,eAAc,SAAC,YAEjC,eAAC,IAAY,CAAC6C,IAAKO,IAAMN,GAAG,cAAa,UACvC,cAAC,IAAI,CAAC9C,UAAU,OAAOE,KAAM,KAC7B,sBAAMF,UAAU,eAAc,SAAC,aAEjC,eAAC,IAAY,CAAC6C,IAAKO,IAAMN,GAAG,iBAAgB,UAC1C,cAAC,IAAQ,CAAC9C,UAAU,OAAOE,KAAM,KACjC,sBAAMF,UAAU,eAAc,SAAC,4BAMrC,C,mCCpFV,qCA0Ce0D,IAhCKd,IAElB,MAAM,MAAEL,EAAK,SAAEoB,EAAQ,OAAEC,EAAM,KAAElB,EAAI,SAAEmB,GAAajB,GAG7CrB,EAAQuC,GAAalD,oBAAS,GAG/BmD,EAAWF,GAAsB,cAAC,IAAI,CAAC3D,KAAM,KAM7CgD,EAAUU,EAASP,WAAWW,IAEpC,OACE,eAAC,IAAI,CAAChE,UAAU,eAAc,UAC5B,eAAC,IAAU,WACT,cAAC,IAAS,CAAC6C,IAAI,KAAI,SAAEN,IACrB,qBAAKvC,UAAU,uBAAuBK,QAT7B,IAAMyD,GAAWvC,GAS4B,SACnDwC,OAGL,cAACb,EAAO,UAAES,IACV,cAAC,IAAQ,CAACpC,OAAQA,EAAO,SACvB,cAAC,IAAQ,UAAEmB,QAER,C","file":"static/js/106.aa237a93.chunk.js","sourcesContent":["// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\n// ** Icons Imports\nimport { Star } from 'react-feather'\n\nconst AlertIcon = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary'>\n        <div className='alert-body d-flex align-items-center'>\n          <Star size={15} />\n          <span className='ms-50'>\n            Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n          </span>\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertIcon\n","// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst AlertTitle = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Lorem ipsum dolor sit amet</h4>\n        <div className='alert-body'>\n          Lorem ipsum dolor sit amet{' '}\n          <a className='alert-link' href='/' onClick={e => e.preventDefault()}>\n            consectetur\n          </a>{' '}\n          adipisicing elit. Ducimus, laborum!.\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertTitle\n","// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst AlertColors = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary'>\n        <h4 className='alert-heading'>Primary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='secondary'>\n        <h4 className='alert-heading'>Secondary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='success'>\n        <h4 className='alert-heading'>Success</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Danger</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Warning</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='info'>\n        <h4 className='alert-heading'>Info</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='dark'>\n        <h4 className='alert-heading'>Dark</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertColors\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Icons Imports\nimport { AlertCircle } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Alert, Label, Input } from 'reactstrap'\n\nconst AlertExample = () => {\n  // ** States\n  const [visible, setVisible] = useState(true)\n  const [inputTerm, setInputTerm] = useState('')\n\n  const handleInput = e => {\n    setInputTerm(e.target.value)\n\n    if (e.target.value.length > 0 && isNaN(e.target.value)) {\n      setVisible(true)\n    } else {\n      setVisible(false)\n    }\n  }\n\n  return (\n    <div className='demo-spacing-0'>\n      <div className='mb-2'>\n        <Label className='form-label' htmlFor='numbers'>\n          Enter numbers only\n        </Label>\n        <Input className='w-25 h-25 ps-1' placeholder='0123456789' value={inputTerm} onChange={e => handleInput(e)} />\n      </div>\n      <Alert color='danger' isOpen={visible}>\n        <div className='alert-body'>\n          <AlertCircle size={15} />{' '}\n          <span className='ms-1'>\n            The value is <strong>invalid</strong> you can only enter numbers\n          </span>\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertExample\n","// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst DefaultAlert = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <span className='fw-bold'>Good Morning!</span>\n          <span> Start your day with some alerts.</span>\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default DefaultAlert\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst AlertDismissable = () => {\n  // ** State\n  const [visible, setVisible] = useState(true)\n\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary' isOpen={visible} toggle={() => setVisible(false)}>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertDismissable\n","// ** Reactstrap Imports\nimport { UncontrolledAlert } from 'reactstrap'\n\nconst AlertUncontrolled = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <UncontrolledAlert color='primary'>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </UncontrolledAlert>\n    </div>\n  )\n}\nexport default AlertUncontrolled\n","export const defaultAlert = (\n  <pre className='language-jsx'>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst DefaultAlert = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <span className='fw-bold'>Good Morning!</span>\n          <span> Start your day with some alerts.</span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default DefaultAlert\n  `}\n    </code>\n  </pre>\n)\n\nexport const alertTitle = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst AlertTitle = () => {\n  return (\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Lorem ipsum dolor sit amet</h4>\n        <div className='alert-body'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ducimus, laborum!.</div>\n      </Alert>\n  )\n}\nexport default AlertTitle\n`}\n    </code>\n  </pre>\n)\n\nexport const alertColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst AlertColors = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <h4 className='alert-heading'>Primary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='secondary'>\n        <h4 className='alert-heading'>Secondary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='success'>\n        <h4 className='alert-heading'>Success</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Danger</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Warning</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='info'>\n        <h4 className='alert-heading'>Info</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='dark'>\n        <h4 className='alert-heading'>Dark</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertColors\n`}\n    </code>\n  </pre>\n)\n\nexport const alertDismissable = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Alert } from 'reactstrap'\n\nconst AlertDismissable = () => {\n  const [visible, setVisible] = useState(true)\n\n  return (\n    <React.Fragment>\n      <Alert color='info' isOpen={visible} toggle={() => setVisible(false)}>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertDismissable\n    `}\n    </code>\n  </pre>\n)\n\nexport const alertUncontrolled = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { UncontrolledAlert } from 'reactstrap'\n\nconst AlertUncontrolled = () => {\n  return (\n    <React.Fragment>\n      <UncontrolledAlert color='danger'>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </UncontrolledAlert>\n    </React.Fragment>\n  )\n}\nexport default AlertUncontrolled\n      `}\n    </code>\n  </pre>\n)\n\nexport const alertIcon = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\nimport { Star } from 'react-feather'\n\nconst AlertIcon = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <Star size={15} />\n          <span className='ms-1'>\n            Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n          </span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertIcon\n        `}\n    </code>\n  </pre>\n)\n\nexport const alertExample = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Alert,  Label, Input } from 'reactstrap'\nimport { AlertCircle } from 'react-feather'\n\nconst AlertExample = () => {\n  const [inputTerm, setInputTerm] = useState('')\n  const [visible, setVisible] = useState('')\n\n  const handleInput = e => {\n    setInputTerm(e.target.value)\n\n    if (e.target.value.length > 0 && isNaN(e.target.value)) {\n      setVisible(true)\n    } else {\n      setVisible(false)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className='mb-2'>\n        <Label className='form-label' htmlFor='numbers'>Enter numbers only</Label>\n        <Input\n          className='w-25 h-25 ps-1'\n          placeholder='0123456789'\n          value={inputTerm}\n          onChange={e => handleInput(e)}\n        />\n      </div>\n      <Alert color='danger' isOpen={visible}>\n        <div className='alert-body'>\n          <AlertCircle size={15} />{' '}\n          <span className='ms-1'>\n            the value is <strong>invalid</strong> you can only enter numbers\n          </span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertExample\n        `}\n    </code>\n  </pre>\n)\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport AlertIcon from './AlertIcon'\nimport AlertTitle from './AlertTitle'\nimport AlertColors from './AlertColors'\nimport AlertExample from './AlertExample'\nimport DefaultAlert from './DefaultAlert'\nimport AlertDismissable from './AlertDismissable'\nimport AlertUncontrolled from './AlertUncontrolled'\n\n// ** Source Code\nimport {\n  alertIcon,\n  alertTitle,\n  alertColors,\n  defaultAlert,\n  alertExample,\n  alertDismissable,\n  alertUncontrolled\n} from './AlertSourceCode'\n\nconst Alerts = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n  return (\n    <Fragment>\n      <BreadCrumbs title='Alerts' data={[{ title: 'Components' }, { title: 'Alerts' }]} />\n      <Row>\n        <Col sm='12'>\n          <Card title='Default' code={defaultAlert}>\n            <CardText>\n              Alerts are available for any length of text, as well as an optional dismiss button. Use <code>Alert</code>{' '}\n              Component & <code>color</code> prop for alert with all theme colors.\n            </CardText>\n            <DefaultAlert />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Title' code={alertTitle}>\n            <CardText>\n              Add a title to the alert with the <code>.alert-heading</code>\n            </CardText>\n            <AlertTitle />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Colors' code={alertColors}>\n            <CardText>\n              Use <code>color</code> prop to for alert with all theme colors.\n            </CardText>\n            <AlertColors />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Dismissable Alert' code={alertDismissable}>\n            <CardText>\n              Using <code>isOpen</code> and <code>toggle</code> you can create a dismissable alert.\n            </CardText>\n            <AlertDismissable />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Uncontrolled Alert' code={alertUncontrolled}>\n            <CardText>\n              For the most basic use-case an uncontrolled component can provide the functionality wanted without the\n              need to manage/control the state of the component. UncontrolledAlert does not require isOpen nor toggle\n              props to work.\n            </CardText>\n            <AlertUncontrolled />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Icon' code={alertIcon}>\n            <AlertIcon />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Example' code={alertExample}>\n            <CardText>An example would be to have an input and when a condition is met, show the alert.</CardText>\n            <AlertExample />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Alerts\n","// ** React Imports\nimport { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  DropdownMenu,\n  DropdownItem,\n  BreadcrumbItem,\n  DropdownToggle,\n  UncontrolledButtonDropdown\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { data, title } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag='li'\n          key={index}\n          active={!isLastItem}\n          className={classnames({ 'text-primary': !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\n        <div className='breadcrumb-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' end>\n              <DropdownItem tag={Link} to='/apps/todo'>\n                <CheckSquare className='me-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='me-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='me-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='me-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}