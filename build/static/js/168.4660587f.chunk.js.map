{"version":3,"sources":["views/location/City/list/columns.js","views/location/City/list/AddModal.js","views/location/City/list/Table.js","views/location/City/list/index.js"],"names":["statusObj","pending","active","inactive","columns","name","sortable","sortField","width","cell","row","stateObj","countryObj","selector","status","className","color","pill","onClick","e","preventDefault","store","dispatch","getCityById","_id","size","deleteCity","AddModal","open","toggleSidebar","useSelector","state","cities","countries","states","setname","useState","stateId","setstateId","countryId","setcountryId","setstatus","isUpdated","setisUpdated","updateObj","setupdateObj","stateArr","setstateArr","countryArr","setcountryArr","image","setImage","useDispatch","useEffect","getAllCountry","getState","value","map","el","label","onSubmit","toastError","console","log","updateCity","id","addCity","selectedCity","city","isOpen","onClosed","toggle","classNamePrefix","defaultValue","options","onChange","val","for","target","includes","src","style","height","alt","generateFilePath","FileUpload","onFileChange","type","checked","UsersList","sort","setSort","searchTerm","setSearchTerm","currentPage","setCurrentPage","sortColumn","setSortColumn","rowsPerPage","setRowsPerPage","sidebarOpen","setSidebarOpen","currentRole","setCurrentRole","currentStatus","setCurrentStatus","number","rolesOptions","setrolesOptions","seletectedCountryToFilterWith","setSeletectedCountryToFilterWith","seletectedStateToFilterWith","setSeletectedStateToFilterWith","getCity","q","perPage","page","role","getAllState","xl","htmlFor","parseInt","currentTarget","lg","sm","xs","isClearable","data","handleFilter","noHeader","subHeader","sortServer","pagination","responsive","paginationServer","onSort","column","sortDirection","sortIcon","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","Object","keys","some","k","length","slice","dataToRender","CityList","Table"],"mappings":"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","file":"static/js/168.4660587f.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { store } from '@store/store'\nimport { getCity, deleteCity, getCityById } from '../store'\n\n// ** Icons Imports\nimport { Slack, User, Settings, Database, Edit2, MoreVertical, FileText, Trash2, Archive, Edit } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from 'reactstrap'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n  if (row.avatar.length) {\n    return <Avatar className='me-1' img={row.avatar} width='32' height='32' />\n  } else {\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={row.avatarColor || 'light-primary'}\n        content={row.fullName || 'John Doe'}\n      />\n    )\n  }\n}\n\n// ** Renders Role Columns\nconst renderRole = row => {\n  const roleObj = {\n    subscriber: {\n      class: 'text-primary',\n      icon: User\n    },\n    maintainer: {\n      class: 'text-success',\n      icon: Database\n    },\n    editor: {\n      class: 'text-info',\n      icon: Edit2\n    },\n    author: {\n      class: 'text-warning',\n      icon: Settings\n    },\n    admin: {\n      class: 'text-danger',\n      icon: Slack\n    }\n  }\n\n  const Icon = roleObj[row.role] ? roleObj[row.role].icon : Edit2\n\n  return (\n    <span className='text-truncate text-capitalize align-middle'>\n      <Icon size={18} className={`${roleObj[row.role] ? roleObj[row.role].class : ''} me-50`} />\n      {row.role}\n    </span>\n  )\n}\n\nconst statusObj = {\n  pending: 'light-warning',\n  active: 'light-success',\n  inactive: 'light-secondary'\n}\n\nexport const columns = [\n  {\n    name: 'Name',\n    sortable: true,\n    sortField: 'name',\n    width:\"15%\",\n    cell: row => row.name\n  },\n  {\n    name: 'State',\n    sortable: true,\n    sortField: 'state',\n    width:\"15%\",\n    cell: row => row?.stateObj?.name\n  },\n  {\n    name: 'Country',\n    sortable: true,\n    sortField: 'country',\n    width:\"15%\",\n    cell: row => row?.countryObj?.name\n  },\n  {\n    name: 'Status',\n    sortable: true,\n    sortField: 'status',\n    selector: row => row.status,\n    cell: row => (\n      <Badge className='text-capitalize' color={statusObj[row.status === true ? 'active' : 'inactive']} pill>\n       {row.status === true ? 'Active' : 'Inactive'}\n      </Badge>\n    )\n  },\n  {\n    name: 'Actions',\n    cell: row => (\n      <>\n      <Button color='primary'  className='btn-sm' onClick={e => { \n              e.preventDefault() \n              store.dispatch(getCityById(row._id))\n              }}>     <Edit size={14} /></Button>\n      <Button color='danger' className='mx-2 btn-sm'  \n                    onClick={e => {\n                e.preventDefault()\n                store.dispatch(deleteCity(row._id))\n              }}\n      >    <Trash2 size={14}  /></Button>\n      </>\n      // <div className='column-action'>\n      //   <UncontrolledDropdown>\n      //     <DropdownToggle tag='div' className='btn btn-sm'>\n      //       <MoreVertical size={14} className='cursor-pointer' />\n      //     </DropdownToggle>\n      //     <DropdownMenu>\n      //       <DropdownItem tag='a' href='/' className='w-100' onClick={e => { \n      //         e.preventDefault() \n      //         store.dispatch(getCityById(row._id))\n      //         }}\n      //         >\n      //         <Archive size={14} className='me-50' />\n      //         <span className='align-middle'>Edit</span>\n      //       </DropdownItem>\n      //       <DropdownItem\n      //         tag='a'\n      //         href='/'\n      //         className='w-100'\n      //         onClick={e => {\n      //           e.preventDefault()\n      //           store.dispatch(deleteCity(row._id))\n      //         }}\n      //       >\n      //         <Trash2 size={14} className='me-50' />\n      //         <span className='align-middle'>Delete</span>\n      //       </DropdownItem>\n      //     </DropdownMenu>\n      //   </UncontrolledDropdown>\n      // </div>\n    )\n  }\n]\n","// ** React Import\nimport { useEffect, useState } from \"react\"\n\n// ** Custom Components\nimport Sidebar from \"@components/sidebar\"\n\n// ** Utils\nimport { selectThemeColors } from \"@utils\"\n\n// ** Third Party Components\nimport Select from \"react-select\"\nimport classnames from \"classnames\"\nimport { useForm, Controller } from \"react-hook-form\"\n\n// ** Reactstrap Imports\nimport {\n  Button,\n  Label,\n  FormText,\n  Form,\n  Input,\n  Modal,\n  CardBody,\n  ModalBody,\n  ModalHeader,\n  Row,\n  Col\n} from \"reactstrap\"\n\n// ** Store & Actions\nimport { addCity, getAllData, updateCity } from \"../store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { ROLES_CONSTANT } from \"../../../../utility/constant\"\nimport { toastError } from \"../../../../utility/toastutill\"\nimport FileUpload from \"../../../../utility/FileUpload\"\nimport { getAllState, getState } from \"../../State/store\"\nimport { getAllCountry } from \"../../Country/store\"\nimport { generateFilePath } from \"../../../../services/url.service\"\n\nconst AddModal = ({ open, toggleSidebar }) => {\n  // ** States\n  const store = useSelector((state) => state.cities)\n  const countries = useSelector((state) => state.countries)\n  const states = useSelector((state) => state.states)\n\n  const [name, setname] = useState(\"\")\n  const [stateId, setstateId] = useState()\n  const [countryId, setcountryId] = useState()\n  const [status, setstatus] = useState(true)\n  const [isUpdated, setisUpdated] = useState(false)\n  const [updateObj, setupdateObj] = useState({})\n  const [stateArr, setstateArr] = useState()\n  const [countryArr, setcountryArr] = useState()\n  const [image, setImage] = useState(\"\")\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const checkIsValid = () => {\n    if (`${name}` === \"\") {\n      toastError(\"Please Fill name\")\n      return false\n    }\n\n    return true\n  }\n\n  useEffect(() => {\n    dispatch(getAllCountry())\n  }, [])\n\n  useEffect(() => {\n    if (countryId) {\n      setstateId({})\n      dispatch(getState(`countryId=${countryId.value}`))\n    }\n  }, [countryId])\n\n  useEffect(() => {\n    if (countries.countries) {\n      setcountryArr(\n        countries.countries.map((el) => ({ value: el._id, label: el.name }))\n      )\n    }\n  }, [countries.countries])\n\n  useEffect(() => {\n    if (states.states) {\n      setstateArr(\n        states.states.map((el) => ({ value: el._id, label: el.name }))\n      )\n    } else {\n      setstateArr([])\n    }\n  }, [states.states])\n\n  // ** Function to handle form submit\n  const onSubmit = () => {\n    if (checkIsValid()) {\n      toggleSidebar()\n      if (isUpdated === true) {\n        console.log(stateId, \"valval\")\n        dispatch(\n          updateCity({\n            name,\n            status,\n            image,\n            stateId: stateId.value,\n            countryId: countryId.value,\n            id: updateObj._id\n          })\n        )\n      } else {\n        dispatch(\n          addCity({\n            name,\n            status,\n            image,\n            stateId: stateId.value,\n            countryId: countryId.value\n          })\n        )\n      }\n    }\n  }\n\n  const handleSidebarClosed = () => { }\n\n  useEffect(() => {\n    if (store.selectedCity !== null) {\n      const city = store.selectedCity\n      setupdateObj(city)\n      setisUpdated(true)\n      setname(city.name)\n      setImage(city.image)\n      setcountryId({ label: city?.countryObj?.name, value: city.countryId })\n      setstateId({ label: city?.stateObj?.name, value: city.stateId })\n      setstatus(city.status)\n    } else {\n      setupdateObj({})\n      setisUpdated(false)\n      setname(\"\")\n      setstateId(\"\")\n      setcountryId(\"\")\n    }\n  }, [store.selectedCity])\n\n  return (\n    <>\n      <Modal\n        isOpen={open}\n        onClosed={handleSidebarClosed}\n        toggle={toggleSidebar}\n        className=\"modal-dialog-centered modal-lg\"\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={toggleSidebar}\n        ></ModalHeader>\n        <ModalBody className=\"px-3 pb-3\">\n          <div className=\"text-center\">\n            <h2>{isUpdated ? \"Update\" : \"Add\"} City</h2>\n          </div>\n\n          <Form className=\"row\">\n\n            <div className='mb-1 col-md-6'>\n              <Label className='form-label'>\n                Country\n              </Label>\n              <Select\n                className='react-select'\n                classNamePrefix='select'\n                defaultValue={countryId}\n                options={countryArr}\n                onChange={(val) => setcountryId(val)}\n              />\n            </div>\n            <div className='mb-1 col-md-6'>\n              <Label className='form-label'>\n                State\n              </Label>\n              <Select\n                className='react-select'\n                classNamePrefix='select'\n                defaultValue={stateId}\n                options={stateArr}\n                onChange={(val) => setstateId(val)}\n              />\n            </div>\n            <div className=\"mb-1 col-md-6\">\n              <Label className=\"form-label\" for=\"fullName\">\n                Name <span className=\"text-danger\">*</span>\n              </Label>\n              <Input\n                className=\"form-control\"\n                value={name}\n                onChange={(e) => setname(e.target.value)}\n              />\n            </div>\n            <div className=\"mb-1 col-md-6\">\n              <Label className=\"form-label\">Image</Label>\n              <div>\n                {\n                  image && image.includes(\"base64\") ? <img src={image} style={{ height: 100 }} alt=\"\" /> : <img src={generateFilePath(image)} style={{ height: 100 }} alt=\"\" />\n                }\n              </div>\n              <FileUpload onFileChange={(val) => setImage(val)} />\n            </div>\n\n            <div className=\" mb-1 col-md-12\">\n              <Label className=\"form-label\" for=\"phone\">\n                Status <span className=\"text-danger\">*</span>\n              </Label>\n              <div className=\"demo-inline-spacing\">\n                <div className=\"form-check\">\n                  <Input\n                    type=\"radio\"\n                    id=\"ex1-active\"\n                    name=\"ex1\"\n                    checked={status === true}\n                    onChange={() => setstatus(true)}\n                  />\n                  <Label className=\"form-check-label\" for=\"ex1-active\">\n                    Active\n                  </Label>\n                </div>\n                <div className=\"form-check\">\n                  <Input\n                    type=\"radio\"\n                    name=\"ex1\"\n                    id=\"ex1-inactive\"\n                    checked={status === false}\n                    onChange={() => setstatus(false)}\n                  />\n                  <Label className=\"form-check-label\" for=\"ex1-inactive\">\n                    InActive\n                  </Label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mb-1 col-md-12\">\n              <Button\n                type=\"button\"\n                className=\"me-1\"\n                color=\"primary\"\n                onClick={() => {\n                  onSubmit()\n                }}\n              >\n                Submit\n              </Button>\n            </div>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </>\n    // <Sidebar\n    //   size='lg'\n    //   open={open}\n    //   title='New User'\n    //   headerClassName='mb-1'\n    //   contentClassName='pt-0'\n    //   toggleSidebar={toggleSidebar}\n    //   onClosed={handleSidebarClosed}\n    // >\n    //   <Form onSubmit={handleSubmit(onSubmit)}>\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='fullName'>\n    //         Full Name <span className='text-danger'>*</span>\n    //       </Label>\n    //       <Controller\n    //         name='fullName'\n    //         control={control}\n    //         render={({ field }) => (\n    //           <Input id='fullName' placeholder='John Doe' invalid={errors.fullName && true} {...field} />\n    //         )}\n    //       />\n    //     </div>\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='lastName'>\n    //         lastName <span className='text-danger'>*</span>\n    //       </Label>\n    //       <Controller\n    //         name='lastName'\n    //         control={control}\n    //         render={({ field }) => (\n    //           <Input id='lastName' placeholder='johnDoe99' invalid={errors.lastName && true} {...field} />\n    //         )}\n    //       />\n    //     </div>\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='userEmail'>\n    //         Email <span className='text-danger'>*</span>\n    //       </Label>\n    //       <Controller\n    //         name='email'\n    //         control={control}\n    //         render={({ field }) => (\n    //           <Input\n    //             type='email'\n    //             id='userEmail'\n    //             placeholder='john.doe@example.com'\n    //             invalid={errors.email && true}\n    //             {...field}\n    //           />\n    //         )}\n    //       />\n    //       <FormText color='muted'>You can use letters, numbers & periods</FormText>\n    //     </div>\n\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='phone'>\n    //         phone <span className='text-danger'>*</span>\n    //       </Label>\n    //       <Controller\n    //         name='phone'\n    //         control={control}\n    //         render={({ field }) => (\n    //           <Input id='phone' placeholder='(397) 294-5153' invalid={errors.phone && true} {...field} />\n    //         )}\n    //       />\n    //     </div>\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='company'>\n    //         Company <span className='text-danger'>*</span>\n    //       </Label>\n    //       <Controller\n    //         name='company'\n    //         control={control}\n    //         render={({ field }) => (\n    //           <Input id='company' placeholder='Company Pvt Ltd' invalid={errors.company && true} {...field} />\n    //         )}\n    //       />\n    //     </div>\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='country'>\n    //         Country <span className='text-danger'>*</span>\n    //       </Label>\n    //       <Controller\n    //         name='country'\n    //         control={control}\n    //         render={({ field }) => (\n    //           // <Input id='country' placeholder='Australia' invalid={errors.country && true} {...field} />\n    //           <Select\n    //             isClearable={false}\n    //             classNamePrefix='select'\n    //             options={countryOptions}\n    //             theme={selectThemeColors}\n    //             className={classnames('react-select', { 'is-invalid': data !== null && data.country === null })}\n    //             {...field}\n    //           />\n    //         )}\n    //       />\n    //     </div>\n    //     <div className='mb-1'>\n    //       <Label className='form-label' for='user-role'>\n    //         User Role\n    //       </Label>\n    //       <Input type='select' id='user-role' name='user-role' value={role} onChange={e => setRole(e.target.value)}>\n    //         <option value='subscriber'>Subscriber</option>\n    //         <option value='editor'>Editor</option>\n    //         <option value='maintainer'>Maintainer</option>\n    //         <option value='author'>Author</option>\n    //         <option value='admin'>Admin</option>\n    //       </Input>\n    //     </div>\n    //     <div className='mb-1' value={plan} onChange={e => setPlan(e.target.value)}>\n    //       <Label className='form-label' for='select-plan'>\n    //         Select Plan\n    //       </Label>\n    //       <Input type='select' id='select-plan' name='select-plan'>\n    //         <option value='basic'>Basic</option>\n    //         <option value='enterprise'>Enterprise</option>\n    //         <option value='company'>Company</option>\n    //         <option value='team'>Team</option>\n    //       </Input>\n    //     </div>\n    //     <Button type='submit' className='me-1' color='primary'>\n    //       Submit\n    //     </Button>\n    //     <Button type='reset' color='secondary' outline onClick={toggleSidebar}>\n    //       Cancel\n    //     </Button>\n    //   </Form>\n    // </Sidebar>\n  )\n}\n\nexport default AddModal\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Table Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { getAllCity, getCity } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown, Share, Printer, FileText, File, Grid, Copy } from 'react-feather'\n\n// ** Utils\nimport { selectThemeColors } from '@utils'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  CardTitle,\n  CardHeader,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown\n} from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport { ROLES_CONSTANT } from '../../../../utility/constant'\nimport AddModal from './AddModal'\nimport { getAllState } from '../../State/store'\nimport { getAllCountry } from '../../Country/store'\n\n// ** Table Header\nconst CustomHeader = ({ cities, toggleSidebar, handlePerPage, rowsPerPage, handleFilter, searchTerm }) => {\n  // ** Converts table to CSV\n  function convertArrayOfObjectsToCSV(array) {\n    let result\n\n    const columnDelimiter = ','\n    const lineDelimiter = '\\n'\n    const keys = Object.keys(cities.brand[0])\n\n    result = ''\n    result += keys.join(columnDelimiter)\n    result += lineDelimiter\n\n    array.forEach(item => {\n      let ctr = 0\n      keys.forEach(key => {\n        if (ctr > 0) result += columnDelimiter\n\n        result += item[key]\n\n        ctr++\n      })\n      result += lineDelimiter\n    })\n\n    return result\n  }\n\n  // ** Downloads CSV\n  function downloadCSV(array) {\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n\n    const filename = 'export.csv'\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n      csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n  }\n  return (\n    <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\n      <Row>\n        <Col xl='6' className='d-flex align-items-center p-0'>\n          <div className='d-flex align-items-center w-100'>\n            <label htmlFor='rows-per-page'>Show</label>\n            <Input\n              className='mx-50'\n              type='select'\n              id='rows-per-page'\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: '5rem' }}\n            >\n              <option value='10'>10</option>\n              <option value='25'>25</option>\n              <option value='50'>50</option>\n            </Input>\n            <label htmlFor='rows-per-page'>Entries</label>\n          </div>\n        </Col>\n        <Col\n          xl='6'\n          className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n        >\n          <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n            <label className='mb-0' htmlFor='search-invoice'>\n              Search:\n            </label>\n            <Input\n              id='search-invoice'\n              className='ms-50 w-100'\n              type='text'\n              value={searchTerm}\n              onChange={e => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className='d-flex align-items-center table-header-actions'>\n            {/* <UncontrolledDropdown className='me-1'>\n              <DropdownToggle color='secondary' caret outline>\n                <Share className='font-small-4 me-50' />\n                <span className='align-middle'>Export</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem className='w-100'>\n                  <Printer className='font-small-4 me-50' />\n                  <span className='align-middle'>Print</span>\n                </DropdownItem>\n                <DropdownItem className='w-100' onClick={() => downloadCSV(cities.brand)}>\n                  <FileText className='font-small-4 me-50' />\n                  <span className='align-middle'>CSV</span>\n                </DropdownItem>\n                <DropdownItem className='w-100'>\n                  <Grid className='font-small-4 me-50' />\n                  <span className='align-middle'>Excel</span>\n                </DropdownItem>\n                <DropdownItem className='w-100'>\n                  <File className='font-small-4 me-50' />\n                  <span className='align-middle'>PDF</span>\n                </DropdownItem>\n                <DropdownItem className='w-100'>\n                  <Copy className='font-small-4 me-50' />\n                  <span className='align-middle'>Copy</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown> */}\n\n            <Button className='add-new-user' color='primary' onClick={toggleSidebar}>\n              Add New\n            </Button>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const cities = useSelector(state => state.cities)\n  const city = useSelector(state => state.cities.city)\n\n  // ** States\n  const [sort, setSort] = useState('desc')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortColumn, setSortColumn] = useState('id')\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [currentRole, setCurrentRole] = useState({ value: '', label: 'Select Role' })\n  // const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n  const [rolesOptions, setrolesOptions] = useState([])\n  const [seletectedCountryToFilterWith, setSeletectedCountryToFilterWith] = useState(\"\")\n  const [seletectedStateToFilterWith, setSeletectedStateToFilterWith] = useState(\"\")\n  const countries = useSelector(state => state.countries)\n  const states = useSelector(state => state.states)\n\n  // ** Function to toggle sidebar\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\n\n  // ** Get data on mount\n  useEffect(() => {\n\n    dispatch(getCity({\n      sort,\n      sortColumn,\n      q: searchTerm,\n      perPage: rowsPerPage,\n      page: currentPage,\n      role: currentRole.value,\n      status: currentStatus.value,\n      countryId: seletectedCountryToFilterWith?.value,\n      stateId: seletectedStateToFilterWith?.value\n    }))\n    dispatch(getAllCountry())\n    dispatch(getAllState())\n  }, [])\n  useEffect(() => {\n    // dispatch(\n    //   getCity({\n    //     sort,\n    //     sortColumn,\n    //     q: searchTerm,\n    //     page: currentPage,\n    //     perPage: rowsPerPage,\n    //     role: currentRole.value,\n    //     status: currentStatus.value\n    //     // currentPlan: currentPlan.value\n    //   })\n    // )\n    // ** Set Roles\n\n  }, [dispatch, sort, sortColumn, currentPage])\n\n  // ** User filter options\n  // const roleOptions = [\n  //   { value: '', label: 'Select Role' },\n  //   { value: 'admin', label: 'Admin' },\n  //   { value: 'author', label: 'Author' },\n  //   { value: 'editor', label: 'Editor' },\n  //   { value: 'maintainer', label: 'Maintainer' },\n  //   { value: 'subscriber', label: 'Subscriber' }\n  // ]\n\n  // const planOptions = [\n  //   { value: '', label: 'Select Plan' },\n  //   { value: 'basic', label: 'Basic' },\n  //   { value: 'company', label: 'Company' },\n  //   { value: 'enterprise', label: 'Enterprise' },\n  //   { value: 'team', label: 'Team' }\n  // ]\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'active', label: 'Active', number: true },\n    { value: 'inactive', label: 'Inactive', number: false }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getCity({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: rowsPerPage,\n        page: page.selected + 1,\n        role: currentRole.value,\n        status: currentStatus.value,\n        countryId: seletectedCountryToFilterWith?.value,\n        stateId: seletectedStateToFilterWith?.value\n\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    setCurrentPage(1)\n\n    dispatch(\n      getCity({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: value,\n        page: 1,\n        role: currentRole.value,\n        status: currentStatus.value,\n        countryId: seletectedCountryToFilterWith?.value,\n        stateId: seletectedStateToFilterWith?.value\n\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getCity({\n        sort,\n        q: val,\n        sortColumn,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value,\n        countryId: seletectedCountryToFilterWith?.value,\n        stateId: seletectedStateToFilterWith?.value\n\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(cities.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      role: currentRole.value,\n      status: currentStatus.value,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    console.log(cities, \"citiesdsdds\")\n    if (cities.cities.length > 0) {\n      return cities.cities\n    } else if (!cities || (cities.cities.length === 0 && isFiltered)) {\n      return []\n    } else {\n      return cities.cities.slice(0, rowsPerPage)\n    }\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSort(sortDirection)\n    setSortColumn(column.sortField)\n    dispatch(\n      getCity({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value,\n        countryId: seletectedCountryToFilterWith?.value,\n        stateId: seletectedStateToFilterWith?.value\n\n      })\n    )\n  }\n\n\n  useEffect(() => {\n    if (cities.selectedCity !== null) {\n      toggleSidebar()\n    }\n\n  }, [cities.selectedCity])\n\n  return (\n    <Fragment>\n      {/* <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Filters</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md='4'>\n              <Label for='role-select'>Role</Label>\n              <Select\n                isClearable={false}\n                value={currentRole}\n                options={rolesOptions}\n                className='react-select'\n                classNamePrefix='select'\n                theme={selectThemeColors}\n                onChange={data => {\n                  setCurrentRole(data)\n                  dispatch(\n                    getCity({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      role: data.value,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      status: currentStatus.value\n                    })\n                  )\n                }}\n              />\n            </Col>\n            {/* <Col className='my-md-0 my-1' md='4'>\n              <Label for='plan-select'>Plan</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={planOptions}\n                value={currentPlan}\n                onChange={data => {\n                  setCurrentPlan(data)\n                  dispatch(\n                    getCity({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: currentRole.value,\n                      currentPlan: data.value,\n                      status: currentStatus.value\n                    })\n                  )\n                }}\n              />\n            </Col> \n            <Col md='4'>\n              <Label for='status-select'>Status</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={statusOptions}\n                value={currentStatus}\n                onChange={data => {\n                  setCurrentStatus(data)\n                  dispatch(\n                    getCity({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      page: currentPage,\n                      status: data.value,\n                      perPage: rowsPerPage,\n                      role: currentRole.value\n                    })\n                  )\n                }}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card> */}\n\n      <Card className='overflow-hidden'>\n\n        <div className='mt-2 px-4'>\n          <Row>\n            <Col xl='3' className='d-flex align-items-center p-0'>\n              <div className='d-flex align-items-center w-100'>\n                <label htmlFor='rows-per-page'>Show</label>\n                <Input\n                  className='mx-50'\n                  type='select'\n                  id='rows-per-page'\n                  value={rowsPerPage}\n                  onChange={handlePerPage}\n                  style={{ width: '5rem' }}\n                >\n                  <option value='1'>1</option>\n                  <option value='2'>2</option>\n                  <option value='10'>10</option>\n                  <option value='25'>25</option>\n                  <option value='50'>50</option>\n                  <option value='100'>100</option>\n                  <option value='500'>500</option>\n                </Input>\n                <label htmlFor='rows-per-page'>Entries</label>\n              </div>\n            </Col>\n            <Col\n              xl='3'\n              lg='3'\n              sm='3'\n              xs='3'\n            >\n\n              <Select\n                isClearable={false}\n                value={seletectedCountryToFilterWith}\n                options={[{ label: \"View All\", value: \"\" }, ...countries.countries.map(el => ({ label: el.name, value: el._id }))]}\n                // theme={selectThemeColors}\n                className={\"col-6\"}\n                onChange={data => {\n                  console.log(\"data\", data)\n                  setSeletectedCountryToFilterWith(data)\n                  dispatch(\n                    getCity({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      role: data.value,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      status: currentStatus.value,\n                      countryId: data.value,\n                      stateId: seletectedStateToFilterWith?.value\n                    })\n                  )\n                }}\n              />\n\n            </Col>\n            <Col\n              xl='3'\n              lg='3'\n              sm='3'\n              xs='3'\n            >\n\n\n              <Select\n                isClearable={false}\n                value={seletectedStateToFilterWith}\n                options={[{ label: \"View All\", value: \"\" }, ...states.states.map(el => ({ label: el.name, value: el._id }))]}\n                // theme={selectThemeColors}\n                className={\"col-6\"}\n                onChange={data => {\n                  console.log(\"data\", data)\n                  setSeletectedStateToFilterWith(data)\n                  dispatch(\n                    getCity({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      role: data.value,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      status: currentStatus.value,\n                      countryId: seletectedCountryToFilterWith?.value,\n                      stateId: data.value\n                    })\n                  )\n                }}\n              />\n            </Col>\n            <Col\n              xl='3'\n              className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n            >\n              <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n                <label className='mb-0' htmlFor='search-invoice'>\n                  Search:\n                </label>\n                <Input\n                  id='search-invoice'\n                  className='ms-50 w-100'\n                  type='text'\n                  value={searchTerm}\n                  onChange={e => handleFilter(e.target.value)}\n                />\n              </div>\n\n              <div className='d-flex align-items-center table-header-actions'>\n\n                <Button className='add-new-user' color='primary' onClick={toggleSidebar}>\n                  Add New\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </div>\n        <div className='react-dataTable'>\n          <DataTable\n            noHeader\n            subHeader\n            sortServer\n            pagination\n            responsive\n            paginationServer\n            columns={columns}\n            onSort={handleSort}\n            sortIcon={<ChevronDown />}\n            className='react-dataTable'\n            paginationComponent={CustomPagination}\n            data={dataToRender()}\n          // subHeaderComponent={\n          //   <CustomHeader\n          //     cities={cities}\n          //     searchTerm={searchTerm}\n          //     rowsPerPage={rowsPerPage}\n          //     handleFilter={handleFilter}\n          //     handlePerPage={handlePerPage}\n          //     toggleSidebar={toggleSidebar}\n          //   />\n          // }\n          />\n        </div>\n      </Card>\n\n      <AddModal open={sidebarOpen} toggleSidebar={toggleSidebar} />\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\n\n// ** Icons Imports\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst CityList = () => {\n  return (\n    <div className='app-user-list'>\n      {/* <Row>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='primary'\n            statTitle='Total Users'\n            icon={<User size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>21,459</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='danger'\n            statTitle='Paid Users'\n            icon={<UserPlus size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>4,567</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='success'\n            statTitle='Active Users'\n            icon={<UserCheck size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>19,860</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='warning'\n            statTitle='Pending Users'\n            icon={<UserX size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>237</h3>}\n          />\n        </Col>\n      </Row> */}\n      <Table />\n    </div>\n  )\n}\n\nexport default CityList\n"],"sourceRoot":""}