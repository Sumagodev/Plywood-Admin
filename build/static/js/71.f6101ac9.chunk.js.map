{"version":3,"sources":["views/apps/calendar/Calendar.js","views/apps/calendar/SidebarLeft.js","views/apps/calendar/AddEventSidebar.js","views/apps/calendar/index.js","assets/images/pages/calendar-illustration.png"],"names":["Calendar","props","calendarRef","useRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","current","getApi","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","event","calendarEvent","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","className","click","dateClick","info","ev","date","eventDrop","droppedEvent","toast","success","eventResize","resizedEvent","ref","direction","memo","filters","label","color","SidebarLeft","updateFilter","updateAllFilters","block","onClick","id","type","checked","selectedCalendars","onChange","e","target","for","map","filter","classnames","includes","src","illustration","alt","AddEventSidebar","open","addEvent","removeEvent","refetchEvents","selectedEvent","control","setError","setValue","getValues","handleSubmit","formState","errors","useForm","defaultValues","title","url","setUrl","useState","desc","setDesc","guests","setGuests","allDay","setAllDay","location","setLocation","endPicker","setEndPicker","Date","startPicker","setStartPicker","calendarLabel","setCalendarLabel","value","guestsOptions","avatar","img1","img2","img3","img4","img5","img6","handleUpdateEvent","eventToUpdate","display","undefined","description","propsToUpdate","extendedPropsToUpdate","updatedEventData","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","updateEventInCalendar","handleDeleteEvent","eventId","remove","error","EventActions","isObjEmpty","outline","CloseBtn","size","isOpen","toggle","onOpened","resolveLabel","onClosed","contentClassName","modalClassName","close","tag","options","wheelPropagation","onSubmit","data","obj","handleAddEvent","name","render","field","placeholder","invalid","theme","selectThemeColors","classNamePrefix","isClearable","components","Option","required","enableTime","dateFormat","isMulti","img","rows","Business","Holiday","Personal","Family","ETC","CalendarComponent","useDispatch","useSelector","state","addSidebarOpen","setAddSidebarOpen","leftSidebarOpen","setLeftSidebarOpen","useRTL","val","fetchEvents","show"],"mappings":"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","file":"static/js/71.f6101ac9.chunk.js","sourcesContent":["// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { Menu } from 'react-feather'\nimport { Card, CardBody } from 'reactstrap'\n\nconst Calendar = props => {\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success('Event Updated')\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success('Event Updated')\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { CardBody, Button, Input, Label } from 'reactstrap'\n\n// ** illustration import\nimport illustration from '@src/assets/images/pages/calendar-illustration.png'\n\n// ** Filters Checkbox Array\nconst filters = [\n  { label: 'Personal', color: 'danger', className: 'form-check-danger mb-1' },\n  { label: 'Business', color: 'primary', className: 'form-check-primary mb-1' },\n  { label: 'Family', color: 'warning', className: 'form-check-warning mb-1' },\n  { label: 'Holiday', color: 'success', className: 'form-check-success mb-1' },\n  { label: 'ETC', color: 'info', className: 'form-check-info' }\n]\n\nconst SidebarLeft = props => {\n  // ** Props\n  const { handleAddEventSidebar, toggleSidebar, updateFilter, updateAllFilters, store, dispatch } = props\n\n  // ** Function to handle Add Event Click\n  const handleAddEventClick = () => {\n    toggleSidebar(false)\n    handleAddEventSidebar()\n  }\n\n  return (\n    <Fragment>\n      <div className='sidebar-wrapper'>\n        <CardBody className='card-body d-flex justify-content-center my-sm-0 mb-3'>\n          <Button color='primary' block onClick={handleAddEventClick}>\n            <span className='align-middle'>Add Event</span>\n          </Button>\n        </CardBody>\n        <CardBody>\n          <h5 className='section-label mb-1'>\n            <span className='align-middle'>Filter</span>\n          </h5>\n          <div className='form-check mb-1'>\n            <Input\n              id='view-all'\n              type='checkbox'\n              label='View All'\n              className='select-all'\n              checked={store.selectedCalendars.length === filters.length}\n              onChange={e => dispatch(updateAllFilters(e.target.checked))}\n            />\n            <Label className='form-check-label' for='view-all'>\n              View All\n            </Label>\n          </div>\n          <div className='calendar-events-filter'>\n            {filters.length &&\n              filters.map(filter => {\n                return (\n                  <div\n                    key={`${filter.label}-key`}\n                    className={classnames('form-check', {\n                      [filter.className]: filter.className\n                    })}\n                  >\n                    <Input\n                      type='checkbox'\n                      key={filter.label}\n                      label={filter.label}\n                      className='input-filter'\n                      id={`${filter.label}-event`}\n                      checked={store.selectedCalendars.includes(filter.label)}\n                      onChange={() => {\n                        dispatch(updateFilter(filter.label))\n                      }}\n                    />\n                    <Label className='form-check-label' for={`${filter.label}-event`}>\n                      {filter.label}\n                    </Label>\n                  </div>\n                )\n              })}\n          </div>\n        </CardBody>\n      </div>\n      <div className='mt-auto'>\n        <img className='img-fluid' src={illustration} alt='illustration' />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SidebarLeft\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { X } from 'react-feather'\nimport toast from 'react-hot-toast'\nimport Flatpickr from 'react-flatpickr'\nimport Select, { components } from 'react-select' // eslint-disable-line\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { useForm, Controller } from 'react-hook-form'\n\n// ** Reactstrap Imports\nimport { Button, Modal, ModalHeader, ModalBody, Label, Input, Form } from 'reactstrap'\n\n// ** Utils\nimport { selectThemeColors, isObjEmpty } from '@utils'\n\n// ** Avatar Images\nimport img1 from '@src/assets/images/avatars/1-small.png'\nimport img2 from '@src/assets/images/avatars/3-small.png'\nimport img3 from '@src/assets/images/avatars/5-small.png'\nimport img4 from '@src/assets/images/avatars/7-small.png'\nimport img5 from '@src/assets/images/avatars/9-small.png'\nimport img6 from '@src/assets/images/avatars/11-small.png'\n\n// ** Styles Imports\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\nconst AddEventSidebar = props => {\n  // ** Props\n  const {\n    open,\n    store,\n    dispatch,\n    addEvent,\n    calendarApi,\n    selectEvent,\n    updateEvent,\n    removeEvent,\n    refetchEvents,\n    calendarsColor,\n    handleAddEventSidebar\n  } = props\n\n  // ** Vars & Hooks\n  const selectedEvent = store.selectedEvent,\n    {\n      control,\n      setError,\n      setValue,\n      getValues,\n      handleSubmit,\n      formState: { errors }\n    } = useForm({\n      defaultValues: { title: '' }\n    })\n\n  // ** States\n  const [url, setUrl] = useState('')\n  const [desc, setDesc] = useState('')\n  const [guests, setGuests] = useState({})\n  const [allDay, setAllDay] = useState(false)\n  const [location, setLocation] = useState('')\n  const [endPicker, setEndPicker] = useState(new Date())\n  const [startPicker, setStartPicker] = useState(new Date())\n  const [calendarLabel, setCalendarLabel] = useState([{ value: 'Business', label: 'Business', color: 'primary' }])\n\n  // ** Select Options\n  const options = [\n    { value: 'Business', label: 'Business', color: 'primary' },\n    { value: 'Personal', label: 'Personal', color: 'danger' },\n    { value: 'Family', label: 'Family', color: 'warning' },\n    { value: 'Holiday', label: 'Holiday', color: 'success' },\n    { value: 'ETC', label: 'ETC', color: 'info' }\n  ]\n\n  const guestsOptions = [\n    { value: 'Donna Frank', label: 'Donna Frank', avatar: img1 },\n    { value: 'Jane Foster', label: 'Jane Foster', avatar: img2 },\n    { value: 'Gabrielle Robertson', label: 'Gabrielle Robertson', avatar: img3 },\n    { value: 'Lori Spears', label: 'Lori Spears', avatar: img4 },\n    { value: 'Sandy Vega', label: 'Sandy Vega', avatar: img5 },\n    { value: 'Cheryl May', label: 'Cheryl May', avatar: img6 }\n  ]\n\n  // ** Custom select components\n  const OptionComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <span className={`bullet bullet-${data.color} bullet-sm me-50`}></span>\n        {data.label}\n      </components.Option>\n    )\n  }\n\n  const GuestsComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <div className='d-flex flex-wrap align-items-center'>\n          <Avatar className='my-0 me-1' size='sm' img={data.avatar} />\n          <div>{data.label}</div>\n        </div>\n      </components.Option>\n    )\n  }\n\n  // ** Adds New Event\n  const handleAddEvent = () => {\n    const obj = {\n      title: getValues('title'),\n      start: startPicker,\n      end: endPicker,\n      allDay,\n      display: 'block',\n      extendedProps: {\n        calendar: calendarLabel[0].label,\n        url: url.length ? url : undefined,\n        guests: guests.length ? guests : undefined,\n        location: location.length ? location : undefined,\n        desc: desc.length ? desc : undefined\n      }\n    }\n    dispatch(addEvent(obj))\n    refetchEvents()\n    handleAddEventSidebar()\n    toast.success('Event Added')\n  }\n\n  // ** Reset Input Values on Close\n  const handleResetInputValues = () => {\n    dispatch(selectEvent({}))\n    setValue('title', '')\n    setAllDay(false)\n    setUrl('')\n    setLocation('')\n    setDesc('')\n    setGuests({})\n    setCalendarLabel([{ value: 'Business', label: 'Business', color: 'primary' }])\n    setStartPicker(new Date())\n    setEndPicker(new Date())\n  }\n\n  // ** Set sidebar fields\n  const handleSelectedEvent = () => {\n    if (!isObjEmpty(selectedEvent)) {\n      const calendar = selectedEvent.extendedProps.calendar\n\n      const resolveLabel = () => {\n        if (calendar.length) {\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\n        } else {\n          return { value: 'Business', label: 'Business', color: 'primary' }\n        }\n      }\n      setValue('title', selectedEvent.title || getValues('title'))\n      setAllDay(selectedEvent.allDay || allDay)\n      setUrl(selectedEvent.url || url)\n      setLocation(selectedEvent.extendedProps.location || location)\n      setDesc(selectedEvent.extendedProps.description || desc)\n      setGuests(selectedEvent.extendedProps.guests || guests)\n      setStartPicker(new Date(selectedEvent.start))\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\n      setCalendarLabel([resolveLabel()])\n    }\n  }\n\n  // ** (UI) updateEventInCalendar\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\n\n    // ** Set event properties except date related\n    // ? Docs: https://fullcalendar.io/docs/Event-setProp\n    // ** dateRelatedProps => ['start', 'end', 'allDay']\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < propsToUpdate.length; index++) {\n      const propName = propsToUpdate[index]\n      existingEvent.setProp(propName, updatedEventData[propName])\n    }\n\n    // ** Set date related props\n    // ? Docs: https://fullcalendar.io/docs/Event-setDates\n    existingEvent.setDates(new Date(updatedEventData.start), new Date(updatedEventData.end), {\n      allDay: updatedEventData.allDay\n    })\n\n    // ** Set event's extendedProps\n    // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < extendedPropsToUpdate.length; index++) {\n      const propName = extendedPropsToUpdate[index]\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\n    }\n  }\n\n  // ** Updates Event in Store\n  const handleUpdateEvent = () => {\n    if (getValues('title').length) {\n      const eventToUpdate = {\n        id: selectedEvent.id,\n        title: getValues('title'),\n        allDay,\n        start: startPicker,\n        end: endPicker,\n        url,\n        display: allDay === false ? 'block' : undefined,\n        extendedProps: {\n          location,\n          description: desc,\n          guests,\n          calendar: calendarLabel[0].label\n        }\n      }\n\n      const propsToUpdate = ['id', 'title', 'url']\n      const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\n      dispatch(updateEvent(eventToUpdate))\n      updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\n\n      handleAddEventSidebar()\n      toast.success('Event Updated')\n    } else {\n      setError('title', {\n        type: 'manual'\n      })\n    }\n  }\n\n  // ** (UI) removeEventInCalendar\n  const removeEventInCalendar = eventId => {\n    calendarApi.getEventById(eventId).remove()\n  }\n\n  const handleDeleteEvent = () => {\n    dispatch(removeEvent(selectedEvent.id))\n    removeEventInCalendar(selectedEvent.id)\n    handleAddEventSidebar()\n    toast.error('Event Removed')\n  }\n\n  // ** Event Action buttons\n  const EventActions = () => {\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n      return (\n        <Fragment>\n          <Button className='me-1' type='submit' color='primary'>\n            Add\n          </Button>\n          <Button color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\n            Cancel\n          </Button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button className='me-1' color='primary' onClick={handleUpdateEvent}>\n            Update\n          </Button>\n          <Button color='danger' onClick={handleDeleteEvent} outline>\n            Delete\n          </Button>\n        </Fragment>\n      )\n    }\n  }\n\n  // ** Close BTN\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\n\n  return (\n    <Modal\n      isOpen={open}\n      className='sidebar-lg'\n      toggle={handleAddEventSidebar}\n      onOpened={handleSelectedEvent}\n      onClosed={handleResetInputValues}\n      contentClassName='p-0 overflow-hidden'\n      modalClassName='modal-slide-in event-sidebar'\n    >\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\n        <h5 className='modal-title'>\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Add'} Event\n        </h5>\n      </ModalHeader>\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <Form\n            onSubmit={handleSubmit(data => {\n              if (data.title.length) {\n                if (isObjEmpty(errors)) {\n                  if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n                    handleAddEvent()\n                  } else {\n                    handleUpdateEvent()\n                  }\n                  handleAddEventSidebar()\n                }\n              } else {\n                setError('title', {\n                  type: 'manual'\n                })\n              }\n            })}\n          >\n            <div className='mb-1'>\n              <Label className='form-label' for='title'>\n                Title <span className='text-danger'>*</span>\n              </Label>\n              <Controller\n                name='title'\n                control={control}\n                render={({ field }) => (\n                  <Input id='title' placeholder='Title' invalid={errors.title && true} {...field} />\n                )}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='label'>\n                Label\n              </Label>\n              <Select\n                id='label'\n                value={calendarLabel}\n                options={options}\n                theme={selectThemeColors}\n                className='react-select'\n                classNamePrefix='select'\n                isClearable={false}\n                onChange={data => setCalendarLabel([data])}\n                components={{\n                  Option: OptionComponent\n                }}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='startDate'>\n                Start Date\n              </Label>\n              <Flatpickr\n                required\n                id='startDate'\n                name='startDate'\n                className='form-control'\n                onChange={date => setStartPicker(date[0])}\n                value={startPicker}\n                options={{\n                  enableTime: allDay === false,\n                  dateFormat: 'Y-m-d H:i'\n                }}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='endDate'>\n                End Date\n              </Label>\n              <Flatpickr\n                required\n                id='endDate'\n                // tag={Flatpickr}\n                name='endDate'\n                className='form-control'\n                onChange={date => setEndPicker(date[0])}\n                value={endPicker}\n                options={{\n                  enableTime: allDay === false,\n                  dateFormat: 'Y-m-d H:i'\n                }}\n              />\n            </div>\n\n            <div className='form-switch mb-1'>\n              <Input\n                id='allDay'\n                type='switch'\n                className='me-1'\n                checked={allDay}\n                name='customSwitch'\n                onChange={e => setAllDay(e.target.checked)}\n              />\n              <Label className='form-label' for='allDay'>\n                All Day\n              </Label>\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='eventURL'>\n                Event URL\n              </Label>\n              <Input\n                type='url'\n                id='eventURL'\n                value={url}\n                onChange={e => setUrl(e.target.value)}\n                placeholder='https://www.google.com'\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='guests'>\n                Guests\n              </Label>\n              <Select\n                isMulti\n                id='guests'\n                className='react-select'\n                classNamePrefix='select'\n                isClearable={false}\n                options={guestsOptions}\n                theme={selectThemeColors}\n                value={guests.length ? [...guests] : null}\n                onChange={data => setGuests([...data])}\n                components={{\n                  Option: GuestsComponent\n                }}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='location'>\n                Location\n              </Label>\n              <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='Office' />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='description'>\n                Description\n              </Label>\n              <Input\n                type='textarea'\n                name='text'\n                id='description'\n                rows='3'\n                value={desc}\n                onChange={e => setDesc(e.target.value)}\n                placeholder='Description'\n              />\n            </div>\n            <div className='d-flex mb-1'>\n              <EventActions />\n            </div>\n          </Form>\n        </ModalBody>\n      </PerfectScrollbar>\n    </Modal>\n  )\n}\n\nexport default AddEventSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Row, Col } from 'reactstrap'\n\n// ** Calendar App Component Imports\nimport Calendar from './Calendar'\nimport SidebarLeft from './SidebarLeft'\nimport AddEventSidebar from './AddEventSidebar'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchEvents, selectEvent, updateEvent, updateFilter, updateAllFilters, addEvent, removeEvent } from './store'\n\n// ** Styles\nimport '@styles/react/apps/app-calendar.scss'\n\n// ** CalendarColors\nconst calendarsColor = {\n  Business: 'primary',\n  Holiday: 'success',\n  Personal: 'danger',\n  Family: 'warning',\n  ETC: 'info'\n}\n\nconst CalendarComponent = () => {\n  // ** Variables\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.calendar)\n\n  // ** states\n  const [calendarApi, setCalendarApi] = useState(null)\n  const [addSidebarOpen, setAddSidebarOpen] = useState(false)\n  const [leftSidebarOpen, setLeftSidebarOpen] = useState(false)\n\n  // ** Hooks\n  const [isRtl] = useRTL()\n\n  // ** AddEventSidebar Toggle Function\n  const handleAddEventSidebar = () => setAddSidebarOpen(!addSidebarOpen)\n\n  // ** LeftSidebar Toggle Function\n  const toggleSidebar = val => setLeftSidebarOpen(val)\n\n  // ** Blank Event Object\n  const blankEvent = {\n    title: '',\n    start: '',\n    end: '',\n    allDay: false,\n    url: '',\n    extendedProps: {\n      calendar: '',\n      guests: [],\n      location: '',\n      description: ''\n    }\n  }\n\n  // ** refetchEvents\n  const refetchEvents = () => {\n    if (calendarApi !== null) {\n      calendarApi.refetchEvents()\n    }\n  }\n\n  // ** Fetch Events On Mount\n  useEffect(() => {\n    dispatch(fetchEvents(store.selectedCalendars))\n  }, [])\n\n  return (\n    <Fragment>\n      <div className='app-calendar overflow-hidden border'>\n        <Row className='g-0'>\n          <Col\n            id='app-calendar-sidebar'\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\n              show: leftSidebarOpen\n            })}\n          >\n            <SidebarLeft\n              store={store}\n              dispatch={dispatch}\n              updateFilter={updateFilter}\n              toggleSidebar={toggleSidebar}\n              updateAllFilters={updateAllFilters}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <Col className='position-relative'>\n            <Calendar\n              isRtl={isRtl}\n              store={store}\n              dispatch={dispatch}\n              blankEvent={blankEvent}\n              calendarApi={calendarApi}\n              selectEvent={selectEvent}\n              updateEvent={updateEvent}\n              toggleSidebar={toggleSidebar}\n              calendarsColor={calendarsColor}\n              setCalendarApi={setCalendarApi}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <div\n            className={classnames('body-content-overlay', {\n              show: leftSidebarOpen === true\n            })}\n            onClick={() => toggleSidebar(false)}\n          ></div>\n        </Row>\n      </div>\n      <AddEventSidebar\n        store={store}\n        dispatch={dispatch}\n        addEvent={addEvent}\n        open={addSidebarOpen}\n        selectEvent={selectEvent}\n        updateEvent={updateEvent}\n        removeEvent={removeEvent}\n        calendarApi={calendarApi}\n        refetchEvents={refetchEvents}\n        calendarsColor={calendarsColor}\n        handleAddEventSidebar={handleAddEventSidebar}\n      />\n    </Fragment>\n  )\n}\n\nexport default CalendarComponent\n","export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";"],"sourceRoot":""}