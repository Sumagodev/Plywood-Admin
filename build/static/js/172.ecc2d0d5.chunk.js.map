{"version":3,"sources":["views/products/list/Table.js","views/products/list/index.js"],"names":["CustomHeader","store","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","className","xl","htmlFor","type","id","value","onChange","style","width","e","target","to","color","UsersList","dispatch","useDispatch","useSelector","state","products","sort","setSort","allData","useState","setSearchTerm","currentPage","setCurrentPage","sortColumn","setSortColumn","setRowsPerPage","sidebarOpen","setSidebarOpen","currentRole","setCurrentRole","label","currentStatus","setCurrentStatus","number","rolesOptions","setrolesOptions","handleStatus","async","status","obj","approved","data","res","updateProductApi","message","toastSuccess","getProduct","q","perPage","page","role","error","toastError","useEffect","roleSelect","Object","values","ROLES_CONSTANT","map","el","length","selectedCategory","statusObj","pending","active","inactive","columns","name","sortable","sortField","cell","row","price","selector","cursor","onClick","preventDefault","updateProduct","_id","pill","checked","for","size","deleteProduct","noHeader","subHeader","sortServer","pagination","paginationServer","responsive","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","onSort","column","sortDirection","sortIcon","filters","isFiltered","keys","some","k","slice","dataToRender","subHeaderComponent","val","parseInt","currentTarget","CategoryList","Table"],"mappings":"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","file":"static/js/172.ecc2d0d5.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Table Columns\r\n// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Store & Actions\r\nimport { store } from '@store/store'\r\nimport { getProduct, deleteProduct, updateProduct } from '../store'\r\n\r\n// ** Icons Imports\r\nimport { Slack, User, Settings, Database, Edit2, MoreVertical, FileText, Trash2, Archive, Edit, ChevronDown } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button, Input, Label, Row, Col, Card } from 'reactstrap'\r\nimport { updateProductApi } from '../../../services/product.service'\r\nimport { toastError, toastSuccess } from '../../../utility/toastutill'\r\n\r\n// ** Store & Actions\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n// ** Third Party Components\r\nimport Select from 'react-select'\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\n// ** Utils\r\nimport { selectThemeColors } from '@utils'\r\n\r\n// ** Reactstrap Imports\r\n\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\r\nimport { ROLES_CONSTANT } from '../../../utility/constant'\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({ store, toggleSidebar, handlePerPage, rowsPerPage, handleFilter, searchTerm }) => {\r\n  // ** Converts table to CSV\r\n  function convertArrayOfObjectsToCSV(array) {\r\n    let result\r\n\r\n    const columnDelimiter = ','\r\n    const lineDelimiter = '\\n'\r\n    const keys = Object.keys(store.data[0])\r\n\r\n    result = ''\r\n    result += keys.join(columnDelimiter)\r\n    result += lineDelimiter\r\n\r\n    array.forEach(item => {\r\n      let ctr = 0\r\n      keys.forEach(key => {\r\n        if (ctr > 0) result += columnDelimiter\r\n\r\n        result += item[key]\r\n\r\n        ctr++\r\n      })\r\n      result += lineDelimiter\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  // ** Downloads CSV\r\n  function downloadCSV(array) {\r\n    const link = document.createElement('a')\r\n    let csv = convertArrayOfObjectsToCSV(array)\r\n    if (csv === null) return\r\n\r\n    const filename = 'export.csv'\r\n\r\n    if (!csv.match(/^data:text\\/csv/i)) {\r\n      csv = `data:text/csv;charset=utf-8,${csv}`\r\n    }\r\n\r\n    link.setAttribute('href', encodeURI(csv))\r\n    link.setAttribute('download', filename)\r\n    link.click()\r\n  }\r\n  return (\r\n    <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\r\n      <Row>\r\n        <Col xl='6' className='d-flex align-items-center p-0'>\r\n          <div className='d-flex align-items-center w-100'>\r\n            <label htmlFor='rows-per-page'>Show</label>\r\n            <Input\r\n              className='mx-50'\r\n              type='select'\r\n              id='rows-per-page'\r\n              value={rowsPerPage}\r\n              onChange={handlePerPage}\r\n              style={{ width: '5rem' }}\r\n            >\r\n              <option value='10'>10</option>\r\n              <option value='25'>25</option>\r\n              <option value='50'>50</option>\r\n              <option value='100'>100</option>\r\n              <option value='500'>500</option>\r\n            </Input>\r\n            <label htmlFor='rows-per-page'>Entries</label>\r\n          </div>\r\n        </Col>\r\n        <Col\r\n          xl='6'\r\n          className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\r\n        >\r\n          <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\r\n            <label className='mb-0' htmlFor='search-invoice'>\r\n              Search:\r\n            </label>\r\n            <Input\r\n              id='search-invoice'\r\n              className='ms-50 w-100'\r\n              type='text'\r\n              value={searchTerm}\r\n              onChange={e => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className='d-flex align-items-center table-header-actions'>\r\n            {/* <UncontrolledDropdown className='me-1'>\r\n              <DropdownToggle color='secondary' caret outline>\r\n                <Share className='font-small-4 me-50' />\r\n                <span className='align-middle'>Export</span>\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem className='w-100'>\r\n                  <Printer className='font-small-4 me-50' />\r\n                  <span className='align-middle'>Print</span>\r\n                </DropdownItem>\r\n                <DropdownItem className='w-100' onClick={() => downloadCSV(store.data)}>\r\n                  <FileText className='font-small-4 me-50' />\r\n                  <span className='align-middle'>CSV</span>\r\n                </DropdownItem>\r\n                <DropdownItem className='w-100'>\r\n                  <Grid className='font-small-4 me-50' />\r\n                  <span className='align-middle'>Excel</span>\r\n                </DropdownItem>\r\n                <DropdownItem className='w-100'>\r\n                  <File className='font-small-4 me-50' />\r\n                  <span className='align-middle'>PDF</span>\r\n                </DropdownItem>\r\n                <DropdownItem className='w-100'>\r\n                  <Copy className='font-small-4 me-50' />\r\n                  <span className='align-middle'>Copy</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown> */}\r\n\r\n            <Link to=\"/products/add-products\" className='add-new-user btn btn-primary' color='primary'>\r\n              Add New\r\n            </Link>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UsersList = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.products)\r\n  const allData = useSelector(state => state.products.allData)\r\n\r\n  // ** States\r\n  const [sort, setSort] = useState('desc')\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sortColumn, setSortColumn] = useState('id')\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [currentRole, setCurrentRole] = useState({ value: '', label: 'Select Role' })\r\n  // const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\r\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\r\n  const [rolesOptions, setrolesOptions] = useState([])\r\n\r\n  // ** Function to toggle sidebar\r\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\r\n  const handleStatus = async (id, status) => {\r\n    try {\r\n      // Create an object with the new status\r\n      const obj = {\r\n        approved: status // Directly use the status passed from the radio buttons\r\n      }\r\n\r\n      // Call the API to update the product status\r\n      const { data: res } = await updateProductApi(obj, id)\r\n\r\n      // Show success message if the response contains a message\r\n      if (res.message) {\r\n        toastSuccess(res.message)\r\n      }\r\n      dispatch(getProduct({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: rowsPerPage,\r\n        page: currentPage,\r\n        role: currentRole.value,\r\n        status: currentStatus.value\r\n      }))\r\n    } catch (error) {\r\n      // Show error message if the API call fails\r\n      toastError(error)\r\n    }\r\n  }\r\n\r\n\r\n  // ** Get data on mount\r\n  useEffect(() => {\r\n    dispatch(getProduct({\r\n      sort,\r\n      sortColumn,\r\n      q: searchTerm,\r\n      perPage: rowsPerPage,\r\n      page: currentPage,\r\n      role: currentRole.value,\r\n      status: currentStatus.value\r\n    }))\r\n  }, [])\r\n  useEffect(() => {\r\n    // dispatch(\r\n    //   getProduct({\r\n    //     sort,\r\n    //     sortColumn,\r\n    //     q: searchTerm,\r\n    //     page: currentPage,\r\n    //     perPage: rowsPerPage,\r\n    //     role: currentRole.value,\r\n    //     status: currentStatus.value\r\n    //     // currentPlan: currentPlan.value\r\n    //   })\r\n    // )\r\n    // ** Set Roles\r\n\r\n    const roleSelect = Object.values(ROLES_CONSTANT).map(el => {\r\n      return { label: el, value: el }\r\n    })\r\n    setrolesOptions(roleSelect)\r\n\r\n  }, [dispatch, store.data.length, sort, sortColumn, currentPage])\r\n\r\n  // ** User filter options\r\n  // const roleOptions = [\r\n  //   { value: '', label: 'Select Role' },\r\n  //   { value: 'admin', label: 'Admin' },\r\n  //   { value: 'author', label: 'Author' },\r\n  //   { value: 'editor', label: 'Editor' },\r\n  //   { value: 'maintainer', label: 'Maintainer' },\r\n  //   { value: 'subscriber', label: 'Subscriber' }\r\n  // ]\r\n\r\n  // const planOptions = [\r\n  //   { value: '', label: 'Select Plan' },\r\n  //   { value: 'basic', label: 'Basic' },\r\n  //   { value: 'company', label: 'Company' },\r\n  //   { value: 'enterprise', label: 'Enterprise' },\r\n  //   { value: 'team', label: 'Team' }\r\n  // ]\r\n\r\n  const statusOptions = [\r\n    { value: '', label: 'Select Status', number: 0 },\r\n    { value: 'active', label: 'Active', number: true },\r\n    { value: 'inactive', label: 'Inactive', number: false }\r\n  ]\r\n\r\n  // ** Function in get data on page change\r\n  const handlePagination = page => {\r\n    dispatch(\r\n      getProduct({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: rowsPerPage,\r\n        page: page.selected + 1,\r\n        role: currentRole.value,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  // ** Function in get data on rows per page\r\n  const handlePerPage = e => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    setCurrentPage(1)\r\n\r\n    dispatch(\r\n      getProduct({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: value,\r\n        page: 1,\r\n        role: currentRole.value,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  // ** Function in get data on search query change\r\n  const handleFilter = val => {\r\n    setSearchTerm(val)\r\n    dispatch(\r\n      getProduct({\r\n        sort,\r\n        q: val,\r\n        sortColumn,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        role: currentRole.value,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n  }\r\n\r\n  // ** Custom Pagination\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={''}\r\n        nextLabel={''}\r\n        pageCount={count || 1}\r\n        activeClassName='active'\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={page => handlePagination(page)}\r\n        pageClassName={'page-item'}\r\n        nextLinkClassName={'page-link'}\r\n        nextClassName={'page-item next'}\r\n        previousClassName={'page-item prev'}\r\n        previousLinkClassName={'page-link'}\r\n        pageLinkClassName={'page-link'}\r\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\r\n      />\r\n    )\r\n  }\r\n\r\n  // ** Table data to render\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      role: currentRole.value,\r\n      status: currentStatus.value,\r\n      q: searchTerm\r\n    }\r\n\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    if (store.data.length > 0) {\r\n      return store.data\r\n    } else if (store.data.length === 0 && isFiltered) {\r\n      return []\r\n    } else {\r\n      return store.allData.slice(0, rowsPerPage)\r\n    }\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSort(sortDirection)\r\n    setSortColumn(column.sortField)\r\n    dispatch(\r\n      getProduct({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        role: currentRole.value,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (store.selectedCategory !== null) {\r\n      toggleSidebar()\r\n    }\r\n\r\n  }, [store.selectedCategory])\r\n  const statusObj = {\r\n    pending: 'light-warning',\r\n    active: 'light-success',\r\n    inactive: 'light-secondary'\r\n  }\r\n\r\n  const columns = [\r\n    // {\r\n    //   name: 'S.no.',\r\n    //   sortable: false,\r\n    //   sortField: 'name',\r\n    //   width: \"25%\",\r\n    //   cell: (row, i) => i + 1\r\n    // },\r\n    {\r\n      name: 'Name',\r\n      sortable: true,\r\n      sortField: 'name',\r\n      width: \"20%\",\r\n      cell: row => row.name\r\n    },\r\n    {\r\n      name: 'Price',\r\n      sortable: true,\r\n      sortField: 'Price',\r\n      width: \"10%\",\r\n      cell: row => row.price\r\n    },\r\n    {\r\n      name: 'Status',\r\n      sortable: true,\r\n      sortField: 'status',\r\n      selector: row => row.status,\r\n      width: \"10%\",\r\n      cell: row => (\r\n        <Badge style={{ cursor: \"pointer\" }} className='text-capitalize'\r\n          onClick={e => {\r\n            e.preventDefault()\r\n            store.dispatch(\r\n              updateProduct({\r\n                status: !row.status,\r\n                id: row._id\r\n              })\r\n            )\r\n          }}\r\n          color={statusObj[row.status === true ? 'active' : 'inactive']} pill>\r\n          {row.status === true ? 'active' : 'inactive'}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      name: 'Actions',\r\n      width: \"40%\",\r\n      cell: row => (\r\n        <>\r\n          {/* Radio Buttons for Status */}\r\n          <div className=\"d-flex align-items-center\">\r\n            {/* Approved Radio Button */}\r\n            <div className=\"form-check form-check-inline me-2\">\r\n              <Input\r\n                type=\"radio\"\r\n\r\n                name={`status-${row._id}`}\r\n                id={`approved-${row._id}`}\r\n                checked={row.approved === \"APPROVED\"}\r\n                onChange={() => handleStatus(row._id, \"APPROVED\")}\r\n\r\n\r\n              />\r\n              <Label for={`approved-${row._id}`} className=\"form-check-label\">\r\n                Approved\r\n              </Label>\r\n            </div>\r\n\r\n            {/* Pending Radio Button */}\r\n            <div className=\"form-check form-check-inline me-2\">\r\n              <Input\r\n                type=\"radio\"\r\n                name={`status-${row._id}`}\r\n                id={`pending-${row._id}`}\r\n                checked={row.approved === \"PENDING\"}\r\n                onChange={() => handleStatus(row._id, \"PENDING\")}\r\n              />\r\n              <Label for={`pending-${row._id}`} className=\"form-check-label\">\r\n                Pending\r\n              </Label>\r\n            </div>\r\n\r\n            {/* Rejected Radio Button */}\r\n            <div className=\"form-check form-check-inline\">\r\n              <Input\r\n                type=\"radio\"\r\n                name={`status-${row._id}`}\r\n                id={`rejected-${row._id}`}\r\n                checked={row.approved === \"REJECTED\"}\r\n                onChange={() => handleStatus(row._id, \"REJECTED\")}\r\n              />\r\n              <Label for={`rejected-${row._id}`} className=\"form-check-label\">\r\n                Rejected\r\n              </Label>\r\n            </div>\r\n          </div>       \r\n        </>\r\n      )\r\n    },\r\n    {\r\n      name: 'Actions',\r\n      width: \"10%\",\r\n      cell: row => (\r\n        <>\r\n\r\n          <Link color='primary' to={`/products/edit-product/${row._id}`} className='btn-sm ms-2  btn-primary' onClick={() => {\r\n\r\n            store.dispatch(getProduct(row._id))\r\n          }}>     <Edit size={14} /></Link>\r\n          <Button color='danger' className='ms-2 btn-sm'\r\n            onClick={e => {\r\n              e.preventDefault()\r\n              store.dispatch(deleteProduct(row._id))\r\n            }}\r\n          >    <Trash2 size={14} /></Button>\r\n        </>\r\n        // <div className='column-action'>\r\n        //   <UncontrolledDropdown>\r\n        //     <DropdownToggle tag='div' className='btn btn-sm'>\r\n        //       <MoreVertical size={14} className='cursor-pointer' />\r\n        //     </DropdownToggle>\r\n        //     <DropdownMenu>\r\n        //       <DropdownItem tag='a' href='/' className='w-100' onClick={e => { \r\n        //         e.preventDefault() \r\n        //         store.dispatch(getProduct(row._id))\r\n        //         }}\r\n        //         >\r\n        //         <Archive size={14} className='me-50' />\r\n        //         <span className='align-middle'>Edit</span>\r\n        //       </DropdownItem>\r\n        //       <DropdownItem\r\n        //         tag='a'\r\n        //         href='/'\r\n        //         className='w-100'\r\n        //         onClick={e => {\r\n        //           e.preventDefault()\r\n        //           store.dispatch(deleteProduct(row._id))\r\n        //         }}\r\n        //       >\r\n        //         <Trash2 size={14} className='me-50' />\r\n        //         <span className='align-middle'>Delete</span>\r\n        //       </DropdownItem>\r\n        //     </DropdownMenu>\r\n        //   </UncontrolledDropdown>\r\n        // </div>\r\n      )\r\n    }\r\n  ]\r\n  return (\r\n    <Fragment>\r\n      {/* <Card>\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>Filters</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col md='4'>\r\n              <Label for='role-select'>Role</Label>\r\n              <Select\r\n                isClearable={false}\r\n                value={currentRole}\r\n                options={rolesOptions}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                theme={selectThemeColors}\r\n                onChange={data => {\r\n                  setCurrentRole(data)\r\n                  dispatch(\r\n                    getProduct({\r\n                      sort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      role: data.value,\r\n                      page: currentPage,\r\n                      perPage: rowsPerPage,\r\n                      status: currentStatus.value\r\n                    })\r\n                  )\r\n                }}\r\n              />\r\n            </Col>\r\n            {/* <Col className='my-md-0 my-1' md='4'>\r\n              <Label for='plan-select'>Plan</Label>\r\n              <Select\r\n                theme={selectThemeColors}\r\n                isClearable={false}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                options={planOptions}\r\n                value={currentPlan}\r\n                onChange={data => {\r\n                  setCurrentPlan(data)\r\n                  dispatch(\r\n                    getProduct({\r\n                      sort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      page: currentPage,\r\n                      perPage: rowsPerPage,\r\n                      role: currentRole.value,\r\n                      currentPlan: data.value,\r\n                      status: currentStatus.value\r\n                    })\r\n                  )\r\n                }}\r\n              />\r\n            </Col> \r\n            <Col md='4'>\r\n              <Label for='status-select'>Status</Label>\r\n              <Select\r\n                theme={selectThemeColors}\r\n                isClearable={false}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                options={statusOptions}\r\n                value={currentStatus}\r\n                onChange={data => {\r\n                  setCurrentStatus(data)\r\n                  dispatch(\r\n                    getProduct({\r\n                      sort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      page: currentPage,\r\n                      status: data.value,\r\n                      perPage: rowsPerPage,\r\n                      role: currentRole.value\r\n                    })\r\n                  )\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card> */}\r\n\r\n      <Card className='overflow-hidden'>\r\n        <div className='react-dataTable'>\r\n          <DataTable\r\n            noHeader\r\n            subHeader\r\n            sortServer\r\n            pagination\r\n            paginationServer\r\n            responsive\r\n            paginationComponent={CustomPagination}\r\n            columns={columns}\r\n            onSort={handleSort}\r\n            sortIcon={<ChevronDown />}\r\n            className='react-dataTable'\r\n            data={dataToRender()}\r\n            subHeaderComponent={\r\n              <CustomHeader\r\n                store={store}\r\n                searchTerm={searchTerm}\r\n                rowsPerPage={rowsPerPage}\r\n                handleFilter={handleFilter}\r\n                handlePerPage={handlePerPage}\r\n                toggleSidebar={toggleSidebar}\r\n              />\r\n            }\r\n          />\r\n        </div>\r\n      </Card>\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n","// ** User List Component\r\nimport Table from './Table'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\r\n\r\n// ** Icons Imports\r\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-users.scss'\r\n\r\nconst CategoryList = () => {\r\n  return (\r\n    <div className='app-user-list'>\r\n      {/* <Row>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='primary'\r\n            statTitle='Total Users'\r\n            icon={<User size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>21,459</h3>}\r\n          />\r\n        </Col>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='danger'\r\n            statTitle='Paid Users'\r\n            icon={<UserPlus size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>4,567</h3>}\r\n          />\r\n        </Col>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='success'\r\n            statTitle='Active Users'\r\n            icon={<UserCheck size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>19,860</h3>}\r\n          />\r\n        </Col>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='warning'\r\n            statTitle='Pending Users'\r\n            icon={<UserX size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>237</h3>}\r\n          />\r\n        </Col>\r\n      </Row> */}\r\n      <Table />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n"],"sourceRoot":""}