{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","role","className","size","color","icon","onClick","toast","dismiss","id","defaultValues","password","loginEmail","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","control","setError","handleSubmit","formState","errors","useForm","illustration","source","require","default","to","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","async","Object","values","data","every","field","length","resLogin","loginApi","email","token","accessToken","refreshToken","console","log","handleLogin","getHomeRouteForLoggedInUser","err","toastError","key","type","for","render","autoFocus","placeholder","invalid","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","useState","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/12.870a99d8.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useNavigate } from 'react-router-dom'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee, X } from 'react-feather'\n\n// ** Actions\nimport { handleLogin } from '@store/authentication'\n\n// ** Context\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Alert, Button, CardText, CardTitle, UncontrolledTooltip } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport { loginApi } from '../../../services/user.service'\nimport { toastError } from '../../../utility/toastutill'\n\nconst ToastContent = ({ t, name, role }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>You have successfully logged in as an {role} user to Cloud Bazar. Now you can start to explore. Enjoy!</span>\n      </div>\n    </div>\n  )\n}\n\nconst defaultValues = {\n  password: '',\n  loginEmail: ''\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = async data => {\n    if (Object.values(data).every(field => field.length > 0)) {\n\n      try {\n        const resLogin = await loginApi({ email: data.loginEmail, password: data.password })\n        if (resLogin.data.token) {\n          const data = { ...resLogin.data, accessToken: resLogin.data.token, refreshToken: resLogin.data.refreshToken }\n\n          console.log(data, \"userer data\")\n          dispatch(handleLogin(data))\n          // ability.update(res.data.userData.ability)\n          navigate(getHomeRouteForLoggedInUser(data.role))\n          toast(t => (\n            <ToastContent t={t} role={data.role || 'ADMIN'} name={data.name || 'User'} />\n          ))\n        }\n      } catch (err) {\n        console.log(err)\n        toastError(err)\n\n      }\n      // login({ email: data.loginEmail, password: data.password })\n      //   .then(res => {\n      //     const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\n      //     dispatch(handleLogin(data))\n      //     ability.update(res.data.userData.ability)\n      //     navigate(getHomeRouteForLoggedInUser(data.role))\n      //     toast(t => (\n      //       <ToastContent t={t} role={data.role || 'admin'} name={data.fullName || data.username || 'John Doe'} />\n      //     ))\n      //   })\n      //   .catch(err => console.log(err))\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ms-1'>Vuexy</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Welcome to Vuexy! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            {/* <Alert color='primary'>\n              <div className='alert-body font-small-2'>\n                <p>\n                  <small className='me-50'>\n                    <span className='fw-bold'>Admin:</span> admin@demo.com | admin\n                  </small>\n                </p>\n                <p>\n                  <small className='me-50'>\n                    <span className='fw-bold'>Client:</span> client@demo.com | client\n                  </small>\n                </p>\n              </div>\n              <HelpCircle\n                id='login-tip'\n                className='position-absolute'\n                size={18}\n                style={{ top: '10px', right: '10px' }}\n              />\n              <UncontrolledTooltip target='login-tip' placement='left'>\n                This is just for ACL demo purpose.\n              </UncontrolledTooltip>\n            </Alert> */}\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='loginEmail'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              {/* <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div> */}\n              <Button type='submit' color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n            {/* <p className='text-center mt-2'>\n              <span className='me-25'>New on our platform?</span>\n              <Link to='/register'>\n                <span>Create an account</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div> */}\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}