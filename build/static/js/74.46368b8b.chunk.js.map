{"version":3,"sources":["@core/components/card-actions/index.js","views/ui-elements/cards/actions/index.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","useState","collapse","setCollapse","visibility","setVisibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","UiLoader","blocking","className","classnames","tag","Array","isArray","map","i","Tag","length","size","onClick","renderIcons","isOpen","data","sm","endLoading","setTimeout","responsive","bordered","md","BreadCrumbs","to","item","index","Wrapper","link","Link","isLastItem","active","color","end","UILoader","loader","overlayColor","show","style","backgroundColor","defaultProps"],"mappings":"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","file":"static/js/74.46368b8b.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport UiLoader from '@components/ui-loader'\r\nimport { ChevronDown, RotateCw, X } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardActions = props => {\r\n  // ** Props\r\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\r\n\r\n  // ** States\r\n  const [reload, setReload] = useState(false)\r\n  const [collapse, setCollapse] = useState(true)\r\n  const [visibility, setVisibility] = useState(true)\r\n\r\n  /**\r\n   ** If custom icon is defined then consider that else default icons\r\n   */\r\n  const Icons = {\r\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\r\n    remove: removeIcon ? removeIcon : X,\r\n    reload: reloadIcon ? reloadIcon : RotateCw\r\n  }\r\n\r\n  // ** Action to call\r\n  const callAction = action => {\r\n    switch (action) {\r\n      case 'collapse':\r\n        return setCollapse(!collapse)\r\n      case 'remove':\r\n        return setVisibility(false)\r\n      case 'reload':\r\n        return setReload(true)\r\n      default:\r\n    }\r\n  }\r\n\r\n  // ** Renders card actions\r\n  const renderIcons = () => {\r\n    /**\r\n     ** IF: user passes array of actions then loop through them & render all of the actions\r\n     ** ELSE: render single action\r\n     */\r\n\r\n    if (Array.isArray(actions)) {\r\n      return actions.map((action, i) => {\r\n        const Tag = Icons[action]\r\n        return (\r\n          <Tag\r\n            key={i}\r\n            className={classnames('cursor-pointer', {\r\n              'me-50': i < actions.length - 1\r\n            })}\r\n            size={15}\r\n            onClick={() => callAction(action)}\r\n          />\r\n        )\r\n      })\r\n    } else {\r\n      const Tag = Icons[actions]\r\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\r\n    }\r\n  }\r\n\r\n  // ** Ends reload\r\n  const removeReload = () => {\r\n    setReload(false)\r\n  }\r\n\r\n  // ** If user passes endReload function call it.\r\n  useEffect(() => {\r\n    if (reload) {\r\n      endReload(removeReload)\r\n    }\r\n  })\r\n\r\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\r\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\r\n\r\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\r\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\r\n\r\n  return (\r\n    <BlockUiWrapper\r\n      /*eslint-disable */\r\n      {...(actions === 'reload' || actions.includes('reload')\r\n        ? {\r\n            blocking: reload\r\n          }\r\n        : {})}\r\n      /*eslint-enable */\r\n    >\r\n      <Card\r\n        className={classnames('card-action', {\r\n          'd-none': !visibility\r\n        })}\r\n      >\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>{title}</CardTitle>\r\n          <div className='action-icons'>{renderIcons()}</div>\r\n        </CardHeader>\r\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\r\n          {children}\r\n        </CollapseWrapper>\r\n      </Card>\r\n    </BlockUiWrapper>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n\r\n// ** PropTypes\r\nCardActions.propTypes = {\r\n  removeIcon: PropTypes.any,\r\n  reloadIcon: PropTypes.any,\r\n  collapseIcon: PropTypes.any,\r\n  title: PropTypes.string.isRequired,\r\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\r\n  endReload(props) {\r\n    // ** User passes reload action and doesn't pass endReload then return Error\r\n    if (\r\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\r\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\r\n    ) {\r\n      return new Error('Please provide a function to end reload!')\r\n    }\r\n  }\r\n}\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport CardAction from '@components/card-actions'\r\n\r\n// ** Icons Imports\r\nimport { ChevronDown, RotateCw, X } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { CardBody, CardText, Row, Col, Table } from 'reactstrap'\r\n\r\nconst CardActions = () => {\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs title='Card Actions' data={[{ title: 'Cards' }, { title: 'Card Actions' }]} />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <CardAction\r\n            title='Card Actions'\r\n            actions={['collapse', 'reload', 'remove']}\r\n            endReload={endLoading => {\r\n              setTimeout(() => endLoading(), 2000)\r\n            }}\r\n          >\r\n            <CardBody className='pt-0'>\r\n              <Table responsive bordered>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Action</th>\r\n                    <th>Icon</th>\r\n                    <th>Details</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Collapse</td>\r\n                    <td className='text-center'>\r\n                      <ChevronDown className='collapse-icon' size={15} />\r\n                    </td>\r\n                    <td> Collapse card content using collapse action.</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Refresh Content</td>\r\n                    <td className='text-center'>\r\n                      <RotateCw size={15} />\r\n                    </td>\r\n                    <td>Refresh your card content using refresh action.</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Remove Card</td>\r\n                    <td className='text-center'>\r\n                      <X size={15} />\r\n                    </td>\r\n                    <td> Remove card from page using remove card action</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md='6' sm='12'>\r\n          <CardAction title='Collapse' actions='collapse'>\r\n            <CardBody className='pt-0'>\r\n              <CardText>\r\n                You can create a collapsible content by using our <code>CardAction</code> component and by passing prop{' '}\r\n                <code>actions='collapse'</code>.\r\n              </CardText>\r\n              <CardText className='mb-0'>\r\n                Click on <ChevronDown size={15} /> to see card collapse in action\r\n              </CardText>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <CardAction\r\n            title='Reload'\r\n            actions='reload'\r\n            endReload={endLoading => {\r\n              setTimeout(() => endLoading(), 2000)\r\n            }}\r\n          >\r\n            <CardBody className='pt-0'>\r\n              <CardText>\r\n                To create a re-loadable card pass prop <code>actions='reload'</code> and pass prop{' '}\r\n                <code>endReload</code> to end the loading.\r\n              </CardText>\r\n              <CardText className='mb-0'>\r\n                Click on <RotateCw size={15} /> to see card refresh in action\r\n              </CardText>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <CardAction title='Remove' actions='remove'>\r\n            <CardBody className='pt-0'>\r\n              <CardText>\r\n                You can add refresh content action to card by adding class <code>.card-reload</code> with your card tag,\r\n                and add conditional spinner into card body to show when card is refreshing.\r\n              </CardText>\r\n              <CardText className='mb-0'>\r\n                Click on <RotateCw size={15} /> to see card refresh in action\r\n              </CardText>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CardActions\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag='li'\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ 'text-primary': !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/todo'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport './ui-loader.scss'\r\n\r\nconst UILoader = props => {\r\n  const { children, blocking, loader, className, tag, overlayColor } = props\r\n\r\n  const Tag = tag\r\n\r\n  return (\r\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\r\n      {children}\r\n      {blocking ? (\r\n        <Fragment>\r\n          <div\r\n            className='overlay' /*eslint-disable */\r\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\r\n            /*eslint-enable */\r\n          ></div>\r\n          <div className='loader'>{loader}</div>\r\n        </Fragment>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default UILoader\r\n\r\nUILoader.defaultProps = {\r\n  tag: 'div',\r\n  blocking: false,\r\n  loader: <Spinner color='primary' />\r\n}\r\n\r\nUILoader.propTypes = {\r\n  tag: Proptypes.string,\r\n  loader: Proptypes.any,\r\n  className: Proptypes.string,\r\n  overlayColor: Proptypes.string,\r\n  blocking: Proptypes.bool.isRequired\r\n}\r\n"],"sourceRoot":""}