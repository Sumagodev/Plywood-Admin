{"version":3,"sources":["views/location/Country/list/columns.js","views/location/Country/list/AddModal.js","views/location/Country/list/Table.js","views/location/Country/list/index.js"],"names":["statusObj","pending","active","inactive","columns","name","sortable","sortField","cell","row","selector","status","className","color","pill","onClick","e","preventDefault","store","dispatch","getCountryById","_id","size","deleteCountry","AddModal","open","toggleSidebar","useSelector","state","countries","setname","useState","setstatus","isUpdated","setisUpdated","updateObj","setupdateObj","useDispatch","onSubmit","toastError","updateCountry","id","addCountry","useEffect","selectedCountry","country","isOpen","onClosed","toggle","for","value","onChange","target","type","checked","UsersList","sort","setSort","searchTerm","setSearchTerm","currentPage","setCurrentPage","sortColumn","setSortColumn","rowsPerPage","setRowsPerPage","sidebarOpen","setSidebarOpen","currentStatus","setCurrentStatus","label","number","rolesOptions","setrolesOptions","getCountry","q","perPage","page","xl","htmlFor","parseInt","currentTarget","style","width","handleFilter","val","noHeader","subHeader","sortServer","pagination","responsive","paginationServer","onSort","column","sortDirection","sortIcon","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","data","CountryList","Table"],"mappings":"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","file":"static/js/169.9742a75e.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Store & Actions\r\nimport { store } from '@store/store'\r\nimport { getCountry, deleteCountry, getCountryById } from '../store'\r\n\r\n// ** Icons Imports\r\nimport { Slack, User, Settings, Database, Edit2, MoreVertical, FileText, Trash2, Archive, PenTool, Edit } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from 'reactstrap'\r\n\r\n// ** Renders Client Columns\r\nconst renderClient = row => {\r\n  if (row.avatar.length) {\r\n    return <Avatar className='me-1' img={row.avatar} width='32' height='32' />\r\n  } else {\r\n    return (\r\n      <Avatar\r\n        initials\r\n        className='me-1'\r\n        color={row.avatarColor || 'light-primary'}\r\n        content={row.fullName || 'John Doe'}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n// ** Renders Role Columns\r\nconst renderRole = row => {\r\n  const roleObj = {\r\n    subscriber: {\r\n      class: 'text-primary',\r\n      icon: User\r\n    },\r\n    maintainer: {\r\n      class: 'text-success',\r\n      icon: Database\r\n    },\r\n    editor: {\r\n      class: 'text-info',\r\n      icon: Edit2\r\n    },\r\n    author: {\r\n      class: 'text-warning',\r\n      icon: Settings\r\n    },\r\n    admin: {\r\n      class: 'text-danger',\r\n      icon: Slack\r\n    }\r\n  }\r\n\r\n  const Icon = roleObj[row.role] ? roleObj[row.role].icon : Edit2\r\n\r\n  return (\r\n    <span className='text-truncate text-capitalize align-middle'>\r\n      <Icon size={18} className={`${roleObj[row.role] ? roleObj[row.role].class : ''} me-50`} />\r\n      {row.role}\r\n    </span>\r\n  )\r\n}\r\n\r\nconst statusObj = {\r\n  pending: 'light-warning',\r\n  active: 'light-success',\r\n  inactive: 'light-secondary'\r\n}\r\n\r\nexport const columns = [\r\n  {\r\n    name: 'Name',\r\n    sortable: true,\r\n    sortField: 'name',\r\n    cell: row => row.name\r\n  },\r\n  {\r\n    name: 'Status',\r\n    sortable: true,\r\n    sortField: 'status',\r\n    selector: row => row.status,\r\n    cell: row => (\r\n      <Badge className='text-capitalize' color={statusObj[row.status === true ? 'active' : 'inactive']} pill>\r\n       {row.status === true ? 'Active' : 'Inactive'}\r\n      </Badge>\r\n    )\r\n  },\r\n  {\r\n    name: 'Actions',\r\n    cell: row => (\r\n      <>\r\n      <Button color='primary'  className='btn-sm' onClick={e => { \r\n              e.preventDefault() \r\n              store.dispatch(getCountryById(row._id))\r\n              }}>     <Edit size={14} /></Button>\r\n      <Button color='danger' className='mx-2 btn-sm'  \r\n                    onClick={e => {\r\n                e.preventDefault()\r\n                store.dispatch(deleteCountry(row._id))\r\n              }}\r\n      >    <Trash2 size={14}  /></Button>\r\n      </>\r\n      // <div className='column-action'>\r\n    \r\n      //   <UncontrolledDropdown>\r\n      //     <DropdownToggle tag='div' className='btn btn-sm'>\r\n      //       <MoreVertical size={14} className='cursor-pointer' />\r\n      //     </DropdownToggle>\r\n      //     <DropdownMenu>\r\n      //       <DropdownItem tag='a' href='/' className='w-100' \r\n      //         >\r\n      //         <Archive size={14} className='me-50' />\r\n      //         <span className='align-middle'>Edit</span>\r\n      //       </DropdownItem>\r\n      //       <DropdownItem\r\n      //         tag='a'\r\n      //         href='/'\r\n      //         className='w-100'\r\n      //         onClick={e => {\r\n      //           e.preventDefault()\r\n      //           store.dispatch(deleteCountry(row._id))\r\n      //         }}\r\n      //       >\r\n      //         <Trash2 size={14} className='me-50' />\r\n      //         <span className='align-middle'>Delete</span>\r\n      //       </DropdownItem>\r\n      //     </DropdownMenu>\r\n      //   </UncontrolledDropdown>\r\n      // </div>\r\n    )\r\n  }\r\n]\r\n","// ** React Import\r\nimport { useEffect, useState } from 'react'\r\n\r\n// ** Custom Components\r\nimport Sidebar from '@components/sidebar'\r\n\r\n// ** Utils\r\nimport { selectThemeColors } from '@utils'\r\n\r\n// ** Third Party Components\r\nimport Select from 'react-select'\r\nimport classnames from 'classnames'\r\nimport { useForm, Controller } from 'react-hook-form'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n    Button, Label, FormText, Form, Input, Modal,\r\n    CardBody,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n// ** Store & Actions\r\nimport { addCountry, getAllData, updateCountry } from '../store'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ROLES_CONSTANT } from '../../../../utility/constant'\r\nimport { toastError } from '../../../../utility/toastutill'\r\nimport FileUpload from '../../../../utility/FileUpload'\r\n\r\nconst AddModal = ({ open, toggleSidebar }) => {\r\n    // ** States\r\n    const store = useSelector(state => state.countries)\r\n\r\n    const [name, setname] = useState(\"\")\r\n    const [status, setstatus] = useState(true)\r\n    const [isUpdated, setisUpdated] = useState(false)\r\n    const [updateObj, setupdateObj] = useState({})\r\n    // ** Store Vars\r\n    const dispatch = useDispatch()\r\n    const checkIsValid = () => {\r\n\r\n        if (`${name}` === '') {\r\n            toastError(\"Please Fill name\")\r\n            return false\r\n        }\r\n\r\n\r\n        return true\r\n    }\r\n\r\n    // ** Function to handle form submit\r\n    const onSubmit = () => {\r\n        if (checkIsValid()) {\r\n            toggleSidebar()\r\n            if (isUpdated === true) {\r\n                dispatch(\r\n                    updateCountry({\r\n                        name,\r\n                        status,\r\n                        id: updateObj._id\r\n                    })\r\n                )\r\n            } else {\r\n                dispatch(\r\n                    addCountry({\r\n                        name,\r\n                        status\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSidebarClosed = () => {\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (store.selectedCountry !== null) {\r\n            const country = store.selectedCountry\r\n            setupdateObj(country)\r\n            setisUpdated(true)\r\n            setname(country.name)\r\n            setstatus(country.status)\r\n        } else {\r\n            setupdateObj({})\r\n            setisUpdated(false)\r\n            setname(\"\")\r\n        }\r\n    }, [store.selectedCountry])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={open}\r\n                onClosed={handleSidebarClosed}\r\n                toggle={toggleSidebar}\r\n                className='modal-dialog-centered modal-lg'\r\n            >\r\n                <ModalHeader className='bg-transparent' toggle={toggleSidebar}></ModalHeader>\r\n                <ModalBody className='px-3 pb-3'>\r\n                    <div className='text-center'>\r\n                        <h2>{isUpdated ? \"Update\" : \"Add\"} Country</h2>\r\n                    </div>\r\n\r\n                    <Form className=\"row\">\r\n                        <div className='mb-1 col-md-6'>\r\n                            <Label className='form-label' for='fullName'>\r\n                                Name <span className='text-danger'>*</span>\r\n                            </Label>\r\n                            <Input className='form-control' value={name} onChange={(e) => setname(e.target.value)} />\r\n                        </div>\r\n                        {/* <div className='mb-1 col-md-6'>\r\n                            <Label className='form-label'>\r\n                                Image \r\n                            </Label>\r\n                            <FileUpload onFileChange={(val) => setimage(val)} />\r\n                        </div> */}\r\n\r\n                        <div className=' mb-1 col-md-6'>\r\n                            <Label className='form-label' for='phone'>\r\n                                Status <span className='text-danger'>*</span>\r\n                            </Label>\r\n                            <div className='demo-inline-spacing'>\r\n                                <div className='form-check'>\r\n                                    <Input type='radio' id='ex1-active' name='ex1' checked={status === true} onChange={() => setstatus(true)} />\r\n                                    <Label className='form-check-label' for='ex1-active'>\r\n                                        Active\r\n                                    </Label>\r\n                                </div>\r\n                                <div className='form-check'>\r\n                                    <Input type='radio' name='ex1' id='ex1-inactive' checked={status === false} onChange={() => setstatus(false)} />\r\n                                    <Label className='form-check-label' for='ex1-inactive'>\r\n                                        InActive\r\n                                    </Label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className='mb-1 col-md-12'>\r\n                            <Button type='button' className='me-1' color='primary' onClick={() => { onSubmit() }} >\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </ModalBody>\r\n            </Modal>\r\n        </>\r\n        // <Sidebar\r\n        //   size='lg'\r\n        //   open={open}\r\n        //   title='New User'\r\n        //   headerClassName='mb-1'\r\n        //   contentClassName='pt-0'\r\n        //   toggleSidebar={toggleSidebar}\r\n        //   onClosed={handleSidebarClosed}\r\n        // >\r\n        //   <Form onSubmit={handleSubmit(onSubmit)}>\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='fullName'>\r\n        //         Full Name <span className='text-danger'>*</span>\r\n        //       </Label>\r\n        //       <Controller\r\n        //         name='fullName'\r\n        //         control={control}\r\n        //         render={({ field }) => (\r\n        //           <Input id='fullName' placeholder='John Doe' invalid={errors.fullName && true} {...field} />\r\n        //         )}\r\n        //       />\r\n        //     </div>\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='lastName'>\r\n        //         lastName <span className='text-danger'>*</span>\r\n        //       </Label>\r\n        //       <Controller\r\n        //         name='lastName'\r\n        //         control={control}\r\n        //         render={({ field }) => (\r\n        //           <Input id='lastName' placeholder='johnDoe99' invalid={errors.lastName && true} {...field} />\r\n        //         )}\r\n        //       />\r\n        //     </div>\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='userEmail'>\r\n        //         Email <span className='text-danger'>*</span>\r\n        //       </Label>\r\n        //       <Controller\r\n        //         name='email'\r\n        //         control={control}\r\n        //         render={({ field }) => (\r\n        //           <Input\r\n        //             type='email'\r\n        //             id='userEmail'\r\n        //             placeholder='john.doe@example.com'\r\n        //             invalid={errors.email && true}\r\n        //             {...field}\r\n        //           />\r\n        //         )}\r\n        //       />\r\n        //       <FormText color='muted'>You can use letters, numbers & periods</FormText>\r\n        //     </div>\r\n\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='phone'>\r\n        //         phone <span className='text-danger'>*</span>\r\n        //       </Label>\r\n        //       <Controller\r\n        //         name='phone'\r\n        //         control={control}\r\n        //         render={({ field }) => (\r\n        //           <Input id='phone' placeholder='(397) 294-5153' invalid={errors.phone && true} {...field} />\r\n        //         )}\r\n        //       />\r\n        //     </div>\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='company'>\r\n        //         Company <span className='text-danger'>*</span>\r\n        //       </Label>\r\n        //       <Controller\r\n        //         name='company'\r\n        //         control={control}\r\n        //         render={({ field }) => (\r\n        //           <Input id='company' placeholder='Company Pvt Ltd' invalid={errors.company && true} {...field} />\r\n        //         )}\r\n        //       />\r\n        //     </div>\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='country'>\r\n        //         Country <span className='text-danger'>*</span>\r\n        //       </Label>\r\n        //       <Controller\r\n        //         name='country'\r\n        //         control={control}\r\n        //         render={({ field }) => (\r\n        //           // <Input id='country' placeholder='Australia' invalid={errors.country && true} {...field} />\r\n        //           <Select\r\n        //             isClearable={false}\r\n        //             classNamePrefix='select'\r\n        //             options={countryOptions}\r\n        //             theme={selectThemeColors}\r\n        //             className={classnames('react-select', { 'is-invalid': data !== null && data.country === null })}\r\n        //             {...field}\r\n        //           />\r\n        //         )}\r\n        //       />\r\n        //     </div>\r\n        //     <div className='mb-1'>\r\n        //       <Label className='form-label' for='user-role'>\r\n        //         User Role\r\n        //       </Label>\r\n        //       <Input type='select' id='user-role' name='user-role' value={role} onChange={e => setRole(e.target.value)}>\r\n        //         <option value='subscriber'>Subscriber</option>\r\n        //         <option value='editor'>Editor</option>\r\n        //         <option value='maintainer'>Maintainer</option>\r\n        //         <option value='author'>Author</option>\r\n        //         <option value='admin'>Admin</option>\r\n        //       </Input>\r\n        //     </div>\r\n        //     <div className='mb-1' value={plan} onChange={e => setPlan(e.target.value)}>\r\n        //       <Label className='form-label' for='select-plan'>\r\n        //         Select Plan\r\n        //       </Label>\r\n        //       <Input type='select' id='select-plan' name='select-plan'>\r\n        //         <option value='basic'>Basic</option>\r\n        //         <option value='enterprise'>Enterprise</option>\r\n        //         <option value='company'>Company</option>\r\n        //         <option value='team'>Team</option>\r\n        //       </Input>\r\n        //     </div>\r\n        //     <Button type='submit' className='me-1' color='primary'>\r\n        //       Submit\r\n        //     </Button>\r\n        //     <Button type='reset' color='secondary' outline onClick={toggleSidebar}>\r\n        //       Cancel\r\n        //     </Button>\r\n        //   </Form>\r\n        // </Sidebar>\r\n    )\r\n}\r\n\r\nexport default AddModal\r\n","// ** React Imports\r\nimport { Fragment, useEffect, useState } from 'react'\r\n\r\n// ** Table Columns\r\nimport { columns } from './columns'\r\n\r\n// ** Store & Actions\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCountry } from '../store'\r\n\r\n// ** Third Party Components\r\nimport DataTable from 'react-data-table-component'\r\nimport { ChevronDown } from 'react-feather'\r\nimport ReactPaginate from 'react-paginate'\r\n\r\n// ** Utils\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Button, Card, Col, Input, Row\r\n} from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\r\nimport AddModal from './AddModal'\r\n\r\n\r\nconst UsersList = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const countries = useSelector(state => state.countries)\r\n  const country = useSelector(state => state.countries.country)\r\n\r\n  // ** States\r\n  const [sort, setSort] = useState('desc')\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sortColumn, setSortColumn] = useState('name')\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  // const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\r\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\r\n  const [rolesOptions, setrolesOptions] = useState([])\r\n\r\n  // ** Function to toggle sidebar\r\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\r\n\r\n  // ** Get data on mount\r\n  useEffect(() => {\r\n    dispatch(getCountry({\r\n      sort,\r\n      sortColumn,\r\n      q: searchTerm,\r\n      perPage: rowsPerPage,\r\n      page: currentPage,\r\n      status: currentStatus.value\r\n    }))\r\n  }, [])\r\n  useEffect(() => {\r\n    // dispatch(\r\n    //   getCountry({\r\n    //     sort,\r\n    //     sortColumn,\r\n    //     q: searchTerm,\r\n    //     page: currentPage,\r\n    //     perPage: rowsPerPage,\r\n    //     status: currentStatus.value\r\n    //     // currentPlan: currentPlan.value\r\n    //   })\r\n    // )\r\n    // ** Set Roles\r\n\r\n  }, [dispatch, sort, sortColumn, currentPage])\r\n\r\n\r\n  const statusOptions = [\r\n    { value: '', label: 'Select Status', number: 0 },\r\n    { value: 'active', label: 'Active', number: true },\r\n    { value: 'inactive', label: 'Inactive', number: false }\r\n  ]\r\n\r\n  // ** Function in get data on page change\r\n  const handlePagination = page => {\r\n    dispatch(\r\n      getCountry({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: rowsPerPage,\r\n        page: page.selected + 1,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  // ** Function in get data on rows per page\r\n  const handlePerPage = e => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    setCurrentPage(1)\r\n\r\n    dispatch(\r\n      getCountry({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: value,\r\n        page: 1,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  // ** Function in get data on search query change\r\n  const handleFilter = val => {\r\n    setSearchTerm(val)\r\n    dispatch(\r\n      getCountry({\r\n        sort,\r\n        q: val,\r\n        sortColumn,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n  }\r\n\r\n  // ** Custom Pagination\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(countries.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={''}\r\n        nextLabel={''}\r\n        pageCount={count || 1}\r\n        activeClassName='active'\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={page => handlePagination(page)}\r\n        pageClassName={'page-item'}\r\n        nextLinkClassName={'page-link'}\r\n        nextClassName={'page-item next'}\r\n        previousClassName={'page-item prev'}\r\n        previousLinkClassName={'page-link'}\r\n        pageLinkClassName={'page-link'}\r\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\r\n      />\r\n    )\r\n  }\r\n\r\n  // ** Table data to render\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      status: currentStatus.value,\r\n      q: searchTerm\r\n    }\r\n\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    console.log(countries, \"countriesdsdds\")\r\n    if (countries.countries.length > 0) {\r\n      return countries.countries\r\n    } else if (!countries || (countries.countries.length === 0 && isFiltered)) {\r\n      return []\r\n    } else {\r\n      return countries.countries.slice(0, rowsPerPage)\r\n    }\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSort(sortDirection)\r\n    setSortColumn(column.sortField)\r\n    dispatch(\r\n      getCountry({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        status: currentStatus.value\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (countries.selectedCountry !== null) {\r\n      toggleSidebar()\r\n    }\r\n\r\n  }, [countries.selectedCountry])\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>Country List</h3>\r\n\r\n      {/* <Card>\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>Filters</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col md='4'>\r\n              <Label for='role-select'>Role</Label>\r\n              <Select\r\n                isClearable={false}\r\n                options={rolesOptions}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                theme={selectThemeColors}\r\n                onChange={data => {\r\n                  dispatch(\r\n                    getCountry({\r\n                      sort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      role: data.value,\r\n                      page: currentPage,\r\n                      perPage: rowsPerPage,\r\n                      status: currentStatus.value\r\n                    })\r\n                  )\r\n                }}\r\n              />\r\n            </Col>\r\n            {/* <Col className='my-md-0 my-1' md='4'>\r\n              <Label for='plan-select'>Plan</Label>\r\n              <Select\r\n                theme={selectThemeColors}\r\n                isClearable={false}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                options={planOptions}\r\n                value={currentPlan}\r\n                onChange={data => {\r\n                  setCurrentPlan(data)\r\n                  dispatch(\r\n                    getCountry({\r\n                      sort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      page: currentPage,\r\n                      perPage: rowsPerPage,\r\n                      currentPlan: data.value,\r\n                      status: currentStatus.value\r\n                    })\r\n                  )\r\n                }}\r\n              />\r\n            </Col> \r\n            <Col md='4'>\r\n              <Label for='status-select'>Status</Label>\r\n              <Select\r\n                theme={selectThemeColors}\r\n                isClearable={false}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                options={statusOptions}\r\n                value={currentStatus}\r\n                onChange={data => {\r\n                  setCurrentStatus(data)\r\n                  dispatch(\r\n                    getCountry({\r\nsort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      page: currentPage,\r\n                      status: data.value,\r\n                      perPage: rowsPerPage,\r\n                    })\r\n                    )\r\n                  }}\r\n                  />\r\n                  </Col>\r\n                  </Row>\r\n                  </CardBody>\r\n                </Card> */}\r\n\r\n      <Card className='overflow-hidden px-3'>\r\n        <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\r\n          <Row>\r\n            <Col xl='6' className='d-flex align-items-center p-0'>\r\n              <div className='d-flex align-items-center w-100'>\r\n                <label htmlFor='rows-per-page'>Show</label>\r\n                <Input\r\n                  className='mx-50'\r\n                  type='select'\r\n                  id='rows-per-page'\r\n                  value={rowsPerPage}\r\n                  onChange={handlePerPage}\r\n                  style={{ width: '5rem' }}\r\n                >\r\n                  <option value='10'>10</option>\r\n                  <option value='25'>25</option>\r\n                  <option value='50'>50</option>\r\n                  <option value='100'>100</option>\r\n                  <option value='500'>500</option>\r\n                </Input>\r\n                <label htmlFor='rows-per-page'>Entries</label>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              xl='6'\r\n              className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\r\n            >\r\n              <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\r\n                <label className='mb-0' htmlFor='search-invoice'>\r\n                  Search:\r\n                </label>\r\n                <Input\r\n                  id='search-invoice'\r\n                  className='ms-50 w-100'\r\n                  type='text'\r\n                  value={searchTerm}\r\n                  onChange={e => handleFilter(e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex align-items-center table-header-actions'>\r\n\r\n                <Button className='add-new-user' color='primary' onClick={toggleSidebar}>\r\n                  Add New\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Card>\r\n      <Card className='overflow-hidden'>\r\n\r\n\r\n        <div className='react-dataTable'>\r\n          <DataTable\r\n            noHeader\r\n            subHeader\r\n            sortServer\r\n            pagination\r\n            responsive\r\n            paginationServer\r\n            columns={columns}\r\n            onSort={handleSort}\r\n            sortIcon={<ChevronDown />}\r\n            className='react-dataTable'\r\n            paginationComponent={CustomPagination}\r\n            data={country}\r\n          // subHeaderComponent={\r\n          //   <CustomHeader\r\n          //     countries={countries}\r\n          //     searchTerm={searchTerm}\r\n          //     rowsPerPage={rowsPerPage}\r\n          //     handleFilter={handleFilter}\r\n          //     handlePerPage={handlePerPage}\r\n          //     toggleSidebar={toggleSidebar}\r\n          //   />\r\n          // }\r\n          />\r\n        </div>\r\n      </Card>\r\n\r\n      <AddModal open={sidebarOpen} toggleSidebar={toggleSidebar} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n","// ** User List Component\r\nimport Table from './Table'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\r\n\r\n// ** Icons Imports\r\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-users.scss'\r\n\r\nconst CountryList = () => {\r\n  return (\r\n    <div className='app-user-list'>\r\n      {/* <Row>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='primary'\r\n            statTitle='Total Users'\r\n            icon={<User size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>21,459</h3>}\r\n          />\r\n        </Col>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='danger'\r\n            statTitle='Paid Users'\r\n            icon={<UserPlus size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>4,567</h3>}\r\n          />\r\n        </Col>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='success'\r\n            statTitle='Active Users'\r\n            icon={<UserCheck size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>19,860</h3>}\r\n          />\r\n        </Col>\r\n        <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='warning'\r\n            statTitle='Pending Users'\r\n            icon={<UserX size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>237</h3>}\r\n          />\r\n        </Col>\r\n      </Row> */}\r\n      <Table />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountryList\r\n"],"sourceRoot":""}