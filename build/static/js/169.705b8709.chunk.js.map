{"version":3,"sources":["views/location/Country/list/columns.js","views/location/Country/list/AddModal.js","views/location/Country/list/Table.js","views/location/Country/list/index.js"],"names":["statusObj","pending","active","inactive","columns","name","sortable","sortField","cell","row","selector","status","className","color","pill","onClick","e","preventDefault","store","dispatch","getCountryById","_id","size","deleteCountry","AddModal","open","toggleSidebar","useSelector","state","countries","setname","useState","setstatus","isUpdated","setisUpdated","updateObj","setupdateObj","useDispatch","onSubmit","toastError","updateCountry","id","addCountry","useEffect","selectedCountry","country","isOpen","onClosed","toggle","for","value","onChange","target","type","checked","UsersList","sort","setSort","searchTerm","setSearchTerm","currentPage","setCurrentPage","sortColumn","setSortColumn","rowsPerPage","setRowsPerPage","sidebarOpen","setSidebarOpen","currentStatus","setCurrentStatus","label","number","rolesOptions","setrolesOptions","getCountry","q","perPage","page","xl","htmlFor","parseInt","currentTarget","style","width","handleFilter","val","noHeader","subHeader","sortServer","pagination","responsive","paginationServer","onSort","column","sortDirection","sortIcon","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","data","CountryList","Table"],"mappings":"0QAiBA,MAkDMA,EAAY,CAChBC,QAAS,gBACTC,OAAQ,gBACRC,SAAU,mBAGCC,EAAU,CACrB,CACEC,KAAM,OACNC,UAAU,EACVC,UAAW,OACXC,KAAMC,GAAOA,EAAIJ,MAEnB,CACEA,KAAM,SACNC,UAAU,EACVC,UAAW,SACXG,SAAUD,GAAOA,EAAIE,OACrBH,KAAMC,GACJ,cAAC,IAAK,CAACG,UAAU,kBAAkBC,MAAOb,GAAyB,IAAfS,EAAIE,OAAkB,SAAW,YAAaG,MAAI,YACrF,IAAfL,EAAIE,OAAkB,SAAW,cAIvC,CACEN,KAAM,UACNG,KAAMC,GACJ,qCACA,eAAC,IAAM,CAACI,MAAM,UAAWD,UAAU,SAASG,QAASC,IAC7CA,EAAEC,iBACFC,IAAMC,SAASC,YAAeX,EAAIY,KAAK,EACrC,UAAC,QAAK,cAAC,IAAI,CAACC,KAAM,QAC5B,eAAC,IAAM,CAACT,MAAM,SAASD,UAAU,cACnBG,QAASC,IACbA,EAAEC,iBACFC,IAAMC,SAASI,YAAcd,EAAIY,KAAK,EACtC,UACT,OAAI,cAAC,IAAM,CAACC,KAAM,a,kHCmLVE,MA5PE,IAA8B,IAA7B,KAAEC,EAAI,cAAEC,GAAe,EAErC,MAAMR,EAAQS,aAAYC,GAASA,EAAMC,aAElCxB,EAAMyB,GAAWC,mBAAS,KAC1BpB,EAAQqB,GAAaD,oBAAS,IAC9BE,EAAWC,GAAgBH,oBAAS,IACpCI,EAAWC,GAAgBL,mBAAS,CAAC,GAEtCZ,EAAWkB,cAaXC,EAAW,MAVK,KAAb,GAAEjC,MACHkC,YAAW,oBACJ,MAUPb,IAEIP,GADc,IAAdc,EAEIO,YAAc,CACVnC,OACAM,SACA8B,GAAIN,EAAUd,MAKlBqB,YAAW,CACPrC,OACAM,YAIhB,EAqBJ,OAfAgC,qBAAU,KACN,GAA8B,OAA1BzB,EAAM0B,gBAA0B,CAChC,MAAMC,EAAU3B,EAAM0B,gBACtBR,EAAaS,GACbX,GAAa,GACbJ,EAAQe,EAAQxC,MAChB2B,EAAUa,EAAQlC,OACtB,MACIyB,EAAa,CAAC,GACdF,GAAa,GACbJ,EAAQ,GACZ,GACD,CAACZ,EAAM0B,kBAIN,mCACI,eAAC,IAAK,CACFE,OAAQrB,EACRsB,SAtBgB,OAuBhBC,OAAQtB,EACRd,UAAU,iCAAgC,UAE1C,cAAC,IAAW,CAACA,UAAU,iBAAiBoC,OAAQtB,IAChD,eAAC,IAAS,CAACd,UAAU,YAAW,UAC5B,qBAAKA,UAAU,cAAa,SACxB,+BAAKqB,EAAY,SAAW,MAAM,gBAGtC,eAAC,IAAI,CAACrB,UAAU,MAAK,UACjB,sBAAKA,UAAU,gBAAe,UAC1B,eAAC,IAAK,CAACA,UAAU,aAAaqC,IAAI,WAAU,UAAC,QACpC,sBAAMrC,UAAU,cAAa,SAAC,SAEvC,cAAC,IAAK,CAACA,UAAU,eAAesC,MAAO7C,EAAM8C,SAAWnC,GAAMc,EAAQd,EAAEoC,OAAOF,YASnF,sBAAKtC,UAAU,iBAAgB,UAC3B,eAAC,IAAK,CAACA,UAAU,aAAaqC,IAAI,QAAO,UAAC,UAC/B,sBAAMrC,UAAU,cAAa,SAAC,SAEzC,sBAAKA,UAAU,sBAAqB,UAChC,sBAAKA,UAAU,aAAY,UACvB,cAAC,IAAK,CAACyC,KAAK,QAAQZ,GAAG,aAAapC,KAAK,MAAMiD,SAAoB,IAAX3C,EAAiBwC,SAAU,IAAMnB,GAAU,KACnG,cAAC,IAAK,CAACpB,UAAU,mBAAmBqC,IAAI,aAAY,SAAC,cAIzD,sBAAKrC,UAAU,aAAY,UACvB,cAAC,IAAK,CAACyC,KAAK,QAAQhD,KAAK,MAAMoC,GAAG,eAAea,SAAoB,IAAX3C,EAAkBwC,SAAU,IAAMnB,GAAU,KACtG,cAAC,IAAK,CAACpB,UAAU,mBAAmBqC,IAAI,eAAc,SAAC,sBAQnE,qBAAKrC,UAAU,iBAAgB,SAC3B,cAAC,IAAM,CAACyC,KAAK,SAASzC,UAAU,OAAOC,MAAM,UAAUE,QAAS,KAAQuB,GAAU,EAAG,SAAE,uBAwI3G,ECyFOiB,MApVG,KAEhB,MAAMpC,EAAWkB,cACXR,EAAYF,aAAYC,GAASA,EAAMC,YACvCgB,EAAUlB,aAAYC,GAASA,EAAMC,UAAUgB,WAG9CW,EAAMC,GAAW1B,mBAAS,SAC1B2B,EAAYC,GAAiB5B,mBAAS,KACtC6B,EAAaC,GAAkB9B,mBAAS,IACxC+B,EAAYC,GAAiBhC,mBAAS,SACtCiC,EAAaC,GAAkBlC,mBAAS,KACxCmC,EAAaC,GAAkBpC,oBAAS,IAExCqC,EAAeC,GAAoBtC,mBAAS,CAAEmB,MAAO,GAAIoB,MAAO,gBAAiBC,OAAQ,KACzFC,EAAcC,GAAmB1C,mBAAS,IAG3CL,EAAgB,IAAMyC,GAAgBD,GAG5CvB,qBAAU,KACRxB,EAASuD,YAAW,CAClBlB,OACAM,aACAa,EAAGjB,EACHkB,QAASZ,EACTa,KAAMjB,EACNjD,OAAQyD,EAAclB,QACrB,GACF,IACHP,qBAAU,QAcP,CAACxB,EAAUqC,EAAMM,EAAYF,IA2HhC,OAPAjB,qBAAU,KAC0B,OAA9Bd,EAAUe,iBACZlB,GACF,GAEC,CAACG,EAAUe,kBAGZ,eAAC,WAAQ,WACP,6BAAI,iBAoFJ,cAAC,IAAI,CAAChC,UAAU,uBAAsB,SACpC,qBAAKA,UAAU,wDAAuD,SACpE,eAAC,KAAG,WACF,cAAC,IAAG,CAACkE,GAAG,IAAIlE,UAAU,gCAA+B,SACnD,sBAAKA,UAAU,kCAAiC,UAC9C,uBAAOmE,QAAQ,gBAAe,SAAC,SAC/B,eAAC,IAAK,CACJnE,UAAU,QACVyC,KAAK,SACLZ,GAAG,gBACHS,MAAOc,EACPb,SAnMMnC,IACpB,MAAMkC,EAAQ8B,SAAShE,EAAEiE,cAAc/B,OACvCW,EAAe,GAEf1C,EACEuD,YAAW,CACTlB,OACAM,aACAa,EAAGjB,EACHkB,QAAS1B,EACT2B,KAAM,EACNlE,OAAQyD,EAAclB,SAG1Be,EAAef,EAAM,EAsLPgC,MAAO,CAAEC,MAAO,QAAS,UAEzB,wBAAQjC,MAAM,KAAI,SAAC,OACnB,wBAAQA,MAAM,KAAI,SAAC,OACnB,wBAAQA,MAAM,KAAI,SAAC,OACnB,wBAAQA,MAAM,MAAK,SAAC,QACpB,wBAAQA,MAAM,MAAK,SAAC,WAEtB,uBAAO6B,QAAQ,gBAAe,SAAC,iBAGnC,eAAC,IAAG,CACFD,GAAG,IACHlE,UAAU,sJAAqJ,UAE/J,sBAAKA,UAAU,8CAA6C,UAC1D,uBAAOA,UAAU,OAAOmE,QAAQ,iBAAgB,SAAC,YAGjD,cAAC,IAAK,CACJtC,GAAG,iBACH7B,UAAU,cACVyC,KAAK,OACLH,MAAOQ,EACPP,SAAUnC,IAAKoE,OA1MVC,EA0MuBrE,EAAEoC,OAAOF,MAzMnDS,EAAc0B,QACdlE,EACEuD,YAAW,CACTlB,OACAmB,EAAGU,EACHvB,aACAe,KAAMjB,EACNgB,QAASZ,EACTrD,OAAQyD,EAAclB,SATPmC,KA0MuC,OAIhD,qBAAKzE,UAAU,iDAAgD,SAE7D,cAAC,IAAM,CAACA,UAAU,eAAeC,MAAM,UAAUE,QAASW,EAAc,SAAC,wBAQnF,cAAC,IAAI,CAACd,UAAU,kBAAiB,SAG/B,qBAAKA,UAAU,kBAAiB,SAC9B,cAAC,IAAS,CACR0E,UAAQ,EACRC,WAAS,EACTC,YAAU,EACVC,YAAU,EACVC,YAAU,EACVC,kBAAgB,EAChBvF,QAASA,EACTwF,OA3KS,CAACC,EAAQC,KAC1BrC,EAAQqC,GACR/B,EAAc8B,EAAOtF,WACrBY,EACEuD,YAAW,CACTlB,OACAM,aACAa,EAAGjB,EACHmB,KAAMjB,EACNgB,QAASZ,EACTrD,OAAQyD,EAAclB,QAEzB,EAgKO6C,SAAU,cAAC,IAAW,IACtBnF,UAAU,kBACVoF,oBAxNe,KACvB,MAAMC,EAAQC,OAAOC,KAAKC,KAAKvE,EAAUwE,MAAQrC,IAEjD,OACE,cAAC,IAAa,CACZsC,cAAe,GACfC,UAAW,GACXC,UAAWP,GAAS,EACpBQ,gBAAgB,SAChBC,UAA2B,IAAhB9C,EAAoBA,EAAc,EAAI,EACjD+C,aAAc9B,GA1DKA,KACvB1D,EACEuD,YAAW,CACTlB,OACAM,aACAa,EAAGjB,EACHkB,QAASZ,EACTa,KAAMA,EAAK+B,SAAW,EACtBjG,OAAQyD,EAAclB,SAG1BW,EAAegB,EAAK+B,SAAW,EAAE,EA+CPC,CAAiBhC,GACvCiC,cAAe,YACfC,kBAAmB,YACnBC,cAAe,iBACfC,kBAAmB,iBACnBC,sBAAuB,YACvBC,kBAAmB,YACnBC,mBAAoB,2DACpB,EAuMIC,KAAMxE,QAeZ,cAAC,EAAQ,CAACpB,KAAMyC,EAAaxC,cAAeA,MACnC,E,cCnTA4F,UA1CK,IAEhB,qBAAK1G,UAAU,gBAAe,SAmC5B,cAAC2G,EAAK,K","file":"static/js/169.705b8709.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { store } from '@store/store'\nimport { getCountry, deleteCountry, getCountryById } from '../store'\n\n// ** Icons Imports\nimport { Slack, User, Settings, Database, Edit2, MoreVertical, FileText, Trash2, Archive, PenTool, Edit } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from 'reactstrap'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n  if (row.avatar.length) {\n    return <Avatar className='me-1' img={row.avatar} width='32' height='32' />\n  } else {\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={row.avatarColor || 'light-primary'}\n        content={row.fullName || 'John Doe'}\n      />\n    )\n  }\n}\n\n// ** Renders Role Columns\nconst renderRole = row => {\n  const roleObj = {\n    subscriber: {\n      class: 'text-primary',\n      icon: User\n    },\n    maintainer: {\n      class: 'text-success',\n      icon: Database\n    },\n    editor: {\n      class: 'text-info',\n      icon: Edit2\n    },\n    author: {\n      class: 'text-warning',\n      icon: Settings\n    },\n    admin: {\n      class: 'text-danger',\n      icon: Slack\n    }\n  }\n\n  const Icon = roleObj[row.role] ? roleObj[row.role].icon : Edit2\n\n  return (\n    <span className='text-truncate text-capitalize align-middle'>\n      <Icon size={18} className={`${roleObj[row.role] ? roleObj[row.role].class : ''} me-50`} />\n      {row.role}\n    </span>\n  )\n}\n\nconst statusObj = {\n  pending: 'light-warning',\n  active: 'light-success',\n  inactive: 'light-secondary'\n}\n\nexport const columns = [\n  {\n    name: 'Name',\n    sortable: true,\n    sortField: 'name',\n    cell: row => row.name\n  },\n  {\n    name: 'Status',\n    sortable: true,\n    sortField: 'status',\n    selector: row => row.status,\n    cell: row => (\n      <Badge className='text-capitalize' color={statusObj[row.status === true ? 'active' : 'inactive']} pill>\n       {row.status === true ? 'Active' : 'Inactive'}\n      </Badge>\n    )\n  },\n  {\n    name: 'Actions',\n    cell: row => (\n      <>\n      <Button color='primary'  className='btn-sm' onClick={e => { \n              e.preventDefault() \n              store.dispatch(getCountryById(row._id))\n              }}>     <Edit size={14} /></Button>\n      <Button color='danger' className='mx-2 btn-sm'  \n                    onClick={e => {\n                e.preventDefault()\n                store.dispatch(deleteCountry(row._id))\n              }}\n      >    <Trash2 size={14}  /></Button>\n      </>\n      // <div className='column-action'>\n    \n      //   <UncontrolledDropdown>\n      //     <DropdownToggle tag='div' className='btn btn-sm'>\n      //       <MoreVertical size={14} className='cursor-pointer' />\n      //     </DropdownToggle>\n      //     <DropdownMenu>\n      //       <DropdownItem tag='a' href='/' className='w-100' \n      //         >\n      //         <Archive size={14} className='me-50' />\n      //         <span className='align-middle'>Edit</span>\n      //       </DropdownItem>\n      //       <DropdownItem\n      //         tag='a'\n      //         href='/'\n      //         className='w-100'\n      //         onClick={e => {\n      //           e.preventDefault()\n      //           store.dispatch(deleteCountry(row._id))\n      //         }}\n      //       >\n      //         <Trash2 size={14} className='me-50' />\n      //         <span className='align-middle'>Delete</span>\n      //       </DropdownItem>\n      //     </DropdownMenu>\n      //   </UncontrolledDropdown>\n      // </div>\n    )\n  }\n]\n","// ** React Import\nimport { useEffect, useState } from 'react'\n\n// ** Custom Components\nimport Sidebar from '@components/sidebar'\n\n// ** Utils\nimport { selectThemeColors } from '@utils'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport classnames from 'classnames'\nimport { useForm, Controller } from 'react-hook-form'\n\n// ** Reactstrap Imports\nimport {\n    Button, Label, FormText, Form, Input, Modal,\n    CardBody,\n    ModalBody,\n    ModalHeader,\n    Row,\n    Col\n} from 'reactstrap'\n\n// ** Store & Actions\nimport { addCountry, getAllData, updateCountry } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ROLES_CONSTANT } from '../../../../utility/constant'\nimport { toastError } from '../../../../utility/toastutill'\nimport FileUpload from '../../../../utility/FileUpload'\n\nconst AddModal = ({ open, toggleSidebar }) => {\n    // ** States\n    const store = useSelector(state => state.countries)\n\n    const [name, setname] = useState(\"\")\n    const [status, setstatus] = useState(true)\n    const [isUpdated, setisUpdated] = useState(false)\n    const [updateObj, setupdateObj] = useState({})\n    // ** Store Vars\n    const dispatch = useDispatch()\n    const checkIsValid = () => {\n\n        if (`${name}` === '') {\n            toastError(\"Please Fill name\")\n            return false\n        }\n\n\n        return true\n    }\n\n    // ** Function to handle form submit\n    const onSubmit = () => {\n        if (checkIsValid()) {\n            toggleSidebar()\n            if (isUpdated === true) {\n                dispatch(\n                    updateCountry({\n                        name,\n                        status,\n                        id: updateObj._id\n                    })\n                )\n            } else {\n                dispatch(\n                    addCountry({\n                        name,\n                        status\n                    })\n                )\n            }\n        }\n    }\n\n    const handleSidebarClosed = () => {\n    }\n\n    useEffect(() => {\n        if (store.selectedCountry !== null) {\n            const country = store.selectedCountry\n            setupdateObj(country)\n            setisUpdated(true)\n            setname(country.name)\n            setstatus(country.status)\n        } else {\n            setupdateObj({})\n            setisUpdated(false)\n            setname(\"\")\n        }\n    }, [store.selectedCountry])\n\n\n    return (\n        <>\n            <Modal\n                isOpen={open}\n                onClosed={handleSidebarClosed}\n                toggle={toggleSidebar}\n                className='modal-dialog-centered modal-lg'\n            >\n                <ModalHeader className='bg-transparent' toggle={toggleSidebar}></ModalHeader>\n                <ModalBody className='px-3 pb-3'>\n                    <div className='text-center'>\n                        <h2>{isUpdated ? \"Update\" : \"Add\"} Country</h2>\n                    </div>\n\n                    <Form className=\"row\">\n                        <div className='mb-1 col-md-6'>\n                            <Label className='form-label' for='fullName'>\n                                Name <span className='text-danger'>*</span>\n                            </Label>\n                            <Input className='form-control' value={name} onChange={(e) => setname(e.target.value)} />\n                        </div>\n                        {/* <div className='mb-1 col-md-6'>\n                            <Label className='form-label'>\n                                Image \n                            </Label>\n                            <FileUpload onFileChange={(val) => setimage(val)} />\n                        </div> */}\n\n                        <div className=' mb-1 col-md-6'>\n                            <Label className='form-label' for='phone'>\n                                Status <span className='text-danger'>*</span>\n                            </Label>\n                            <div className='demo-inline-spacing'>\n                                <div className='form-check'>\n                                    <Input type='radio' id='ex1-active' name='ex1' checked={status === true} onChange={() => setstatus(true)} />\n                                    <Label className='form-check-label' for='ex1-active'>\n                                        Active\n                                    </Label>\n                                </div>\n                                <div className='form-check'>\n                                    <Input type='radio' name='ex1' id='ex1-inactive' checked={status === false} onChange={() => setstatus(false)} />\n                                    <Label className='form-check-label' for='ex1-inactive'>\n                                        InActive\n                                    </Label>\n                                </div>\n                            </div>\n                        </div>\n\n\n                        <div className='mb-1 col-md-12'>\n                            <Button type='button' className='me-1' color='primary' onClick={() => { onSubmit() }} >\n                                Submit\n                            </Button>\n                        </div>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </>\n        // <Sidebar\n        //   size='lg'\n        //   open={open}\n        //   title='New User'\n        //   headerClassName='mb-1'\n        //   contentClassName='pt-0'\n        //   toggleSidebar={toggleSidebar}\n        //   onClosed={handleSidebarClosed}\n        // >\n        //   <Form onSubmit={handleSubmit(onSubmit)}>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='fullName'>\n        //         Full Name <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='fullName'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='fullName' placeholder='John Doe' invalid={errors.fullName && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='lastName'>\n        //         lastName <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='lastName'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='lastName' placeholder='johnDoe99' invalid={errors.lastName && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='userEmail'>\n        //         Email <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='email'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input\n        //             type='email'\n        //             id='userEmail'\n        //             placeholder='john.doe@example.com'\n        //             invalid={errors.email && true}\n        //             {...field}\n        //           />\n        //         )}\n        //       />\n        //       <FormText color='muted'>You can use letters, numbers & periods</FormText>\n        //     </div>\n\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='phone'>\n        //         phone <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='phone'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='phone' placeholder='(397) 294-5153' invalid={errors.phone && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='company'>\n        //         Company <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='company'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='company' placeholder='Company Pvt Ltd' invalid={errors.company && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='country'>\n        //         Country <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='country'\n        //         control={control}\n        //         render={({ field }) => (\n        //           // <Input id='country' placeholder='Australia' invalid={errors.country && true} {...field} />\n        //           <Select\n        //             isClearable={false}\n        //             classNamePrefix='select'\n        //             options={countryOptions}\n        //             theme={selectThemeColors}\n        //             className={classnames('react-select', { 'is-invalid': data !== null && data.country === null })}\n        //             {...field}\n        //           />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='user-role'>\n        //         User Role\n        //       </Label>\n        //       <Input type='select' id='user-role' name='user-role' value={role} onChange={e => setRole(e.target.value)}>\n        //         <option value='subscriber'>Subscriber</option>\n        //         <option value='editor'>Editor</option>\n        //         <option value='maintainer'>Maintainer</option>\n        //         <option value='author'>Author</option>\n        //         <option value='admin'>Admin</option>\n        //       </Input>\n        //     </div>\n        //     <div className='mb-1' value={plan} onChange={e => setPlan(e.target.value)}>\n        //       <Label className='form-label' for='select-plan'>\n        //         Select Plan\n        //       </Label>\n        //       <Input type='select' id='select-plan' name='select-plan'>\n        //         <option value='basic'>Basic</option>\n        //         <option value='enterprise'>Enterprise</option>\n        //         <option value='company'>Company</option>\n        //         <option value='team'>Team</option>\n        //       </Input>\n        //     </div>\n        //     <Button type='submit' className='me-1' color='primary'>\n        //       Submit\n        //     </Button>\n        //     <Button type='reset' color='secondary' outline onClick={toggleSidebar}>\n        //       Cancel\n        //     </Button>\n        //   </Form>\n        // </Sidebar>\n    )\n}\n\nexport default AddModal\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Table Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getCountry } from '../store'\n\n// ** Third Party Components\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown } from 'react-feather'\nimport ReactPaginate from 'react-paginate'\n\n// ** Utils\n\n// ** Reactstrap Imports\nimport {\n  Button, Card, Col, Input, Row\n} from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport AddModal from './AddModal'\n\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const countries = useSelector(state => state.countries)\n  const country = useSelector(state => state.countries.country)\n\n  // ** States\n  const [sort, setSort] = useState('desc')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortColumn, setSortColumn] = useState('name')\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  // const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n  const [rolesOptions, setrolesOptions] = useState([])\n\n  // ** Function to toggle sidebar\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getCountry({\n      sort,\n      sortColumn,\n      q: searchTerm,\n      perPage: rowsPerPage,\n      page: currentPage,\n      status: currentStatus.value\n    }))\n  }, [])\n  useEffect(() => {\n    // dispatch(\n    //   getCountry({\n    //     sort,\n    //     sortColumn,\n    //     q: searchTerm,\n    //     page: currentPage,\n    //     perPage: rowsPerPage,\n    //     status: currentStatus.value\n    //     // currentPlan: currentPlan.value\n    //   })\n    // )\n    // ** Set Roles\n\n  }, [dispatch, sort, sortColumn, currentPage])\n\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'active', label: 'Active', number: true },\n    { value: 'inactive', label: 'Inactive', number: false }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getCountry({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: rowsPerPage,\n        page: page.selected + 1,\n        status: currentStatus.value\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    setCurrentPage(1)\n\n    dispatch(\n      getCountry({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: value,\n        page: 1,\n        status: currentStatus.value\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getCountry({\n        sort,\n        q: val,\n        sortColumn,\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(countries.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      status: currentStatus.value,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    console.log(countries, \"countriesdsdds\")\n    if (countries.countries.length > 0) {\n      return countries.countries\n    } else if (!countries || (countries.countries.length === 0 && isFiltered)) {\n      return []\n    } else {\n      return countries.countries.slice(0, rowsPerPage)\n    }\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSort(sortDirection)\n    setSortColumn(column.sortField)\n    dispatch(\n      getCountry({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value\n      })\n    )\n  }\n\n\n  useEffect(() => {\n    if (countries.selectedCountry !== null) {\n      toggleSidebar()\n    }\n\n  }, [countries.selectedCountry])\n\n  return (\n    <Fragment>\n      <h3>Country List</h3>\n\n      {/* <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Filters</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md='4'>\n              <Label for='role-select'>Role</Label>\n              <Select\n                isClearable={false}\n                options={rolesOptions}\n                className='react-select'\n                classNamePrefix='select'\n                theme={selectThemeColors}\n                onChange={data => {\n                  dispatch(\n                    getCountry({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      role: data.value,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      status: currentStatus.value\n                    })\n                  )\n                }}\n              />\n            </Col>\n            {/* <Col className='my-md-0 my-1' md='4'>\n              <Label for='plan-select'>Plan</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={planOptions}\n                value={currentPlan}\n                onChange={data => {\n                  setCurrentPlan(data)\n                  dispatch(\n                    getCountry({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      currentPlan: data.value,\n                      status: currentStatus.value\n                    })\n                  )\n                }}\n              />\n            </Col> \n            <Col md='4'>\n              <Label for='status-select'>Status</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={statusOptions}\n                value={currentStatus}\n                onChange={data => {\n                  setCurrentStatus(data)\n                  dispatch(\n                    getCountry({\nsort,\n                      sortColumn,\n                      q: searchTerm,\n                      page: currentPage,\n                      status: data.value,\n                      perPage: rowsPerPage,\n                    })\n                    )\n                  }}\n                  />\n                  </Col>\n                  </Row>\n                  </CardBody>\n                </Card> */}\n\n      <Card className='overflow-hidden px-3'>\n        <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\n          <Row>\n            <Col xl='6' className='d-flex align-items-center p-0'>\n              <div className='d-flex align-items-center w-100'>\n                <label htmlFor='rows-per-page'>Show</label>\n                <Input\n                  className='mx-50'\n                  type='select'\n                  id='rows-per-page'\n                  value={rowsPerPage}\n                  onChange={handlePerPage}\n                  style={{ width: '5rem' }}\n                >\n                  <option value='10'>10</option>\n                  <option value='25'>25</option>\n                  <option value='50'>50</option>\n                  <option value='100'>100</option>\n                  <option value='500'>500</option>\n                </Input>\n                <label htmlFor='rows-per-page'>Entries</label>\n              </div>\n            </Col>\n            <Col\n              xl='6'\n              className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n            >\n              <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n                <label className='mb-0' htmlFor='search-invoice'>\n                  Search:\n                </label>\n                <Input\n                  id='search-invoice'\n                  className='ms-50 w-100'\n                  type='text'\n                  value={searchTerm}\n                  onChange={e => handleFilter(e.target.value)}\n                />\n              </div>\n\n              <div className='d-flex align-items-center table-header-actions'>\n\n                <Button className='add-new-user' color='primary' onClick={toggleSidebar}>\n                  Add New\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </Card>\n      <Card className='overflow-hidden'>\n\n\n        <div className='react-dataTable'>\n          <DataTable\n            noHeader\n            subHeader\n            sortServer\n            pagination\n            responsive\n            paginationServer\n            columns={columns}\n            onSort={handleSort}\n            sortIcon={<ChevronDown />}\n            className='react-dataTable'\n            paginationComponent={CustomPagination}\n            data={country}\n          // subHeaderComponent={\n          //   <CustomHeader\n          //     countries={countries}\n          //     searchTerm={searchTerm}\n          //     rowsPerPage={rowsPerPage}\n          //     handleFilter={handleFilter}\n          //     handlePerPage={handlePerPage}\n          //     toggleSidebar={toggleSidebar}\n          //   />\n          // }\n          />\n        </div>\n      </Card>\n\n      <AddModal open={sidebarOpen} toggleSidebar={toggleSidebar} />\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\n\n// ** Icons Imports\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst CountryList = () => {\n  return (\n    <div className='app-user-list'>\n      {/* <Row>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='primary'\n            statTitle='Total Users'\n            icon={<User size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>21,459</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='danger'\n            statTitle='Paid Users'\n            icon={<UserPlus size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>4,567</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='success'\n            statTitle='Active Users'\n            icon={<UserCheck size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>19,860</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='warning'\n            statTitle='Pending Users'\n            icon={<UserX size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>237</h3>}\n          />\n        </Col>\n      </Row> */}\n      <Table />\n    </div>\n  )\n}\n\nexport default CountryList\n"],"sourceRoot":""}