{"version":3,"sources":["views/products/category/list/columns.js","views/products/category/list/AddModal.js","views/products/category/list/Table.js","views/products/category/list/index.js"],"names":["statusObj","pending","active","inactive","columns","name","sortable","sortField","width","cell","row","level","image","src","generateFilePath","height","selector","status","className","color","pill","tag","size","href","onClick","e","preventDefault","store","dispatch","getCategory","_id","deleteCategory","AddModal","open","toggleSidebar","useSelector","state","categories","setname","useState","description","setdescription","setimage","bannerImage","setbannerImage","setstatus","isUpdated","setisUpdated","updateObj","setupdateObj","categoryArr","setcategoryArr","parentCategory","setparentCategory","parentCategoryArr","setparentCategoryArr","useDispatch","onSubmit","toastError","updateCategory","parentCategoryId","id","addCategory","useEffect","allData","length","console","log","selectedCategory","category","async","query","data","res","getCategoryApi","parentCat","filter","el","err","HandleGetLevel1Categories","isOpen","onClosed","toggle","for","value","onChange","target","map","type","rows","placeholder","checked","FileUpload","onFileChange","val","UsersList","sort","setSort","searchTerm","setSearchTerm","currentPage","setCurrentPage","sortColumn","setSortColumn","rowsPerPage","setRowsPerPage","sidebarOpen","setSidebarOpen","currentRole","setCurrentRole","label","currentStatus","setCurrentStatus","number","rolesOptions","setrolesOptions","getData","q","page","perPage","role","roleSelect","Object","values","ROLES_CONSTANT","xl","htmlFor","parseInt","currentTarget","style","handleFilter","noHeader","subHeader","sortServer","pagination","responsive","paginationServer","onSort","column","sortDirection","sortIcon","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","keys","some","k","dataToRender","CategoryList","Table"],"mappings":"4RAkBA,MAkDMA,EAAY,CAChBC,QAAS,gBACTC,OAAQ,gBACRC,SAAU,mBAGCC,EAAU,CACrB,CACEC,KAAM,OACNC,UAAU,EACVC,UAAW,OACXC,MAAO,MACPC,KAAMC,GAAOA,EAAIL,MAEnB,CACEA,KAAM,QACNC,UAAU,EACVC,UAAW,QACXC,MAAO,MACPC,KAAMC,GAAOA,EAAIC,OAEnB,CACEN,KAAM,QACNC,UAAU,EACVC,UAAW,QACXC,MAAO,MACPC,KAAMC,GAAQA,EAAIE,MAAQ,qBAAKC,IAAKC,YAAiBJ,EAAIE,OAAQJ,MAAM,OAAOO,OAAO,SAAY,YAEnG,CACEV,KAAM,SACNC,UAAU,EACVC,UAAW,SACXS,SAAUN,GAAOA,EAAIO,OACrBR,KAAMC,GACJ,cAAC,IAAK,CAACQ,UAAU,kBAAkBC,MAAOnB,GAAyB,IAAfU,EAAIO,OAAkB,SAAW,YAAaG,MAAI,YACpF,IAAfV,EAAIO,OAAkB,SAAW,cAIxC,CACEZ,KAAM,UACNI,KAAMC,GACJ,qBAAKQ,UAAU,gBAAe,SAC5B,eAAC,KAAoB,WACnB,cAAC,IAAc,CAACG,IAAI,MAAMH,UAAU,aAAY,SAC9C,cAAC,IAAY,CAACI,KAAM,GAAIJ,UAAU,qBAEpC,eAAC,IAAY,WACX,eAAC,IAAY,CAACG,IAAI,IAAIE,KAAK,IAAIL,UAAU,QAAQM,QAASC,IACxDA,EAAEC,iBACFC,IAAMC,SAASC,YAAYnB,EAAIoB,KAAK,EACpC,UAEA,cAAC,IAAO,CAACR,KAAM,GAAIJ,UAAU,UAC7B,sBAAMA,UAAU,eAAc,SAAC,YAEjC,eAAC,IAAY,CACXG,IAAI,IACJE,KAAK,IACLL,UAAU,QACVM,QAASC,IACPA,EAAEC,iBACFC,IAAMC,SAASG,YAAerB,EAAIoB,KAAK,EACvC,UAEF,cAAC,IAAM,CAACR,KAAM,GAAIJ,UAAU,UAC5B,sBAAMA,UAAU,eAAc,SAAC,wB,gIC6O9Bc,MAnVE,IAA8B,IAA7B,KAAEC,EAAI,cAAEC,GAAe,EAErC,MAAMP,EAAQQ,aAAYC,GAASA,EAAMC,cAElChC,EAAMiC,GAAWC,mBAAS,KAC1BC,EAAaC,GAAkBF,mBAAS,KACxC3B,EAAO8B,GAAYH,sBACnBI,EAAaC,GAAkBL,sBAC/BtB,EAAQ4B,GAAaN,oBAAS,IAC9BO,EAAWC,GAAgBR,oBAAS,IACpCS,EAAWC,GAAgBV,mBAAS,CAAC,IACrCW,EAAaC,GAAkBZ,mBAAS,KACxCa,EAAgBC,GAAqBd,mBAAS,KAC9Ce,EAAmBC,GAAwBhB,mBAAS,IAErDX,EAAW4B,cAaXC,EAAW,MAVK,KAAb,GAAEpD,MACHqD,YAAW,oBACJ,MAUPxB,IAEIN,GADc,IAAdkB,EAEIa,YAAe,CACXtD,OACAmC,cACAvB,SACAL,QACA+B,cACAiB,iBAAkBR,EAClBS,GAAIb,EAAUlB,MAKlBgC,YAAY,CACRzD,OACAmC,cACAvB,SACAL,QACAgD,iBAAkBR,EAClBT,iBAIhB,EA2BJoB,qBAAU,KACFpC,EAAMqC,QAAQC,OAAS,IAEvBd,EAAexB,EAAMqC,SACrBE,QAAQC,IAAIxC,EAAMqC,QAAS,iBAK/B,GACD,CAACrC,EAAMqC,UAEVD,qBAAU,KACN,GAA+B,OAA3BpC,EAAMyC,iBAA2B,CACjC,MAAMC,EAAW1C,EAAMyC,iBACvBnB,EAAaoB,GACbtB,GAAa,GACbT,EAAQ+B,EAAShE,MACjBoC,EAAe4B,EAAS7B,aACxBE,EAAS2B,EAASzD,OAClBiC,EAAUwB,EAASpD,QACnBoC,EAAkBgB,EAAST,kBAC3BhB,EAAeyB,EAAS1B,YAC5B,MACIM,EAAa,CAAC,GACdF,GAAa,GACbT,EAAQ,IACRG,EAAe,IACfC,EAAS,IACTE,EAAe,GACnB,GACD,CAACjB,EAAMyC,mBAiBV,OAJAL,qBAAU,KAhEwBO,WAC9B,IACI,MAAMC,EAAS,WAMPC,KAAMC,SAAcC,YAAeH,GAE3C,GADAL,QAAQC,IAAIM,EAAK,YACbA,EAAID,KAAM,CACV,MAAMG,EAAYF,EAAID,KAAKI,QAAOC,GAAmB,IAAbA,EAAGlE,QAC3CuD,QAAQC,IAAIQ,EAAW,2BACvBpB,EAAqBoB,EACzB,CACJ,CAAE,MAAOG,GACLpB,YAAWoB,EACf,GAgDAC,EAA2B,GAC5B,IAGC,mCACI,eAAC,IAAK,CACFC,OAAQ/C,EACRgD,SA5EgB,OA6EhBC,OAAQhD,EACRhB,UAAU,iCAAgC,UAE1C,cAAC,IAAW,CAACA,UAAU,iBAAiBgE,OAAQhD,IAChD,eAAC,IAAS,CAAChB,UAAU,YAAW,UAC5B,qBAAKA,UAAU,cAAa,SACxB,+BAAK4B,EAAY,SAAW,MAAM,kBAGtC,eAAC,IAAI,CAAC5B,UAAU,MAAK,UACjB,sBAAKA,UAAU,gBAAe,UAC1B,eAAC,IAAK,CAACA,UAAU,aAAaiE,IAAI,WAAU,UAAC,QACpC,sBAAMjE,UAAU,cAAa,SAAC,SAEvC,cAAC,IAAK,CAACA,UAAU,eAAekE,MAAO/E,EAAMgF,SAAW5D,GAAMa,EAAQb,EAAE6D,OAAOF,YAEnF,sBAAKlE,UAAU,gBAAe,UAC1B,eAAC,IAAK,CAACA,UAAU,aAAaiE,IAAI,WAAU,UAAC,YAChC,sBAAMjE,UAAU,cAAa,SAAC,SAE3C,yBAAQA,UAAU,eAAekE,MAAOhC,EAAgBiC,SAAW5D,GAAM4B,EAAkB5B,EAAE6D,OAAOF,OAAO,UACvG,wBAAQA,MAAM,GAAE,SAAC,SAChB9B,GAAqBA,EAAkBW,OAAS,GAAKX,EAAkBiC,KAAIV,GAAO,wBAAQO,MAAOP,EAAG/C,IAAI,SAAE+C,EAAGxE,eAGtH,sBAAKa,UAAU,iBAAgB,UAC3B,cAAC,IAAK,CAACA,UAAU,aAAaiE,IAAI,YAAW,SAAC,gBAG9C,cAAC,IAAK,CAACK,KAAK,WAAWnF,KAAK,OAAOwD,GAAG,cAAcuB,MAAO5C,EAAa6C,SAAW5D,GAAMgB,EAAehB,EAAE6D,OAAOF,OAAQK,KAAK,IAAIC,YAAY,mBAGlJ,sBAAKxE,UAAU,kBAAiB,UAC5B,eAAC,IAAK,CAACA,UAAU,aAAaiE,IAAI,QAAO,UAAC,UAC/B,sBAAMjE,UAAU,cAAa,SAAC,SAEzC,sBAAKA,UAAU,sBAAqB,UAChC,sBAAKA,UAAU,aAAY,UACvB,cAAC,IAAK,CAACsE,KAAK,QAAQ3B,GAAG,aAAaxD,KAAK,MAAMsF,SAAoB,IAAX1E,EAAiBoE,SAAU,IAAMxC,GAAU,KACnG,cAAC,IAAK,CAAC3B,UAAU,mBAAmBiE,IAAI,aAAY,SAAC,cAIzD,sBAAKjE,UAAU,aAAY,UACvB,cAAC,IAAK,CAACsE,KAAK,QAAQnF,KAAK,MAAMwD,GAAG,eAAe8B,SAAoB,IAAX1E,EAAkBoE,SAAU,IAAMxC,GAAU,KACtG,cAAC,IAAK,CAAC3B,UAAU,mBAAmBiE,IAAI,eAAc,SAAC,sBAMnE,sBAAKjE,UAAU,gBAAe,UAC1B,cAAC,IAAK,CAACA,UAAU,aAAY,SAAC,0CAG9B,cAAC0E,EAAA,EAAU,CAACC,aAAeC,GAAQpD,EAASoD,QAEhD,sBAAK5E,UAAU,gBAAe,UAC1B,cAAC,IAAK,CAACA,UAAU,aAAY,SAAE,iDAG/B,cAAC0E,EAAA,EAAU,CAACC,aAAeC,GAAQlD,EAAekD,QAEtD,qBAAK5E,UAAU,iBAAgB,SAC3B,cAAC,IAAM,CAACsE,KAAK,SAAStE,UAAU,OAAOC,MAAM,UAAUK,QAAS,KAAQiC,GAAU,EAAG,SAAE,uBAwI3G,EC4BOsC,MAjRG,KAEhB,MAAMnE,EAAW4B,cACX7B,EAAQQ,aAAYC,GAASA,EAAMC,cAIlC2D,EAAMC,IAHG9D,aAAYC,GAASA,EAAMC,WAAW2B,UAG9BzB,mBAAS,UAC1B2D,EAAYC,GAAiB5D,mBAAS,KACtC6D,EAAaC,GAAkB9D,mBAAS,IACxC+D,EAAYC,GAAiBhE,mBAAS,OACtCiE,EAAaC,GAAkBlE,mBAAS,KACxCmE,EAAaC,GAAkBpE,oBAAS,IACxCqE,EAAaC,GAAkBtE,mBAAS,CAAE6C,MAAO,GAAI0B,MAAO,iBAE5DC,EAAeC,GAAoBzE,mBAAS,CAAE6C,MAAO,GAAI0B,MAAO,gBAAiBG,OAAQ,KACzFC,EAAcC,GAAmB5E,mBAAS,IAG3CL,EAAgB,IAAMyE,GAAgBD,GAI5C3C,qBAAU,KACRnC,EACEwF,YAAQ,CACNpB,OACAM,aACAe,EAAGnB,EACHoB,KAAMlB,EACNmB,QAASf,EACTgB,KAAMZ,EAAYxB,MAClBnE,OAAQ8F,EAAc3B,SAK1BlB,QAAQC,IAAIxC,EAAM6C,KAAM,+BACxB,MAAMiD,EAAaC,OAAOC,OAAOC,KAAgBrC,KAAIV,IAC5C,CAAEiC,MAAOjC,EAAIO,MAAOP,MAE7BsC,EAAgBM,EAAW,GAE1B,CAAC7F,EAAUD,EAAM6C,KAAKP,OAAQ+B,EAAMM,EAAYF,IAgJnD,OAPArC,qBAAU,KACuB,OAA3BpC,EAAMyC,kBACRlC,GACF,GAEC,CAACP,EAAMyC,mBAGR,eAAC,WAAQ,WACP,eAAC,IAAI,CAAClD,UAAU,kBAAiB,UAG/B,qBAAKA,UAAU,2CAA0C,SACvD,eAAC,KAAG,WACF,cAAC,IAAG,CAAC2G,GAAG,IAAI3G,UAAU,gCAA+B,SACnD,sBAAKA,UAAU,kCAAiC,UAC9C,uBAAO4G,QAAQ,gBAAe,SAAC,SAC/B,eAAC,IAAK,CACJ5G,UAAU,QACVsE,KAAK,SACL3B,GAAG,gBACHuB,MAAOoB,EACPnB,SApHM5D,IACpB,MAAM2D,EAAQ2C,SAAStG,EAAEuG,cAAc5C,OACvCiB,EAAe,GAEfzE,EACEwF,YAAQ,CACNpB,OACAM,aACAe,EAAGnB,EACHqB,QAASnC,EACTkC,KAAM,EACNE,KAAMZ,EAAYxB,MAClBnE,OAAQ8F,EAAc3B,SAG1BqB,EAAerB,EAAM,EAsGP6C,MAAO,CAAEzH,MAAO,QAAS,UAGzB,wBAAQ4E,MAAM,KAAI,SAAC,OACnB,wBAAQA,MAAM,KAAI,SAAC,OACnB,wBAAQA,MAAM,KAAI,SAAC,OACnB,wBAAQA,MAAM,MAAK,SAAC,QACpB,wBAAQA,MAAM,MAAK,SAAC,WAEtB,uBAAO0C,QAAQ,gBAAe,SAAC,iBAGnC,eAAC,IAAG,CACFD,GAAG,IACH3G,UAAU,sJAAqJ,UAE/J,sBAAKA,UAAU,8CAA6C,UAC1D,uBAAOA,UAAU,OAAO4G,QAAQ,iBAAgB,SAAC,YAGjD,cAAC,IAAK,CACJjE,GAAG,iBACH3C,UAAU,cACVsE,KAAK,OACLJ,MAAOc,EACPb,SAAU5D,IAAKyG,OA3HVpC,EA2HuBrE,EAAE6D,OAAOF,MA1HnDe,EAAcL,QACdlE,EACEwF,YAAQ,CACNpB,OACAqB,EAAGvB,EACHQ,aACAgB,KAAMlB,EACNmB,QAASf,EACTgB,KAAMZ,EAAYxB,MAClBnE,OAAQ8F,EAAc3B,SAVPU,KA2HuC,OAIhD,qBAAK5E,UAAU,iDAAgD,SAC7D,cAAC,IAAM,CAACA,UAAU,eAAeC,MAAM,UAAUK,QAASU,EAAc,SAAC,sBAOjF,qBAAKhB,UAAU,kBAAiB,SAC9B,cAAC,IAAS,CACRiH,UAAQ,EACRC,WAAS,EACTC,YAAU,EACVC,YAAU,EACVC,YAAU,EACVC,kBAAgB,EAChBpI,QAASA,EACTqI,OAtFS,CAACC,EAAQC,KAC1B1C,EAAQ0C,GACRpC,EAAcmC,EAAOnI,WACrBqB,EACEwF,YAAQ,CACNpB,OACAM,aACAe,EAAGnB,EACHoB,KAAMlB,EACNmB,QAASf,EACTgB,KAAMZ,EAAYxB,MAClBnE,OAAQ8F,EAAc3B,QAEzB,EA0EOwD,SAAU,cAAC,IAAW,IACtB1H,UAAU,kBACV2H,oBAnIe,KACvB,MAAMC,EAAQC,OAAOC,KAAKC,KAAKtH,EAAMuH,MAAQ1C,IAE7C,OACE,cAAC,IAAa,CACZ2C,cAAe,GACfC,UAAW,GACXC,UAAWP,GAAS,EACpBQ,gBAAgB,SAChBC,UAA2B,IAAhBnD,EAAoBA,EAAc,EAAI,EACjDoD,aAAclC,GA7DKA,KACvB1F,EACEwF,YAAQ,CACNpB,OACAM,aACAe,EAAGnB,EACHqB,QAASf,EACTc,KAAMA,EAAKmC,SAAW,EACtBjC,KAAMZ,EAAYxB,MAClBnE,OAAQ8F,EAAc3B,SAG1BiB,EAAeiB,EAAKmC,SAAW,EAAE,EAiDPC,CAAiBpC,GACvCqC,cAAe,YACfC,kBAAmB,YACnBC,cAAe,iBACfC,kBAAmB,iBACnBC,sBAAuB,YACvBC,kBAAmB,YACnBC,mBAAoB,2DACpB,EAkHIzF,KA7GW,MACnB,MAAM0F,EAAU,CACd1C,KAAMZ,EAAYxB,MAClBnE,OAAQ8F,EAAc3B,MACtBiC,EAAGnB,GAGCiE,EAAazC,OAAO0C,KAAKF,GAASG,MAAK,SAAUC,GACrD,OAAOJ,EAAQI,GAAGrG,OAAS,CAC7B,IACA,OAAItC,EAAM6C,KAAKP,OAAS,EACftC,EAAM6C,KACkB,IAAtB7C,EAAM6C,KAAKP,QAAgBkG,EAC7B,GAEAxI,EAAM6C,IACf,EA6Fc+F,UAeZ,cAAC,EAAQ,CAACtI,KAAMyE,EAAaxE,cAAeA,MACnC,E,cC9UAsI,UA1CM,IAEjB,qBAAKtJ,UAAU,gBAAe,SAmC5B,cAACuJ,EAAK,K","file":"static/js/171.ab71314c.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { store } from '@store/store'\nimport { getCategory, deleteCategory } from '../store'\n\n// ** Icons Imports\nimport { Slack, User, Settings, Database, Edit2, MoreVertical, FileText, Trash2, Archive } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { generateFilePath } from '../../../../services/url.service'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n  if (row.avatar.length) {\n    return <Avatar className='me-1' img={row.avatar} width='32' height='32' />\n  } else {\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={row.avatarColor || 'light-primary'}\n        content={row.fullName || 'John Doe'}\n      />\n    )\n  }\n}\n\n// ** Renders Role Columns\nconst renderRole = row => {\n  const roleObj = {\n    subscriber: {\n      class: 'text-primary',\n      icon: User\n    },\n    maintainer: {\n      class: 'text-success',\n      icon: Database\n    },\n    editor: {\n      class: 'text-info',\n      icon: Edit2\n    },\n    author: {\n      class: 'text-warning',\n      icon: Settings\n    },\n    admin: {\n      class: 'text-danger',\n      icon: Slack\n    }\n  }\n\n  const Icon = roleObj[row.role] ? roleObj[row.role].icon : Edit2\n\n  return (\n    <span className='text-truncate text-capitalize align-middle'>\n      <Icon size={18} className={`${roleObj[row.role] ? roleObj[row.role].class : ''} me-50`} />\n      {row.role}\n    </span>\n  )\n}\n\nconst statusObj = {\n  pending: 'light-warning',\n  active: 'light-success',\n  inactive: 'light-secondary'\n}\n\nexport const columns = [\n  {\n    name: 'Name',\n    sortable: true,\n    sortField: 'name',\n    width: \"15%\",\n    cell: row => row.name\n  },\n  {\n    name: 'Level',\n    sortable: true,\n    sortField: 'level',\n    width: \"15%\",\n    cell: row => row.level\n  },\n  {\n    name: 'Image',\n    sortable: true,\n    sortField: 'image',\n    width: \"15%\",\n    cell: row => (row.image ? <img src={generateFilePath(row.image)} width=\"50px\" height=\"50px\" /> : 'No Image')\n  },\n  {\n    name: 'Status',\n    sortable: true,\n    sortField: 'status',\n    selector: row => row.status,\n    cell: row => (\n      <Badge className='text-capitalize' color={statusObj[row.status === true ? 'active' : 'inactive']} pill>\n        {row.status === true ? 'Active' : 'Inactive'}\n      </Badge>\n    )\n  },\n  {\n    name: 'Actions',\n    cell: row => (\n      <div className='column-action'>\n        <UncontrolledDropdown>\n          <DropdownToggle tag='div' className='btn btn-sm'>\n            <MoreVertical size={14} className='cursor-pointer' />\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem tag='a' href='/' className='w-100' onClick={e => {\n              e.preventDefault()\n              store.dispatch(getCategory(row._id))\n            }}\n            >\n              <Archive size={14} className='me-50' />\n              <span className='align-middle'>Edit</span>\n            </DropdownItem>\n            <DropdownItem\n              tag='a'\n              href='/'\n              className='w-100'\n              onClick={e => {\n                e.preventDefault()\n                store.dispatch(deleteCategory(row._id))\n              }}\n            >\n              <Trash2 size={14} className='me-50' />\n              <span className='align-middle'>Delete</span>\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </div>\n    )\n  }\n]\n","// ** React Import\nimport { useEffect, useState } from 'react'\n\n// ** Custom Components\nimport Sidebar from '@components/sidebar'\n\n// ** Utils\nimport { selectThemeColors } from '@utils'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport classnames from 'classnames'\nimport { useForm, Controller } from 'react-hook-form'\n\n// ** Reactstrap Imports\nimport {\n    Button, Label, FormText, Form, Input, Modal,\n    CardBody,\n    ModalBody,\n    ModalHeader,\n    Row,\n    Col\n} from 'reactstrap'\n\n// ** Store & Actions\nimport { addCategory, getAllData, getData, updateCategory } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ROLES_CONSTANT } from '../../../../utility/constant'\nimport { toastError } from '../../../../utility/toastutill'\nimport FileUpload from '../../../../utility/FileUpload'\nimport { getCategoryApi } from '../../../../services/category.service'\n\nconst AddModal = ({ open, toggleSidebar }) => {\n    // ** States\n    const store = useSelector(state => state.categories)\n\n    const [name, setname] = useState(\"\")\n    const [description, setdescription] = useState(\"\")\n    const [image, setimage] = useState()\n    const [bannerImage, setbannerImage] = useState()\n    const [status, setstatus] = useState(true)\n    const [isUpdated, setisUpdated] = useState(false)\n    const [updateObj, setupdateObj] = useState({})\n    const [categoryArr, setcategoryArr] = useState([])\n    const [parentCategory, setparentCategory] = useState(\"\")\n    const [parentCategoryArr, setparentCategoryArr] = useState([])\n    // ** Store Vars\n    const dispatch = useDispatch()\n    const checkIsValid = () => {\n\n        if (`${name}` === '') {\n            toastError(\"Please Fill name\")\n            return false\n        }\n\n\n        return true\n    }\n\n    // ** Function to handle form submit\n    const onSubmit = () => {\n        if (checkIsValid()) {\n            toggleSidebar()\n            if (isUpdated === true) {\n                dispatch(\n                    updateCategory({\n                        name,\n                        description,\n                        status,\n                        image,\n                        bannerImage,\n                        parentCategoryId: parentCategory,\n                        id: updateObj._id\n                    })\n                )\n            } else {\n                dispatch(\n                    addCategory({\n                        name,\n                        description,\n                        status,\n                        image,\n                        parentCategoryId: parentCategory,\n                        bannerImage\n                    })\n                )\n            }\n        }\n    }\n\n    const handleSidebarClosed = () => {\n    }\n\n\n    const HandleGetLevel1Categories = async () => {\n        try {\n            const query = `level=1`\n            // query = `${query}&perPage=${params.perPage}`\n            // }\n            // if (page) {\n            // query = `${query}&page=${params.page}`\n            // }\n            const { data: res } = await getCategoryApi(query)\n            console.log(res, \"response\")\n            if (res.data) {\n                const parentCat = res.data.filter(el => el.level === 1)\n                console.log(parentCat, \"store.allData parentCat\")\n                setparentCategoryArr(parentCat)\n            }\n        } catch (err) {\n            toastError(err)\n        }\n    }\n\n    useEffect(() => {\n        if (store.allData.length > 0) {\n\n            setcategoryArr(store.allData)\n            console.log(store.allData, \"store.allData\")\n            // const parentCat = store.allData.filter(el => el.level === 1)\n            // console.log(parentCat, \"store.allData parentCat\")\n            // setparentCategoryArr(parentCat)\n\n        }\n    }, [store.allData])\n\n    useEffect(() => {\n        if (store.selectedCategory !== null) {\n            const category = store.selectedCategory\n            setupdateObj(category)\n            setisUpdated(true)\n            setname(category.name)\n            setdescription(category.description)\n            setimage(category.image)\n            setstatus(category.status)\n            setparentCategory(category.parentCategoryId)\n            setbannerImage(category.bannerImage)\n        } else {\n            setupdateObj({})\n            setisUpdated(false)\n            setname(\"\")\n            setdescription(\"\")\n            setimage(\"\")\n            setbannerImage(\"\")\n        }\n    }, [store.selectedCategory])\n\n    const getCategoryrender = (category, id, dash = '-') => {\n        const subCategoryArr = categoryArr.filter(el => el.parentCategoryArr.some(el => el.parentId === id))\n        if (subCategoryArr.length > 0) {\n            subCategoryArr.forEach(element => {\n                console.log(element, \"element\")\n                return <option>{element.name}</option>\n            })\n        }\n    }\n\n\n    useEffect(() => {\n        HandleGetLevel1Categories()\n    }, [])\n\n    return (\n        <>\n            <Modal\n                isOpen={open}\n                onClosed={handleSidebarClosed}\n                toggle={toggleSidebar}\n                className='modal-dialog-centered modal-lg'\n            >\n                <ModalHeader className='bg-transparent' toggle={toggleSidebar}></ModalHeader>\n                <ModalBody className='px-3 pb-3'>\n                    <div className='text-center'>\n                        <h2>{isUpdated ? \"Update\" : \"Add\"}  Category</h2>\n                    </div>\n\n                    <Form className=\"row\">\n                        <div className='mb-1 col-md-6'>\n                            <Label className='form-label' for='fullName'>\n                                Name <span className='text-danger'>*</span>\n                            </Label>\n                            <Input className='form-control' value={name} onChange={(e) => setname(e.target.value)} />\n                        </div>\n                        <div className='mb-1 col-md-6'>\n                            <Label className='form-label' for='fullName'>\n                                Category <span className='text-danger'>*</span>\n                            </Label>\n                            <select className='form-control' value={parentCategory} onChange={(e) => setparentCategory(e.target.value)}>\n                                <option value=\"\">None</option>\n                                {parentCategoryArr && parentCategoryArr.length > 0 && parentCategoryArr.map(el => (<option value={el._id}>{el.name}</option>))}\n                            </select>\n                        </div>\n                        <div className='mb-1 col-md-12'>\n                            <Label className='form-label' for='userEmail'>\n                                Description\n                            </Label>\n                            <Input type='textarea' name='text' id='exampleText' value={description} onChange={(e) => setdescription(e.target.value)} rows='3' placeholder='Description' />\n                        </div>\n\n                        <div className=' mb-1 col-md-12'>\n                            <Label className='form-label' for='phone'>\n                                Status <span className='text-danger'>*</span>\n                            </Label>\n                            <div className='demo-inline-spacing'>\n                                <div className='form-check'>\n                                    <Input type='radio' id='ex1-active' name='ex1' checked={status === true} onChange={() => setstatus(true)} />\n                                    <Label className='form-check-label' for='ex1-active'>\n                                        Active\n                                    </Label>\n                                </div>\n                                <div className='form-check'>\n                                    <Input type='radio' name='ex1' id='ex1-inactive' checked={status === false} onChange={() => setstatus(false)} />\n                                    <Label className='form-check-label' for='ex1-inactive'>\n                                        InActive\n                                    </Label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='mb-1 col-md-6'>\n                            <Label className='form-label'>\n                                Image (width:463px and height:400 px)\n                            </Label>\n                            <FileUpload onFileChange={(val) => setimage(val)} />\n                        </div>\n                        <div className='mb-1 col-md-6'>\n                            <Label className='form-label' >\n                                Banner Image (width:937px and height:400 px)\n                            </Label>\n                            <FileUpload onFileChange={(val) => setbannerImage(val)} />\n                        </div>\n                        <div className='mb-1 col-md-12'>\n                            <Button type='button' className='me-1' color='primary' onClick={() => { onSubmit() }} >\n                                Submit\n                            </Button>\n                        </div>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </>\n        // <Sidebar\n        //   size='lg'\n        //   open={open}\n        //   title='New User'\n        //   headerClassName='mb-1'\n        //   contentClassName='pt-0'\n        //   toggleSidebar={toggleSidebar}\n        //   onClosed={handleSidebarClosed}\n        // >\n        //   <Form onSubmit={handleSubmit(onSubmit)}>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='fullName'>\n        //         Full Name <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='fullName'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='fullName' placeholder='John Doe' invalid={errors.fullName && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='lastName'>\n        //         lastName <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='lastName'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='lastName' placeholder='johnDoe99' invalid={errors.lastName && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='userEmail'>\n        //         Email <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='email'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input\n        //             type='email'\n        //             id='userEmail'\n        //             placeholder='john.doe@example.com'\n        //             invalid={errors.email && true}\n        //             {...field}\n        //           />\n        //         )}\n        //       />\n        //       <FormText color='muted'>You can use letters, numbers & periods</FormText>\n        //     </div>\n\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='phone'>\n        //         phone <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='phone'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='phone' placeholder='(397) 294-5153' invalid={errors.phone && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='company'>\n        //         Company <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='company'\n        //         control={control}\n        //         render={({ field }) => (\n        //           <Input id='company' placeholder='Company Pvt Ltd' invalid={errors.company && true} {...field} />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='country'>\n        //         Country <span className='text-danger'>*</span>\n        //       </Label>\n        //       <Controller\n        //         name='country'\n        //         control={control}\n        //         render={({ field }) => (\n        //           // <Input id='country' placeholder='Australia' invalid={errors.country && true} {...field} />\n        //           <Select\n        //             isClearable={false}\n        //             classNamePrefix='select'\n        //             options={countryOptions}\n        //             theme={selectThemeColors}\n        //             className={classnames('react-select', { 'is-invalid': data !== null && data.country === null })}\n        //             {...field}\n        //           />\n        //         )}\n        //       />\n        //     </div>\n        //     <div className='mb-1'>\n        //       <Label className='form-label' for='user-role'>\n        //         User Role\n        //       </Label>\n        //       <Input type='select' id='user-role' name='user-role' value={role} onChange={e => setRole(e.target.value)}>\n        //         <option value='subscriber'>Subscriber</option>\n        //         <option value='editor'>Editor</option>\n        //         <option value='maintainer'>Maintainer</option>\n        //         <option value='author'>Author</option>\n        //         <option value='admin'>Admin</option>\n        //       </Input>\n        //     </div>\n        //     <div className='mb-1' value={plan} onChange={e => setPlan(e.target.value)}>\n        //       <Label className='form-label' for='select-plan'>\n        //         Select Plan\n        //       </Label>\n        //       <Input type='select' id='select-plan' name='select-plan'>\n        //         <option value='basic'>Basic</option>\n        //         <option value='enterprise'>Enterprise</option>\n        //         <option value='company'>Company</option>\n        //         <option value='team'>Team</option>\n        //       </Input>\n        //     </div>\n        //     <Button type='submit' className='me-1' color='primary'>\n        //       Submit\n        //     </Button>\n        //     <Button type='reset' color='secondary' outline onClick={toggleSidebar}>\n        //       Cancel\n        //     </Button>\n        //   </Form>\n        // </Sidebar>\n    )\n}\n\nexport default AddModal\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Table Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAllData, getData } from '../store'\n\n// ** Third Party Components\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown, Copy, File, FileText, Grid, Printer, Share } from 'react-feather'\nimport ReactPaginate from 'react-paginate'\n\n// ** Utils\n\n// ** Reactstrap Imports\nimport {\n  Button, Card, Col, DropdownItem, DropdownMenu, DropdownToggle, Input, Row, UncontrolledDropdown\n} from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport { ROLES_CONSTANT } from '../../../../utility/constant'\nimport AddModal from './AddModal'\n\n// ** Table Header\nconst CustomHeader = ({ store, toggleSidebar, handlePerPage, rowsPerPage, handleFilter, searchTerm }) => {\n  // ** Converts table to CSV\n  function convertArrayOfObjectsToCSV(array) {\n    let result\n\n    const columnDelimiter = ','\n    const lineDelimiter = '\\n'\n    const keys = Object.keys(store.data[0])\n\n    result = ''\n    result += keys.join(columnDelimiter)\n    result += lineDelimiter\n\n    array.forEach(item => {\n      let ctr = 0\n      keys.forEach(key => {\n        if (ctr > 0) result += columnDelimiter\n\n        result += item[key]\n\n        ctr++\n      })\n      result += lineDelimiter\n    })\n\n    return result\n  }\n\n  // ** Downloads CSV\n  function downloadCSV(array) {\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n\n    const filename = 'export.csv'\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n      csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n  }\n  return (\n    <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\n      <Row>\n        <Col xl='6' className='d-flex align-items-center p-0'>\n          <div className='d-flex align-items-center w-100'>\n            <label htmlFor='rows-per-page'>Show</label>\n            <Input\n              className='mx-50'\n              type='select'\n              id='rows-per-page'\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: '5rem' }}\n            >\n              <option value='10'>10</option>\n              <option value='25'>25</option>\n              <option value='50'>50</option>\n            </Input>\n            <label htmlFor='rows-per-page'>Entries</label>\n          </div>\n        </Col>\n        <Col\n          xl='6'\n          className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n        >\n          <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n            <label className='mb-0' htmlFor='search-invoice'>\n              Search:\n            </label>\n            <Input\n              id='search-invoice'\n              className='ms-50 w-100'\n              type='text'\n              value={searchTerm}\n              onChange={e => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className='d-flex align-items-center table-header-actions'>\n            <Button className='add-new-user' color='primary' onClick={toggleSidebar}>\n              Add New\n            </Button>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.categories)\n  const allData = useSelector(state => state.categories.allData)\n\n  // ** States\n  const [sort, setSort] = useState('desc')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortColumn, setSortColumn] = useState('id')\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [currentRole, setCurrentRole] = useState({ value: '', label: 'Select Role' })\n  // const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n  const [rolesOptions, setrolesOptions] = useState([])\n\n  // ** Function to toggle sidebar\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\n\n  // ** Get data on mount\n  // useEffect(() => { dispatch(getAllData()) }, [])\n  useEffect(() => {\n    dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value\n        // currentPlan: currentPlan.value\n      })\n    )\n    // ** Set Roles\n    console.log(store.data, \"sdfjasdfjkdsfhdsjkfdsjkfhjk\")\n    const roleSelect = Object.values(ROLES_CONSTANT).map(el => {\n      return { label: el, value: el }\n    })\n    setrolesOptions(roleSelect)\n\n  }, [dispatch, store.data.length, sort, sortColumn, currentPage])\n\n  // ** User filter options\n  // const roleOptions = [\n  //   { value: '', label: 'Select Role' },\n  //   { value: 'admin', label: 'Admin' },\n  //   { value: 'author', label: 'Author' },\n  //   { value: 'editor', label: 'Editor' },\n  //   { value: 'maintainer', label: 'Maintainer' },\n  //   { value: 'subscriber', label: 'Subscriber' }\n  // ]\n\n  // const planOptions = [\n  //   { value: '', label: 'Select Plan' },\n  //   { value: 'basic', label: 'Basic' },\n  //   { value: 'company', label: 'Company' },\n  //   { value: 'enterprise', label: 'Enterprise' },\n  //   { value: 'team', label: 'Team' }\n  // ]\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'active', label: 'Active', number: true },\n    { value: 'inactive', label: 'Inactive', number: false }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: rowsPerPage,\n        page: page.selected + 1,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    setCurrentPage(1)\n\n    dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: value,\n        page: 1,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getData({\n        sort,\n        q: val,\n        sortColumn,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      role: currentRole.value,\n      status: currentStatus.value,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.data\n    }\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSort(sortDirection)\n    setSortColumn(column.sortField)\n    dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n  }\n\n\n  useEffect(() => {\n    if (store.selectedCategory !== null) {\n      toggleSidebar()\n    }\n\n  }, [store.selectedCategory])\n\n  return (\n    <Fragment>\n      <Card className='overflow-hidden'>\n\n\n        <div className='invoice-list-table-header mt-2 mx-2 ms-3'>\n          <Row>\n            <Col xl='6' className='d-flex align-items-center p-0'>\n              <div className='d-flex align-items-center w-100'>\n                <label htmlFor='rows-per-page'>Show</label>\n                <Input\n                  className='mx-50'\n                  type='select'\n                  id='rows-per-page'\n                  value={rowsPerPage}\n                  onChange={handlePerPage}\n                  style={{ width: '5rem' }}\n                >\n                  {/* <option value='1'>1</option> */}\n                  <option value='10'>10</option>\n                  <option value='25'>25</option>\n                  <option value='50'>50</option>\n                  <option value='100'>100</option>\n                  <option value='500'>500</option>\n                </Input>\n                <label htmlFor='rows-per-page'>Entries</label>\n              </div>\n            </Col>\n            <Col\n              xl='6'\n              className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n            >\n              <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n                <label className='mb-0' htmlFor='search-invoice'>\n                  Search:\n                </label>\n                <Input\n                  id='search-invoice'\n                  className='ms-50 w-100'\n                  type='text'\n                  value={searchTerm}\n                  onChange={e => handleFilter(e.target.value)}\n                />\n              </div>\n\n              <div className='d-flex align-items-center table-header-actions'>\n                <Button className='add-new-user' color='primary' onClick={toggleSidebar}>\n                  Add New\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </div>\n        <div className='react-dataTable'>\n          <DataTable\n            noHeader\n            subHeader\n            sortServer\n            pagination\n            responsive\n            paginationServer\n            columns={columns}\n            onSort={handleSort}\n            sortIcon={<ChevronDown />}\n            className='react-dataTable'\n            paginationComponent={CustomPagination}\n            data={dataToRender()}\n          // subHeaderComponent={\n          //   <CustomHeader\n          //     store={store}\n          //     searchTerm={searchTerm}\n          //     rowsPerPage={rowsPerPage}\n          //     handleFilter={handleFilter}\n          //     handlePerPage={handlePerPage}\n          //     toggleSidebar={toggleSidebar}\n          //   />\n          // }\n          />\n        </div>\n      </Card>\n\n      <AddModal open={sidebarOpen} toggleSidebar={toggleSidebar} />\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\n\n// ** Icons Imports\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst CategoryList = () => {\n  return (\n    <div className='app-user-list'>\n      {/* <Row>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='primary'\n            statTitle='Total Users'\n            icon={<User size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>21,459</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='danger'\n            statTitle='Paid Users'\n            icon={<UserPlus size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>4,567</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='success'\n            statTitle='Active Users'\n            icon={<UserCheck size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>19,860</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='warning'\n            statTitle='Pending Users'\n            icon={<UserX size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>237</h3>}\n          />\n        </Col>\n      </Row> */}\n      <Table />\n    </div>\n  )\n}\n\nexport default CategoryList\n"],"sourceRoot":""}