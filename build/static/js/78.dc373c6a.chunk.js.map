{"version":3,"sources":["views/apps/chat/Chat.js","views/apps/chat/SidebarLeft.js","views/apps/chat/UserProfileSidebar.js","views/apps/chat/index.js"],"names":["ChatLog","props","handleUser","handleUserSidebarRight","handleSidebar","store","userSidebarLeft","userProfile","selectedUser","chatArea","useRef","dispatch","useDispatch","msg","setMsg","useState","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","ChatWrapper","chat","PerfectScrollbar","className","classnames","onClick","window","innerWidth","size","imgHeight","imgWidth","img","contact","avatar","status","handleAvatarClick","obj","fullName","color","end","href","e","preventDefault","ref","options","wheelPropagation","chatLog","formattedChatLog","chatMessageSenderId","senderId","undefined","msgGroup","messages","forEach","index","push","message","time","formattedChatData","map","item","onSubmit","trim","sendMsg","handleSendMsg","value","onChange","target","placeholder","for","type","id","hidden","SidebarLeft","sidebar","handleUserSidebarLeft","chats","contacts","query","setQuery","about","setAbout","active","setActive","setStatus","filteredChat","setFilteredChat","filteredContacts","setFilteredContacts","handleUserClick","selectChat","isObjEmpty","show","role","rows","defaultValue","label","checked","name","defaultChecked","searchFilterFunction","toLowerCase","includes","filteredChatsArr","filter","filteredContactssArr","formatDateToMonthShort","lastMessage","Date","unseenMsgs","pill","renderChats","renderContacts","UserProfileSidebar","user","userSidebarRight","AppChat","useSelector","state","setUser","setSidebar","setUserSidebarRight","setUserSidebarLeft","getChatContacts","getUserProfile","Chat"],"mappings":"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","file":"static/js/78.dc373c6a.chunk.js","sourcesContent":["// ** React Imports\r\nimport ReactDOM from 'react-dom'\r\nimport { useState, useEffect, useRef } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Store & Actions\r\nimport { sendMsg } from './store'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { MessageSquare, Menu, PhoneCall, Video, Search, MoreVertical, Mic, Image, Send } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  InputGroup,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  InputGroupText,\r\n  UncontrolledDropdown\r\n} from 'reactstrap'\r\n\r\nconst ChatLog = props => {\r\n  // ** Props & Store\r\n  const { handleUser, handleUserSidebarRight, handleSidebar, store, userSidebarLeft } = props\r\n  const { userProfile, selectedUser } = store\r\n\r\n  // ** Refs & Dispatch\r\n  const chatArea = useRef(null)\r\n  const dispatch = useDispatch()\r\n\r\n  // ** State\r\n  const [msg, setMsg] = useState('')\r\n\r\n  // ** Scroll to chat bottom\r\n  const scrollToBottom = () => {\r\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\r\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\r\n  }\r\n\r\n  // ** If user chat is not empty scrollToBottom\r\n  useEffect(() => {\r\n    const selectedUserLen = Object.keys(selectedUser).length\r\n\r\n    if (selectedUserLen) {\r\n      scrollToBottom()\r\n    }\r\n  }, [selectedUser])\r\n\r\n  // ** Formats chat data based on sender\r\n  const formattedChatData = () => {\r\n    let chatLog = []\r\n    if (selectedUser.chat) {\r\n      chatLog = selectedUser.chat.chat\r\n    }\r\n\r\n    const formattedChatLog = []\r\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\r\n    let msgGroup = {\r\n      senderId: chatMessageSenderId,\r\n      messages: []\r\n    }\r\n    chatLog.forEach((msg, index) => {\r\n      if (chatMessageSenderId === msg.senderId) {\r\n        msgGroup.messages.push({\r\n          msg: msg.message,\r\n          time: msg.time\r\n        })\r\n      } else {\r\n        chatMessageSenderId = msg.senderId\r\n        formattedChatLog.push(msgGroup)\r\n        msgGroup = {\r\n          senderId: msg.senderId,\r\n          messages: [\r\n            {\r\n              msg: msg.message,\r\n              time: msg.time\r\n            }\r\n          ]\r\n        }\r\n      }\r\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\r\n    })\r\n    return formattedChatLog\r\n  }\r\n\r\n  // ** Renders user chat\r\n  const renderChats = () => {\r\n    return formattedChatData().map((item, index) => {\r\n      return (\r\n        <div\r\n          key={index}\r\n          className={classnames('chat', {\r\n            'chat-left': item.senderId !== 11\r\n          })}\r\n        >\r\n          <div className='chat-avatar'>\r\n            <Avatar\r\n              imgWidth={36}\r\n              imgHeight={36}\r\n              className='box-shadow-1 cursor-pointer'\r\n              img={item.senderId === 11 ? userProfile.avatar : selectedUser.contact.avatar}\r\n            />\r\n          </div>\r\n\r\n          <div className='chat-body'>\r\n            {item.messages.map(chat => (\r\n              <div key={chat.msg} className='chat-content'>\r\n                <p>{chat.msg}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  // ** Opens right sidebar & handles its data\r\n  const handleAvatarClick = obj => {\r\n    handleUserSidebarRight()\r\n    handleUser(obj)\r\n  }\r\n\r\n  // ** On mobile screen open left sidebar on Start Conversation Click\r\n  const handleStartConversation = () => {\r\n    if (!Object.keys(selectedUser).length && !userSidebarLeft && window.innerWidth < 992) {\r\n      handleSidebar()\r\n    }\r\n  }\r\n\r\n  // ** Sends New Msg\r\n  const handleSendMsg = e => {\r\n    e.preventDefault()\r\n    if (msg.trim().length) {\r\n      dispatch(sendMsg({ ...selectedUser, message: msg }))\r\n      setMsg('')\r\n    }\r\n  }\r\n\r\n  // ** ChatWrapper tag based on chat's length\r\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\r\n\r\n  return (\r\n    <div className='chat-app-window'>\r\n      <div className={classnames('start-chat-area', { 'd-none': Object.keys(selectedUser).length })}>\r\n        <div className='start-chat-icon mb-1'>\r\n          <MessageSquare />\r\n        </div>\r\n        <h4 className='sidebar-toggle start-chat-text' onClick={handleStartConversation}>\r\n          Start Conversation\r\n        </h4>\r\n      </div>\r\n      {Object.keys(selectedUser).length ? (\r\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\r\n          <div className='chat-navbar'>\r\n            <header className='chat-header'>\r\n              <div className='d-flex align-items-center'>\r\n                <div className='sidebar-toggle d-block d-lg-none me-1' onClick={handleSidebar}>\r\n                  <Menu size={21} />\r\n                </div>\r\n                <Avatar\r\n                  imgHeight='36'\r\n                  imgWidth='36'\r\n                  img={selectedUser.contact.avatar}\r\n                  status={selectedUser.contact.status}\r\n                  className='avatar-border user-profile-toggle m-0 me-1'\r\n                  onClick={() => handleAvatarClick(selectedUser.contact)}\r\n                />\r\n                <h6 className='mb-0'>{selectedUser.contact.fullName}</h6>\r\n              </div>\r\n              <div className='d-flex align-items-center'>\r\n                <PhoneCall size={18} className='cursor-pointer d-sm-block d-none me-1' />\r\n                <Video size={18} className='cursor-pointer d-sm-block d-none me-1' />\r\n                <Search size={18} className='cursor-pointer d-sm-block d-none' />\r\n                <UncontrolledDropdown className='more-options-dropdown'>\r\n                  <DropdownToggle className='btn-icon' color='transparent' size='sm'>\r\n                    <MoreVertical size='18' />\r\n                  </DropdownToggle>\r\n                  <DropdownMenu end>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      View Contact\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Mute Notifications\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Block Contact\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Clear Chat\r\n                    </DropdownItem>\r\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\r\n                      Report\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </div>\r\n            </header>\r\n          </div>\r\n\r\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\r\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> : null}\r\n          </ChatWrapper>\r\n\r\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\r\n            <InputGroup className='input-group-merge me-1 form-send-message'>\r\n              <InputGroupText>\r\n                <Mic className='cursor-pointer' size={14} />\r\n              </InputGroupText>\r\n              <Input\r\n                value={msg}\r\n                onChange={e => setMsg(e.target.value)}\r\n                placeholder='Type your message or use speech to text'\r\n              />\r\n              <InputGroupText>\r\n                <Label className='attachment-icon mb-0' for='attach-doc'>\r\n                  <Image className='cursor-pointer text-secondary' size={14} />\r\n                  <input type='file' id='attach-doc' hidden />\r\n                </Label>\r\n              </InputGroupText>\r\n            </InputGroup>\r\n            <Button className='send' color='primary'>\r\n              <Send size={14} className='d-lg-none' />\r\n              <span className='d-none d-lg-block'>Send</span>\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatLog\r\n","// ** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Store & Actions\r\nimport { selectChat } from './store'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n// ** Utils\r\nimport { formatDateToMonthShort, isObjEmpty } from '@utils'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { X, Search, CheckSquare, Bell, User, Trash } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { CardText, InputGroup, InputGroupText, Badge, Input, Button, Label } from 'reactstrap'\r\n\r\nconst SidebarLeft = props => {\r\n  // ** Props & Store\r\n  const { store, sidebar, handleSidebar, userSidebarLeft, handleUserSidebarLeft } = props\r\n  const { chats, contacts, userProfile } = store\r\n\r\n  // ** Dispatch\r\n  const dispatch = useDispatch()\r\n\r\n  // ** State\r\n  const [query, setQuery] = useState('')\r\n  const [about, setAbout] = useState('')\r\n  const [active, setActive] = useState(0)\r\n  const [status, setStatus] = useState('online')\r\n  const [filteredChat, setFilteredChat] = useState([])\r\n  const [filteredContacts, setFilteredContacts] = useState([])\r\n\r\n  // ** Handles User Chat Click\r\n  const handleUserClick = id => {\r\n    dispatch(selectChat(id))\r\n    setActive(id)\r\n    if (sidebar === true) {\r\n      handleSidebar()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isObjEmpty(store.selectedUser)) {\r\n      if (store.selectedUser.chat) {\r\n        setActive(store.selectedUser.chat.id)\r\n      } else {\r\n        setActive(store.selectedUser.contact.id)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // ** Renders Chat\r\n  const renderChats = () => {\r\n    if (chats && chats.length) {\r\n      if (query.length && !filteredChat.length) {\r\n        return (\r\n          <li className='no-results show'>\r\n            <h6 className='mb-0'>No Chats Found</h6>\r\n          </li>\r\n        )\r\n      } else {\r\n        const arrToMap = query.length && filteredChat.length ? filteredChat : chats\r\n\r\n        return arrToMap.map(item => {\r\n          const time = formatDateToMonthShort(item.chat.lastMessage ? item.chat.lastMessage.time : new Date())\r\n\r\n          return (\r\n            <li\r\n              key={item.id}\r\n              onClick={() => handleUserClick(item.id)}\r\n              className={classnames({\r\n                active: active === item.id\r\n              })}\r\n            >\r\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' status={item.status} />\r\n              <div className='chat-info flex-grow-1'>\r\n                <h5 className='mb-0'>{item.fullName}</h5>\r\n                <CardText className='text-truncate'>\r\n                  {item.chat.lastMessage ? item.chat.lastMessage.message : chats[chats.length - 1].message}\r\n                </CardText>\r\n              </div>\r\n              <div className='chat-meta text-nowrap'>\r\n                <small className='float-end mb-25 chat-time ms-25'>{time}</small>\r\n                {item.chat.unseenMsgs >= 1 ? (\r\n                  <Badge className='float-end' color='danger' pill>\r\n                    {item.chat.unseenMsgs}\r\n                  </Badge>\r\n                ) : null}\r\n              </div>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // ** Renders Contact\r\n  const renderContacts = () => {\r\n    if (contacts && contacts.length) {\r\n      if (query.length && !filteredContacts.length) {\r\n        return (\r\n          <li className='no-results show'>\r\n            <h6 className='mb-0'>No Chats Found</h6>\r\n          </li>\r\n        )\r\n      } else {\r\n        const arrToMap = query.length && filteredContacts.length ? filteredContacts : contacts\r\n        return arrToMap.map(item => {\r\n          return (\r\n            <li key={item.fullName} onClick={() => handleUserClick(item.id)}>\r\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' />\r\n              <div className='chat-info flex-grow-1'>\r\n                <h5 className='mb-0'>{item.fullName}</h5>\r\n                <CardText className='text-truncate'>{item.about}</CardText>\r\n              </div>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  // ** Handles Filter\r\n  const handleFilter = e => {\r\n    setQuery(e.target.value)\r\n    const searchFilterFunction = contact => contact.fullName.toLowerCase().includes(e.target.value.toLowerCase())\r\n    const filteredChatsArr = chats.filter(searchFilterFunction)\r\n    const filteredContactssArr = contacts.filter(searchFilterFunction)\r\n    setFilteredChat([...filteredChatsArr])\r\n    setFilteredContacts([...filteredContactssArr])\r\n  }\r\n\r\n  const renderAboutCount = () => {\r\n    if (userProfile && userProfile.about && userProfile.about.length && about.length === 0) {\r\n      return userProfile.about.length\r\n    } else {\r\n      return about.length\r\n    }\r\n  }\r\n\r\n  return store ? (\r\n    <div className='sidebar-left'>\r\n      <div className='sidebar'>\r\n        <div\r\n          className={classnames('chat-profile-sidebar', {\r\n            show: userSidebarLeft\r\n          })}\r\n        >\r\n          <header className='chat-profile-header'>\r\n            <div className='close-icon' onClick={handleUserSidebarLeft}>\r\n              <X size={14} />\r\n            </div>\r\n            <div className='header-profile-sidebar'>\r\n              <Avatar className='box-shadow-1 avatar-border' img={userProfile.avatar} status={status} size='xl' />\r\n              <h4 className='chat-user-name'>{userProfile.fullName}</h4>\r\n              <span className='user-post'>{userProfile.role}</span>\r\n            </div>\r\n          </header>\r\n          <PerfectScrollbar className='profile-sidebar-area' options={{ wheelPropagation: false }}>\r\n            <h6 className='section-label mb-1'>About</h6>\r\n            <div className='about-user'>\r\n              <Input\r\n                rows='5'\r\n                type='textarea'\r\n                defaultValue={userProfile.about}\r\n                onChange={e => setAbout(e.target.value)}\r\n                className={classnames('char-textarea', {\r\n                  'text-danger': about && about.length > 120\r\n                })}\r\n              />\r\n              <small className='counter-value float-end'>\r\n                <span className='char-count'>{renderAboutCount()}</span> / 120\r\n              </small>\r\n            </div>\r\n            <h6 className='section-label mb-1 mt-3'>Status</h6>\r\n            <ul className='list-unstyled user-status'>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-success'>\r\n                  <Input\r\n                    type='radio'\r\n                    label='Online'\r\n                    id='user-online'\r\n                    checked={status === 'online'}\r\n                    onChange={() => setStatus('online')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-online'>\r\n                    Online\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-danger'>\r\n                  <Input\r\n                    type='radio'\r\n                    id='user-busy'\r\n                    label='Do Not Disturb'\r\n                    checked={status === 'busy'}\r\n                    onChange={() => setStatus('busy')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-busy'>\r\n                    Busy\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-warning'>\r\n                  <Input\r\n                    type='radio'\r\n                    label='Away'\r\n                    id='user-away'\r\n                    checked={status === 'away'}\r\n                    onChange={() => setStatus('away')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-away'>\r\n                    Away\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n              <li className='pb-1'>\r\n                <div className='form-check form-check-secondary'>\r\n                  <Input\r\n                    type='radio'\r\n                    label='Offline'\r\n                    id='user-offline'\r\n                    checked={status === 'offline'}\r\n                    onChange={() => setStatus('offline')}\r\n                  />\r\n                  <Label className='form-check-label' for='user-offline'>\r\n                    Offline\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <h6 className='section-label mb-1 mt-2'>Settings</h6>\r\n            <ul className='list-unstyled'>\r\n              <li className='d-flex justify-content-between align-items-center mb-1'>\r\n                <div className='d-flex align-items-center'>\r\n                  <CheckSquare className='me-75' size='18' />\r\n                  <span className='align-middle'>Two-step Verification</span>\r\n                </div>\r\n                <div className='form-switch'>\r\n                  <Input type='switch' id='verification' name='verification' defaultChecked />\r\n                </div>\r\n              </li>\r\n              <li className='d-flex justify-content-between align-items-center mb-1'>\r\n                <div className='d-flex align-items-center'>\r\n                  <Bell className='me-75' size='18' />\r\n                  <span className='align-middle'>Notification</span>\r\n                </div>\r\n                <div className='form-switch'>\r\n                  <Input type='switch' id='notifications' name='notifications' />\r\n                </div>\r\n              </li>\r\n              <li className='d-flex align-items-center cursor-pointer mb-1'>\r\n                <User className='me-75' size='18' />\r\n                <span className='align-middle'>Invite Friends</span>\r\n              </li>\r\n              <li className='d-flex align-items-center cursor-pointer'>\r\n                <Trash className='me-75' size='18' />\r\n                <span className='align-middle'>Delete Account</span>\r\n              </li>\r\n            </ul>\r\n            <div className='mt-3'>\r\n              <Button color='primary'>Logout</Button>\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </div>\r\n        <div\r\n          className={classnames('sidebar-content', {\r\n            show: sidebar === true\r\n          })}\r\n        >\r\n          <div className='sidebar-close-icon' onClick={handleSidebar}>\r\n            <X size={14} />\r\n          </div>\r\n          <div className='chat-fixed-search'>\r\n            <div className='d-flex align-items-center w-100'>\r\n              <div className='sidebar-profile-toggle' onClick={handleUserSidebarLeft}>\r\n                {Object.keys(userProfile).length ? (\r\n                  <Avatar\r\n                    className='avatar-border'\r\n                    img={userProfile.avatar}\r\n                    status={status}\r\n                    imgHeight='42'\r\n                    imgWidth='42'\r\n                  />\r\n                ) : null}\r\n              </div>\r\n              <InputGroup className='input-group-merge ms-1 w-100'>\r\n                <InputGroupText className='round'>\r\n                  <Search className='text-muted' size={14} />\r\n                </InputGroupText>\r\n                <Input\r\n                  value={query}\r\n                  className='round'\r\n                  placeholder='Search or start a new chat'\r\n                  onChange={handleFilter}\r\n                />\r\n              </InputGroup>\r\n            </div>\r\n          </div>\r\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\r\n            <h4 className='chat-list-title'>Chats</h4>\r\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\r\n            <h4 className='chat-list-title'>Contacts</h4>\r\n            <ul className='chat-users-list contact-list media-list'>{renderContacts()}</ul>\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null\r\n}\r\n\r\nexport default SidebarLeft\r\n","// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\n// ** Reactstrap Imports\r\nimport { X, Mail, PhoneCall, Clock, Tag, Star, Image, Trash, Slash } from 'react-feather'\r\n\r\nconst UserProfileSidebar = props => {\r\n  // ** Props\r\n  const { user, handleUserSidebarRight, userSidebarRight } = props\r\n\r\n  return (\r\n    <div className={classnames('user-profile-sidebar', { show: userSidebarRight === true })}>\r\n      <header className='user-profile-header'>\r\n        <span className='close-icon' onClick={handleUserSidebarRight}>\r\n          <X size={14} />\r\n        </span>\r\n        <div className='header-profile-sidebar'>\r\n          <Avatar\r\n            className='box-shadow-1 avatar-border'\r\n            size='xl'\r\n            status={user.status}\r\n            img={user.avatar}\r\n            imgHeight='70'\r\n            imgWidth='70'\r\n          />\r\n          <h4 className='chat-user-name'>{user.fullName}</h4>\r\n          <span className='user-post'>{user.role}</span>\r\n        </div>\r\n      </header>\r\n      <PerfectScrollbar className='user-profile-sidebar-area' options={{ wheelPropagation: false }}>\r\n        <h6 className='section-label mb-1'>About</h6>\r\n        <p>{user.about}</p>\r\n        <div className='personal-info'>\r\n          <h6 className='section-label mb-1 mt-3'>Personal Information</h6>\r\n          <ul className='list-unstyled'>\r\n            <li className='mb-1'>\r\n              <Mail className='me-75' size={17} />\r\n              <span className='align-middle'>lucifer@email.com</span>\r\n            </li>\r\n            <li className='mb-1'>\r\n              <PhoneCall className='me-50' size={17} />\r\n              <span className='align-middle'> +1(123) 456 - 7890</span>\r\n            </li>\r\n            <li>\r\n              <Clock className='me-50' size={17} />\r\n              <span className='align-middle'> Mon - Fri 10AM - 8PM</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='more-options'>\r\n          <h6 className='section-label mb-1 mt-3'>Options</h6>\r\n          <ul className='list-unstyled'>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Tag className='me-50' size={17} />\r\n              <span className='align-middle'> Add Tag</span>\r\n            </li>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Star className='me-50' size={17} />\r\n              <span className='align-middle'> Important Contact</span>\r\n            </li>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Image className='me-50' size={17} />\r\n              <span className='align-middle'> Shared Media</span>\r\n            </li>\r\n            <li className='cursor-pointer mb-1'>\r\n              <Trash className='me-50' size={17} />\r\n              <span className='align-middle'> Delete Contact</span>\r\n            </li>\r\n            <li className='cursor-pointer'>\r\n              <Slash className='me-75' size={17} />\r\n              <span className='align-middle'>Block Contact</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </PerfectScrollbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserProfileSidebar\r\n","// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Chat App Component Imports\r\nimport Chat from './Chat'\r\nimport Sidebar from './SidebarLeft'\r\nimport UserProfileSidebar from './UserProfileSidebar'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\n\r\n// ** Store & Actions\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUserProfile, getChatContacts } from './store'\r\n\r\nimport '@styles/base/pages/app-chat.scss'\r\nimport '@styles/base/pages/app-chat-list.scss'\r\n\r\nconst AppChat = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.chat)\r\n\r\n  // ** States\r\n  const [user, setUser] = useState({})\r\n  const [sidebar, setSidebar] = useState(false)\r\n  const [userSidebarRight, setUserSidebarRight] = useState(false)\r\n  const [userSidebarLeft, setUserSidebarLeft] = useState(false)\r\n\r\n  // ** Sidebar & overlay toggle functions\r\n  const handleSidebar = () => setSidebar(!sidebar)\r\n  const handleUserSidebarLeft = () => setUserSidebarLeft(!userSidebarLeft)\r\n  const handleUserSidebarRight = () => setUserSidebarRight(!userSidebarRight)\r\n  const handleOverlayClick = () => {\r\n    setSidebar(false)\r\n    setUserSidebarRight(false)\r\n    setUserSidebarLeft(false)\r\n  }\r\n\r\n  // ** Set user function for Right Sidebar\r\n  const handleUser = obj => setUser(obj)\r\n\r\n  // ** Get data on Mount\r\n  useEffect(() => {\r\n    dispatch(getChatContacts())\r\n    dispatch(getUserProfile())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar\r\n        store={store}\r\n        sidebar={sidebar}\r\n        handleSidebar={handleSidebar}\r\n        userSidebarLeft={userSidebarLeft}\r\n        handleUserSidebarLeft={handleUserSidebarLeft}\r\n      />\r\n      <div className='content-right'>\r\n        <div className='content-wrapper'>\r\n          <div className='content-body'>\r\n            <div\r\n              className={classnames('body-content-overlay', {\r\n                show: userSidebarRight === true || sidebar === true || userSidebarLeft === true\r\n              })}\r\n              onClick={handleOverlayClick}\r\n            ></div>\r\n            <Chat\r\n              store={store}\r\n              handleUser={handleUser}\r\n              handleSidebar={handleSidebar}\r\n              userSidebarLeft={userSidebarLeft}\r\n              handleUserSidebarRight={handleUserSidebarRight}\r\n            />\r\n            <UserProfileSidebar\r\n              user={user}\r\n              userSidebarRight={userSidebarRight}\r\n              handleUserSidebarRight={handleUserSidebarRight}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AppChat\r\n"],"sourceRoot":""}