{"version":3,"sources":["@core/auth/jwt/jwtDefaultConfig.js","@core/auth/jwt/jwtService.js","auth/jwt/useJwt.js","@core/auth/jwt/useJwt.js","views/pages/authentication/Register.js","@core/components/input-password-toggle/index.js"],"names":["loginEndpoint","registerEndpoint","refreshEndpoint","logoutEndpoint","tokenType","storageTokenKeyName","storageRefreshTokenKeyName","JwtService","constructor","jwtOverrideConfig","jwtConfig","jwtDefaultConfig","isAlreadyFetchingAccessToken","subscribers","this","axios","interceptors","request","use","config","accessToken","getToken","headers","Authorization","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","resolve","addSubscriber","filter","callback","push","localStorage","getItem","getRefreshToken","value","setItem","login","args","post","register","jwt","defaultValues","email","terms","username","password","Register","ability","useContext","AbilityContext","skin","useSkin","navigate","useNavigate","dispatch","useDispatch","control","setError","handleSubmit","formState","errors","useForm","illustration","source","require","default","className","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","action","onSubmit","tempData","Object","values","every","field","length","useJwt","res","property","type","message","user","update","handleLogin","catch","err","console","log","key","for","name","render","autoFocus","placeholder","invalid","checked","href","block","color","size","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","useState","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/98.afb2994e.chunk.js","sourcesContent":["// ** Auth Endpoints\r\nexport default {\r\n  loginEndpoint: '/jwt/login',\r\n  registerEndpoint: '/jwt/register',\r\n  refreshEndpoint: '/jwt/refresh-token',\r\n  logoutEndpoint: '/jwt/logout',\r\n\r\n  // ** This will be prefixed in authorization header with token\r\n  // ? e.g. Authorization: Bearer <token>\r\n  tokenType: 'Bearer',\r\n\r\n  // ** Value of this property will be used as key to store JWT token in storage\r\n  storageTokenKeyName: 'accessToken',\r\n  storageRefreshTokenKeyName: 'refreshToken'\r\n}\r\n","import axios from 'axios'\r\nimport jwtDefaultConfig from './jwtDefaultConfig'\r\n\r\nexport default class JwtService {\r\n  // ** jwtConfig <= Will be used by this service\r\n  jwtConfig = { ...jwtDefaultConfig }\r\n\r\n  // ** For Refreshing Token\r\n  isAlreadyFetchingAccessToken = false\r\n\r\n  // ** For Refreshing Token\r\n  subscribers = []\r\n\r\n  constructor(jwtOverrideConfig) {\r\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\r\n\r\n    // ** Request Interceptor\r\n    axios.interceptors.request.use(\r\n      config => {\r\n        // ** Get token from localStorage\r\n        const accessToken = this.getToken()\r\n\r\n        // ** If token is present add it to request's Authorization Header\r\n        if (accessToken) {\r\n          // ** eslint-disable-next-line no-param-reassign\r\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\r\n        }\r\n        return config\r\n      },\r\n      error => Promise.reject(error)\r\n    )\r\n\r\n    // ** Add request/response interceptor\r\n    axios.interceptors.response.use(\r\n      response => response,\r\n      error => {\r\n        // ** const { config, response: { status } } = error\r\n        const { config, response } = error\r\n        const originalRequest = config\r\n\r\n        // ** if (status === 401) {\r\n        if (response && response.status === 401) {\r\n          if (!this.isAlreadyFetchingAccessToken) {\r\n            this.isAlreadyFetchingAccessToken = true\r\n            this.refreshToken().then(r => {\r\n              this.isAlreadyFetchingAccessToken = false\r\n\r\n              // ** Update accessToken in localStorage\r\n              this.setToken(r.data.accessToken)\r\n              this.setRefreshToken(r.data.refreshToken)\r\n\r\n              this.onAccessTokenFetched(r.data.accessToken)\r\n            })\r\n          }\r\n          const retryOriginalRequest = new Promise(resolve => {\r\n            this.addSubscriber(accessToken => {\r\n              // ** Make sure to assign accessToken according to your response.\r\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\r\n              // ** Change Authorization header\r\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\r\n              resolve(this.axios(originalRequest))\r\n            })\r\n          })\r\n          return retryOriginalRequest\r\n        }\r\n        return Promise.reject(error)\r\n      }\r\n    )\r\n  }\r\n\r\n  onAccessTokenFetched(accessToken) {\r\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\r\n  }\r\n\r\n  addSubscriber(callback) {\r\n    this.subscribers.push(callback)\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\r\n  }\r\n\r\n  getRefreshToken() {\r\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\r\n  }\r\n\r\n  setToken(value) {\r\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\r\n  }\r\n\r\n  setRefreshToken(value) {\r\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\r\n  }\r\n\r\n  login(...args) {\r\n    return axios.post(this.jwtConfig.loginEndpoint, ...args)\r\n  }\r\n\r\n  register(...args) {\r\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\r\n  }\r\n\r\n  refreshToken() {\r\n    return axios.post(this.jwtConfig.refreshEndpoint, {\r\n      refreshToken: this.getRefreshToken()\r\n    })\r\n  }\r\n}\r\n","// ** Core JWT Import\r\nimport useJwt from '@src/@core/auth/jwt/useJwt'\r\n\r\nconst { jwt } = useJwt({})\r\n\r\nexport default jwt\r\n","// ** JWT Service Import\r\nimport JwtService from './jwtService'\r\n\r\n// ** Export Service as useJwt\r\nexport default function useJwt(jwtOverrideConfig) {\r\n  const jwt = new JwtService(jwtOverrideConfig)\r\n\r\n  return {\r\n    jwt\r\n  }\r\n}\r\n","// ** React Imports\r\nimport { useContext } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n// ** Custom Hooks\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\n// ** Store & Actions\r\nimport { useDispatch } from 'react-redux'\r\nimport { handleLogin } from '@store/authentication'\r\n\r\n// ** Third Party Components\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Facebook, Twitter, Mail, GitHub } from 'react-feather'\r\n\r\n// ** Context\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\n\r\n// ** Custom Components\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardTitle, CardText, Label, Button, Form, Input, FormFeedback } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/pages/page-authentication.scss'\r\n\r\nconst defaultValues = {\r\n  email: '',\r\n  terms: false,\r\n  username: '',\r\n  password: ''\r\n}\r\n\r\nconst Register = () => {\r\n  // ** Hooks\r\n  const ability = useContext(AbilityContext)\r\n  const { skin } = useSkin()\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch()\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({ defaultValues })\r\n\r\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n  const onSubmit = data => {\r\n    const tempData = { ...data }\r\n    delete tempData.terms\r\n    if (Object.values(tempData).every(field => field.length > 0) && data.terms === true) {\r\n      const { username, email, password } = data\r\n      useJwt\r\n        .register({ username, email, password })\r\n        .then(res => {\r\n          if (res.data.error) {\r\n            for (const property in res.data.error) {\r\n              if (res.data.error[property] !== null) {\r\n                setError(property, {\r\n                  type: 'manual',\r\n                  message: res.data.error[property]\r\n                })\r\n              }\r\n            }\r\n          } else {\r\n            const data = { ...res.data.user, accessToken: res.data.accessToken }\r\n            ability.update(res.data.user.ability)\r\n            dispatch(handleLogin(data))\r\n            navigate('/')\r\n          }\r\n        })\r\n        .catch(err => console.log(err))\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key].length === 0) {\r\n          setError(key, {\r\n            type: 'manual',\r\n            message: `Please enter a valid ${key}`\r\n          })\r\n        }\r\n        if (key === 'terms' && data.terms === false) {\r\n          setError('terms', {\r\n            type: 'manual'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-cover'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n            <defs>\r\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                <stop stopColor='#000000' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n            </defs>\r\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                  <path\r\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                    id='Path'\r\n                    className='text-primary'\r\n                    style={{ fill: 'currentColor' }}\r\n                  ></path>\r\n                  <path\r\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                    id='Path'\r\n                    fill='url(#linearGradient-1)'\r\n                    opacity='0.2'\r\n                  ></path>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.049999997'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.099999994'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-3'\r\n                    fill='url(#linearGradient-2)'\r\n                    opacity='0.099999994'\r\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                  ></polygon>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <h2 className='brand-text text-primary ms-1'>Vuexy</h2>\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login Cover' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardTitle tag='h2' className='fw-bold mb-1'>\r\n              Adventure starts here 🚀\r\n            </CardTitle>\r\n            <CardText className='mb-2'>Make your app management easy and fun!</CardText>\r\n\r\n            <Form action='/' className='auth-register-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='register-username'>\r\n                  Username\r\n                </Label>\r\n                <Controller\r\n                  id='username'\r\n                  name='username'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Input autoFocus placeholder='johndoe' invalid={errors.username && true} {...field} />\r\n                  )}\r\n                />\r\n                {errors.username ? <FormFeedback>{errors.username.message}</FormFeedback> : null}\r\n              </div>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='register-email'>\r\n                  Email\r\n                </Label>\r\n                <Controller\r\n                  id='email'\r\n                  name='email'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Input type='email' placeholder='john@example.com' invalid={errors.email && true} {...field} />\r\n                  )}\r\n                />\r\n                {errors.email ? <FormFeedback>{errors.email.message}</FormFeedback> : null}\r\n              </div>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='register-password'>\r\n                  Password\r\n                </Label>\r\n                <Controller\r\n                  id='password'\r\n                  name='password'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='form-check mb-1'>\r\n                <Controller\r\n                  name='terms'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='terms' type='checkbox' checked={field.value} invalid={errors.terms && true} />\r\n                  )}\r\n                />\r\n                <Label className='form-check-label' for='terms'>\r\n                  I agree to\r\n                  <a className='ms-25' href='/' onClick={e => e.preventDefault()}>\r\n                    privacy policy & terms\r\n                  </a>\r\n                </Label>\r\n              </div>\r\n              <Button type='submit' block color='primary'>\r\n                Sign up\r\n              </Button>\r\n            </Form>\r\n            <p className='text-center mt-2'>\r\n              <span className='me-25'>Already have an account?</span>\r\n              <Link to='/login'>\r\n                <span>Sign in instead</span>\r\n              </Link>\r\n            </p>\r\n            <div className='divider my-2'>\r\n              <div className='divider-text'>or</div>\r\n            </div>\r\n            <div className='auth-footer-btn d-flex justify-content-center'>\r\n              <Button color='facebook'>\r\n                <Facebook size={14} />\r\n              </Button>\r\n              <Button color='twitter'>\r\n                <Twitter size={14} />\r\n              </Button>\r\n              <Button color='google'>\r\n                <Mail size={14} />\r\n              </Button>\r\n              <Button className='me-0' color='github'>\r\n                <GitHub size={14} />\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n","// ** React Imports\r\nimport { Fragment, useState, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className='form-label' for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          'is-invalid': invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}