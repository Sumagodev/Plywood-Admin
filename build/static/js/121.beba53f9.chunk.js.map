{"version":3,"sources":["views/components/spinners/SpinnerFlex.js","views/components/spinners/SpinnerFloat.js","views/components/spinners/SpinnerSizes.js","views/components/spinners/SpinnerGrowing.js","views/components/spinners/SpinnerBorder.js","views/components/spinners/SpinnerColors.js","views/components/spinners/SpinnerButtons.js","views/components/spinners/SpinnerGrowingColored.js","views/components/spinners/SpinnerTextAlignment.js","views/components/spinners/SpinnerSourceCode.js","views/components/spinners/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["SpinnerFlex","className","SpinnerFloat","SpinnerSizes","size","type","style","height","width","SpinnerGrowing","SpinnerBorder","SpinnerColors","color","SpinnerButton","outline","disabled","SpinnerGrowColors","SpinnerTextAlignment","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","Spinners","useEffect","Prism","highlightAll","title","data","md","sm","code","SpinnerButtons","BreadCrumbs","props","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","end","CardSnippet","children","noBody","iconCode","isOpen","setIsOpen","useState","IconCode","CardBody","onClick"],"mappings":"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","file":"static/js/121.beba53f9.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFlex = () => {\n  return (\n    <Fragment>\n      <div className='d-flex justify-content-center my-1'>\n        <Spinner />\n      </div>\n\n      <div className='d-flex justify-content-between align-items-center'>\n        <strong>Loading...</strong>\n        <Spinner />\n      </div>\n    </Fragment>\n  )\n}\nexport default SpinnerFlex\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFloat = () => {\n  return <Spinner className='float-end mb-2' />\n}\nexport default SpinnerFloat\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerSizes = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <div>\n        <Spinner className='me-25' size='sm' />\n        <Spinner type='grow' size='sm' />\n      </div>\n      <div>\n        <Spinner className='me-25' />\n        <Spinner type='grow' />\n      </div>\n      <div>\n        <Spinner className='me-25' style={{ height: '3rem', width: '3rem' }} />\n        <Spinner type='grow' style={{ height: '3rem', width: '3rem' }} />\n      </div>\n    </div>\n  )\n}\nexport default SpinnerSizes\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowing = () => {\n  return <Spinner type='grow' />\n}\nexport default SpinnerGrowing\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerBorder = () => {\n  return <Spinner />\n}\nexport default SpinnerBorder\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerColors = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Spinner color='primary' />\n      <Spinner color='secondary' />\n      <Spinner color='success' />\n      <Spinner color='danger' />\n      <Spinner color='warning' />\n      <Spinner color='info' />\n      <Spinner color='light' />\n      <Spinner color='dark' />\n    </div>\n  )\n}\nexport default SpinnerColors\n","// ** Reactstrap Imports\nimport { Button, Spinner } from 'reactstrap'\n\nconst SpinnerButton = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' />\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' type='grow' />\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' type='grow' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n    </div>\n  )\n}\nexport default SpinnerButton\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowColors = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Spinner type='grow' color='primary' />\n      <Spinner type='grow' color='secondary' />\n      <Spinner type='grow' color='success' />\n      <Spinner type='grow' color='danger' />\n      <Spinner type='grow' color='warning' />\n      <Spinner type='grow' color='info' />\n      <Spinner type='grow' color='light' />\n      <Spinner type='grow' color='dark' />\n    </div>\n  )\n}\nexport default SpinnerGrowColors\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerTextAlignment = () => {\n  return (\n    <div className='text-center'>\n      <Spinner />\n    </div>\n  )\n}\nexport default SpinnerTextAlignment\n","export const spinnerBorder = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerBorder = () => {\n  return <Spinner />\n}\nexport default SpinnerBorder\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerColors = () => {\n  return (\n    <React.Fragment>\n      <Spinner color='primary' />\n      <Spinner color='secondary' />\n      <Spinner color='success' />\n      <Spinner color='danger' />\n      <Spinner color='warning' />\n      <Spinner color='info' />\n      <Spinner color='light' />\n      <Spinner color='dark' />\n    </React.Fragment>\n  )\n}\nexport default SpinnerColors\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowing = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowing = () => {\n  return <Spinner type='grow' color='primary' />\n}\nexport default SpinnerGrowing\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowColors = () => {\n  return (\n    <React.Fragment>\n      <Spinner type='grow' color='primary' />\n      <Spinner type='grow' color='secondary' />\n      <Spinner type='grow' color='success' />\n      <Spinner type='grow' color='danger' />\n      <Spinner type='grow' color='warning' />\n      <Spinner type='grow' color='info' />\n      <Spinner type='grow' color='light' />\n      <Spinner type='grow' color='dark' />\n    </React.Fragment>\n  )\n}\nexport default SpinnerGrowColors`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFlex = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFlex = () => {\n  return (\n    <React.Fragment>\n      <div className='d-flex justify-content-center my-1'>\n        <Spinner />\n      </div>\n\n      <div className='d-flex justify-content-between align-items-center'>\n        <strong>Loading...</strong>\n        <Spinner />\n      </div>\n    </React.Fragment>\n  )\n}\nexport default SpinnerFlex\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFloat = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFloat = () => {\n  return <Spinner className='float-end mb-2' />\n}\nexport default SpinnerFloat\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerTextAlignment = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerTextAlignment = () => {\n  return (\n    <div className='text-center'>\n      <Spinner />\n    </div>\n  )\n}\nexport default SpinnerTextAlignment\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerSizes = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerSizes = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <div>\n        <Spinner className='me-25' size='sm' />\n        <Spinner type='grow' size='sm' />\n      </div>\n      <div>\n        <Spinner className='me-25' />\n        <Spinner type='grow' />\n      </div>\n      <div>\n        <Spinner className='me-25' size='lg' />\n        <Spinner type='grow' size='lg' />\n      </div>\n    </div>\n  )\n}\nexport default SpinnerSizes\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerButton = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Button, Spinner } from 'reactstrap'\n\nconst SpinnerButton = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary'>\n        <Spinner color='white' size='sm' />\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' type='grow' />\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' type='grow' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n    </div>\n  )\n}\nexport default SpinnerButton\n`}\n    </code>\n  </pre>\n)\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport SpinnerFlex from './SpinnerFlex'\nimport SpinnerFloat from './SpinnerFloat'\nimport SpinnerSizes from './SpinnerSizes'\nimport SpinnerGrow from './SpinnerGrowing'\nimport SpinnerBorder from './SpinnerBorder'\nimport SpinnerColors from './SpinnerColors'\nimport SpinnerButtons from './SpinnerButtons'\nimport SpinnerGrowColors from './SpinnerGrowingColored'\nimport SpinnerTextAlignment from './SpinnerTextAlignment'\n\n// ** Source Code\nimport {\n  spinnerFlex,\n  spinnerFloat,\n  spinnerSizes,\n  spinnerBorder,\n  spinnerButton,\n  spinnerColors,\n  spinnerGrowing,\n  spinnerGrowColors,\n  spinnerTextAlignment\n} from './SpinnerSourceCode'\n\nconst Spinners = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Spinners' data={[{ title: 'Components' }, { title: 'Spinners' }]} />\n      <Row className='match-height'>\n        <Col md='6' sm='12'>\n          <Card title='Border Spinner' code={spinnerBorder}>\n            <CardText>\n              Use <code>Spinner</code> tag to create a bordered spinner.\n            </CardText>\n            <SpinnerBorder />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Colors' code={spinnerColors}>\n            <CardText className='mb-0'>\n              Use <code>color</code> attribute to create a colored spinner.\n            </CardText>\n            <SpinnerColors />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Growing Spinner' code={spinnerGrowing}>\n            <CardText>\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing spinner.\n            </CardText>\n            <SpinnerGrow />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Colored Growing Spinners' code={spinnerGrowColors}>\n            <CardText className='mb-0'>\n              Use <code>color</code> and <code>type</code> attribute to create a colored growing spinner.\n            </CardText>\n            <SpinnerGrowColors />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Flex' code={spinnerFlex}>\n            <CardText>\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code> and <code>.justify-content-[side]</code>.\n            </CardText>\n            <SpinnerFlex />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Float' code={spinnerFloat}>\n            <CardText>\n              Use <code>.float-[side]</code> with spinner tag to change spinner's position.\n            </CardText>\n            <SpinnerFloat />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Text Alignment' code={spinnerTextAlignment}>\n            <CardText>\n              You can also use <code>.text-[side]</code> as a wrapper to spinner tag to change spinner's position.\n            </CardText>\n            <SpinnerTextAlignment />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Sizes' code={spinnerSizes}>\n            <CardText className='mb-0'>\n              Use prop <code>size=\"sm\"</code> for Small spinner or use <code>style</code> prop for custom size.\n            </CardText>\n            <SpinnerSizes />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Buttons' code={spinnerButton}>\n            <SpinnerButtons />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Spinners\n","// ** React Imports\nimport { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  DropdownMenu,\n  DropdownItem,\n  BreadcrumbItem,\n  DropdownToggle,\n  UncontrolledButtonDropdown\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { data, title } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag='li'\n          key={index}\n          active={!isLastItem}\n          className={classnames({ 'text-primary': !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\n        <div className='breadcrumb-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' end>\n              <DropdownItem tag={Link} to='/apps/todo'>\n                <CheckSquare className='me-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='me-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='me-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='me-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}