{"version":3,"sources":["views/components/spinners/SpinnerFlex.js","views/components/spinners/SpinnerFloat.js","views/components/spinners/SpinnerSizes.js","views/components/spinners/SpinnerGrowing.js","views/components/spinners/SpinnerBorder.js","views/components/spinners/SpinnerColors.js","views/components/spinners/SpinnerButtons.js","views/components/spinners/SpinnerGrowingColored.js","views/components/spinners/SpinnerTextAlignment.js","views/components/spinners/SpinnerSourceCode.js","views/components/spinners/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["SpinnerFlex","className","SpinnerFloat","SpinnerSizes","size","type","style","height","width","SpinnerGrowing","SpinnerBorder","SpinnerColors","color","SpinnerButton","outline","disabled","SpinnerGrowColors","SpinnerTextAlignment","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","Spinners","useEffect","Prism","highlightAll","title","data","md","sm","code","SpinnerButtons","BreadCrumbs","props","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","end","CardSnippet","children","noBody","iconCode","isOpen","setIsOpen","useState","IconCode","CardBody","onClick"],"mappings":"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","file":"static/js/121.3630dee8.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFlex = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className='d-flex justify-content-center my-1'>\r\n        <Spinner />\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <strong>Loading...</strong>\r\n        <Spinner />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default SpinnerFlex\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFloat = () => {\r\n  return <Spinner className='float-end mb-2' />\r\n}\r\nexport default SpinnerFloat\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerSizes = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Spinner className='me-25' size='sm' />\r\n        <Spinner type='grow' size='sm' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' />\r\n        <Spinner type='grow' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' style={{ height: '3rem', width: '3rem' }} />\r\n        <Spinner type='grow' style={{ height: '3rem', width: '3rem' }} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerSizes\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowing = () => {\r\n  return <Spinner type='grow' />\r\n}\r\nexport default SpinnerGrowing\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerBorder = () => {\r\n  return <Spinner />\r\n}\r\nexport default SpinnerBorder\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerColors = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Spinner color='primary' />\r\n      <Spinner color='secondary' />\r\n      <Spinner color='success' />\r\n      <Spinner color='danger' />\r\n      <Spinner color='warning' />\r\n      <Spinner color='info' />\r\n      <Spinner color='light' />\r\n      <Spinner color='dark' />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerColors\r\n","// ** Reactstrap Imports\r\nimport { Button, Spinner } from 'reactstrap'\r\n\r\nconst SpinnerButton = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' />\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' type='grow' />\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' type='grow' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerButton\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowColors = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Spinner type='grow' color='primary' />\r\n      <Spinner type='grow' color='secondary' />\r\n      <Spinner type='grow' color='success' />\r\n      <Spinner type='grow' color='danger' />\r\n      <Spinner type='grow' color='warning' />\r\n      <Spinner type='grow' color='info' />\r\n      <Spinner type='grow' color='light' />\r\n      <Spinner type='grow' color='dark' />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerGrowColors\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerTextAlignment = () => {\r\n  return (\r\n    <div className='text-center'>\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerTextAlignment\r\n","export const spinnerBorder = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerBorder = () => {\r\n  return <Spinner />\r\n}\r\nexport default SpinnerBorder\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerColors = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerColors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner color='primary' />\r\n      <Spinner color='secondary' />\r\n      <Spinner color='success' />\r\n      <Spinner color='danger' />\r\n      <Spinner color='warning' />\r\n      <Spinner color='info' />\r\n      <Spinner color='light' />\r\n      <Spinner color='dark' />\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerColors\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowing = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowing = () => {\r\n  return <Spinner type='grow' color='primary' />\r\n}\r\nexport default SpinnerGrowing\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowColors = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowColors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner type='grow' color='primary' />\r\n      <Spinner type='grow' color='secondary' />\r\n      <Spinner type='grow' color='success' />\r\n      <Spinner type='grow' color='danger' />\r\n      <Spinner type='grow' color='warning' />\r\n      <Spinner type='grow' color='info' />\r\n      <Spinner type='grow' color='light' />\r\n      <Spinner type='grow' color='dark' />\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerGrowColors`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFlex = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFlex = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className='d-flex justify-content-center my-1'>\r\n        <Spinner />\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <strong>Loading...</strong>\r\n        <Spinner />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerFlex\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFloat = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFloat = () => {\r\n  return <Spinner className='float-end mb-2' />\r\n}\r\nexport default SpinnerFloat\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerTextAlignment = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerTextAlignment = () => {\r\n  return (\r\n    <div className='text-center'>\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerTextAlignment\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerSizes = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerSizes = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Spinner className='me-25' size='sm' />\r\n        <Spinner type='grow' size='sm' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' />\r\n        <Spinner type='grow' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' size='lg' />\r\n        <Spinner type='grow' size='lg' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerSizes\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerButton = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Button, Spinner } from 'reactstrap'\r\n\r\nconst SpinnerButton = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' />\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' type='grow' />\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' type='grow' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerButton\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n","// ** React Imports\r\nimport { Fragment, useEffect } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardText } from 'reactstrap'\r\n\r\n// ** Third Party Components\r\nimport Prism from 'prismjs'\r\n\r\n// ** Custom Components\r\nimport Card from '@components/card-snippet'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\n// ** Demo Components\r\nimport SpinnerFlex from './SpinnerFlex'\r\nimport SpinnerFloat from './SpinnerFloat'\r\nimport SpinnerSizes from './SpinnerSizes'\r\nimport SpinnerGrow from './SpinnerGrowing'\r\nimport SpinnerBorder from './SpinnerBorder'\r\nimport SpinnerColors from './SpinnerColors'\r\nimport SpinnerButtons from './SpinnerButtons'\r\nimport SpinnerGrowColors from './SpinnerGrowingColored'\r\nimport SpinnerTextAlignment from './SpinnerTextAlignment'\r\n\r\n// ** Source Code\r\nimport {\r\n  spinnerFlex,\r\n  spinnerFloat,\r\n  spinnerSizes,\r\n  spinnerBorder,\r\n  spinnerButton,\r\n  spinnerColors,\r\n  spinnerGrowing,\r\n  spinnerGrowColors,\r\n  spinnerTextAlignment\r\n} from './SpinnerSourceCode'\r\n\r\nconst Spinners = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs title='Spinners' data={[{ title: 'Components' }, { title: 'Spinners' }]} />\r\n      <Row className='match-height'>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Border Spinner' code={spinnerBorder}>\r\n            <CardText>\r\n              Use <code>Spinner</code> tag to create a bordered spinner.\r\n            </CardText>\r\n            <SpinnerBorder />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Colors' code={spinnerColors}>\r\n            <CardText className='mb-0'>\r\n              Use <code>color</code> attribute to create a colored spinner.\r\n            </CardText>\r\n            <SpinnerColors />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Growing Spinner' code={spinnerGrowing}>\r\n            <CardText>\r\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing spinner.\r\n            </CardText>\r\n            <SpinnerGrow />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Colored Growing Spinners' code={spinnerGrowColors}>\r\n            <CardText className='mb-0'>\r\n              Use <code>color</code> and <code>type</code> attribute to create a colored growing spinner.\r\n            </CardText>\r\n            <SpinnerGrowColors />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Flex' code={spinnerFlex}>\r\n            <CardText>\r\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code> and <code>.justify-content-[side]</code>.\r\n            </CardText>\r\n            <SpinnerFlex />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Float' code={spinnerFloat}>\r\n            <CardText>\r\n              Use <code>.float-[side]</code> with spinner tag to change spinner's position.\r\n            </CardText>\r\n            <SpinnerFloat />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Text Alignment' code={spinnerTextAlignment}>\r\n            <CardText>\r\n              You can also use <code>.text-[side]</code> as a wrapper to spinner tag to change spinner's position.\r\n            </CardText>\r\n            <SpinnerTextAlignment />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Sizes' code={spinnerSizes}>\r\n            <CardText className='mb-0'>\r\n              Use prop <code>size=\"sm\"</code> for Small spinner or use <code>style</code> prop for custom size.\r\n            </CardText>\r\n            <SpinnerSizes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Buttons' code={spinnerButton}>\r\n            <SpinnerButtons />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Spinners\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag='li'\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ 'text-primary': !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/todo'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Code } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardSnippet = props => {\r\n  // ** Props\r\n  const { title, children, noBody, code, iconCode } = props\r\n\r\n  // ** State\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  // ** If user passes custom icon then render that else render default icon\r\n  const IconCode = iconCode ? iconCode : <Code size={15} />\r\n\r\n  // ** To toggle collapse\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\r\n  const Wrapper = noBody ? Fragment : CardBody\r\n\r\n  return (\r\n    <Card className='card-snippet'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        <div className='views cursor-pointer' onClick={toggle}>\r\n          {IconCode}\r\n        </div>\r\n      </CardHeader>\r\n      <Wrapper>{children}</Wrapper>\r\n      <Collapse isOpen={isOpen}>\r\n        <CardBody>{code}</CardBody>\r\n      </Collapse>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardSnippet\r\n\r\n// ** PropTypes\r\nCardSnippet.propTypes = {\r\n  code: PropTypes.node,\r\n  noBody: PropTypes.bool,\r\n  children: PropTypes.any,\r\n  iconCode: PropTypes.node,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}