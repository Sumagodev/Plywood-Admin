{"version":3,"sources":["views/forms/form-elements/file-uploader/FileUploaderSingle.js","views/forms/form-elements/file-uploader/FileUploaderMultiple.js","views/forms/form-elements/file-uploader/FileUploaderRestrictions.js","views/forms/form-elements/file-uploader/index.js","@core/components/extensions-header/index.js"],"names":["FileUploaderSingle","files","setFiles","useState","getRootProps","getInputProps","useDropzone","multiple","onDrop","acceptedFiles","map","file","Object","assign","renderFilePreview","type","startsWith","className","alt","name","src","URL","createObjectURL","height","width","size","fileList","index","Math","round","toFixed","color","outline","onClick","filtered","filter","i","handleRemoveFile","tag","href","e","preventDefault","length","FileUploaderMultiple","FileUploaderRestrictions","accept","rejectedFiles","toast","error","Uploader","title","link","subTitle","sm","ExtensionsHeader","props","target","rel"],"mappings":"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","file":"static/js/95.7c423340.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, Button, ListGroup, ListGroupItem } from 'reactstrap'\n\n// ** Third Party Imports\nimport { useDropzone } from 'react-dropzone'\nimport { FileText, X, DownloadCloud } from 'react-feather'\n\nconst FileUploaderSingle = () => {\n  // ** State\n  const [files, setFiles] = useState([])\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    onDrop: acceptedFiles => {\n      setFiles([...files, ...acceptedFiles.map(file => Object.assign(file))])\n    }\n  })\n\n  const renderFilePreview = file => {\n    if (file.type.startsWith('image')) {\n      return <img className='rounded' alt={file.name} src={URL.createObjectURL(file)} height='28' width='28' />\n    } else {\n      return <FileText size='28' />\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const renderFileSize = size => {\n    if (Math.round(size / 100) / 10 > 1000) {\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n    } else {\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n    }\n  }\n\n  const fileList = files.map((file, index) => (\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\n      <div className='file-details d-flex align-items-center'>\n        <div className='file-preview me-1'>{renderFilePreview(file)}</div>\n        <div>\n          <p className='file-name mb-0'>{file.name}</p>\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\n        </div>\n      </div>\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\n        <X size={14} />\n      </Button>\n    </ListGroupItem>\n  ))\n\n  const handleRemoveAllFiles = () => {\n    setFiles([])\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Single</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <div className='d-flex align-items-center justify-content-center flex-column'>\n            <DownloadCloud size={64} />\n            <h5>Drop Files here or click to upload</h5>\n            <p className='text-secondary'>\n              Drop files here or click{' '}\n              <a href='/' onClick={e => e.preventDefault()}>\n                browse\n              </a>{' '}\n              thorough your machine\n            </p>\n          </div>\n        </div>\n        {files.length ? (\n          <Fragment>\n            <ListGroup className='my-2'>{fileList}</ListGroup>\n            <div className='d-flex justify-content-end'>\n              <Button className='me-1' color='danger' outline onClick={handleRemoveAllFiles}>\n                Remove All\n              </Button>\n              <Button color='primary'>Upload Files</Button>\n            </div>\n          </Fragment>\n        ) : null}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default FileUploaderSingle\n","// ** React Imports\nimport { useState, Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, Button, ListGroup, ListGroupItem } from 'reactstrap'\n\n// ** Third Party Imports\nimport { useDropzone } from 'react-dropzone'\nimport { FileText, X, DownloadCloud } from 'react-feather'\n\nconst FileUploaderMultiple = () => {\n  // ** State\n  const [files, setFiles] = useState([])\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: acceptedFiles => {\n      setFiles([...files, ...acceptedFiles.map(file => Object.assign(file))])\n    }\n  })\n\n  const renderFilePreview = file => {\n    if (file.type.startsWith('image')) {\n      return <img className='rounded' alt={file.name} src={URL.createObjectURL(file)} height='28' width='28' />\n    } else {\n      return <FileText size='28' />\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const renderFileSize = size => {\n    if (Math.round(size / 100) / 10 > 1000) {\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n    } else {\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n    }\n  }\n\n  const fileList = files.map((file, index) => (\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\n      <div className='file-details d-flex align-items-center'>\n        <div className='file-preview me-1'>{renderFilePreview(file)}</div>\n        <div>\n          <p className='file-name mb-0'>{file.name}</p>\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\n        </div>\n      </div>\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\n        <X size={14} />\n      </Button>\n    </ListGroupItem>\n  ))\n\n  const handleRemoveAllFiles = () => {\n    setFiles([])\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Multiple</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <div className='d-flex align-items-center justify-content-center flex-column'>\n            <DownloadCloud size={64} />\n            <h5>Drop Files here or click to upload</h5>\n            <p className='text-secondary'>\n              Drop files here or click{' '}\n              <a href='/' onClick={e => e.preventDefault()}>\n                browse\n              </a>{' '}\n              thorough your machine\n            </p>\n          </div>\n        </div>\n        {files.length ? (\n          <Fragment>\n            <ListGroup className='my-2'>{fileList}</ListGroup>\n            <div className='d-flex justify-content-end'>\n              <Button className='me-1' color='danger' outline onClick={handleRemoveAllFiles}>\n                Remove All\n              </Button>\n              <Button color='primary'>Upload Files</Button>\n            </div>\n          </Fragment>\n        ) : null}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default FileUploaderMultiple\n","// ** React Imports\nimport { useState, Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, Button, ListGroup, ListGroupItem } from 'reactstrap'\n\n// ** Third Party Imports\nimport toast from 'react-hot-toast'\nimport { useDropzone } from 'react-dropzone'\nimport { X, DownloadCloud } from 'react-feather'\n\nconst FileUploaderRestrictions = () => {\n  // ** State\n  const [files, setFiles] = useState([])\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    accept: {\n      'image/*': ['.png', '.jpg', '.jpeg', '.gif']\n    },\n    onDrop: (acceptedFiles, rejectedFiles) => {\n      if (rejectedFiles.length) {\n        toast.error('You can only upload image Files!.')\n      } else {\n        setFiles([...files, ...acceptedFiles.map(file => Object.assign(file))])\n      }\n    }\n  })\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const renderFileSize = size => {\n    if (Math.round(size / 100) / 10 > 1000) {\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n    } else {\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n    }\n  }\n\n  const fileList = files.map((file, index) => (\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\n      <div className='file-details d-flex align-items-center'>\n        <div className='file-preview me-1'>\n          <img className='rounded' alt={file.name} src={URL.createObjectURL(file)} height='28' width='28' />\n        </div>\n        <div>\n          <p className='file-name mb-0'>{file.name}</p>\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\n        </div>\n      </div>\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\n        <X size={14} />\n      </Button>\n    </ListGroupItem>\n  ))\n\n  const handleRemoveAllFiles = () => {\n    setFiles([])\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Restrictions</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <div className='d-flex align-items-center justify-content-center flex-column'>\n            <DownloadCloud size={64} />\n            <h5>Drop Files here or click to upload</h5>\n            <p className='text-secondary'>\n              Drop files here or click{' '}\n              <a href='/' onClick={e => e.preventDefault()}>\n                browse\n              </a>{' '}\n              thorough your machine\n            </p>\n          </div>\n        </div>\n        {files.length ? (\n          <Fragment>\n            <ListGroup className='my-2'>{fileList}</ListGroup>\n            <div className='d-flex justify-content-end'>\n              <Button className='me-1' color='danger' outline onClick={handleRemoveAllFiles}>\n                Remove All\n              </Button>\n              <Button color='primary'>Upload Files</Button>\n            </div>\n          </Fragment>\n        ) : null}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default FileUploaderRestrictions\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport ExtensionsHeader from '@components/extensions-header'\n\n// ** Demo Components\nimport FileUploaderSingle from './FileUploaderSingle'\nimport FileUploaderMultiple from './FileUploaderMultiple'\nimport FileUploaderRestrictions from './FileUploaderRestrictions'\n\n// ** Styles\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\n\nconst Uploader = () => {\n  return (\n    <Fragment>\n      <ExtensionsHeader\n        title='React Dropzone'\n        link='https://github.com/react-dropzone/react-dropzone'\n        subTitle=\"Simple React hook to create a HTML5-compliant drag'n'drop zone for files.\"\n      />\n\n      <Row>\n        <Col sm='12'>\n          <FileUploaderMultiple />\n        </Col>\n        <Col sm='12'>\n          <FileUploaderSingle />\n        </Col>\n        <Col sm='12'>\n          <FileUploaderRestrictions />\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default Uploader\n","// ** React Imports\nimport Proptypes from 'prop-types'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\nconst ExtensionsHeader = props => {\n  return (\n    <Row className='mb-2'>\n      <Col sm='12' className='ms-50'>\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\n          {props.title}\n        </p>\n        {props.link ? (\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\n            {props.subTitle}\n          </a>\n        ) : (\n          <p className='text-primary'>{props.subTitle}</p>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default ExtensionsHeader\n\n// ** PropTypes\nExtensionsHeader.propTypes = {\n  link: Proptypes.string,\n  title: Proptypes.string.isRequired,\n  subTitle: Proptypes.string.isRequired\n}\n"],"sourceRoot":""}