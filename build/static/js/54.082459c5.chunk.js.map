{"version":3,"sources":["views/apps/kanban/TaskSidebar.js","views/apps/kanban/KanbanTasks.js","views/apps/kanban/KanbanBoards.js","views/apps/kanban/index.js","@core/components/avatar-group/index.js"],"names":["assigneeOptions","value","label","img","img1","img2","img3","img4","img5","img6","labelOptions","TaskSidebar","props","sidebarOpen","labelColors","selectedTask","handleTaskSidebarToggle","desc","setDesc","useState","files","setFiles","labels","setLabels","dueDate","setDueDate","Date","assignedTo","setAssignedTo","dispatch","useDispatch","getRootProps","getInputProps","useDropzone","multiple","onDrop","acceptedFiles","map","file","Object","assign","control","setError","setValue","clearErrors","handleSubmit","formState","errors","useForm","defaultValues","title","isOpen","className","contentClassName","onOpened","isObjEmpty","description","coverImage","length","arr","assignee","push","labelsArr","onClosed","handleSelectTask","toggle","modalClassName","id","onSubmit","data","assignedArr","item","updateTask","URL","createObjectURL","size","onClick","options","wheelPropagation","for","name","render","field","placeholder","invalid","dateFormat","onChange","date","isMulti","isClearable","classNamePrefix","theme","selectThemeColors","components","Option","color","src","height","width","alt","type","rows","e","target","outline","store","KanbanTasks","task","boardId","index","isLastChip","pill","classnames","attachments","comments","taskTitle","KanbanBoard","board","setTitle","showAddTask","setShowAddTask","reset","useEffect","handleAddTaskReset","handleAddTaskFormSubmit","addTask","end","href","preventDefault","clearTasks","deleteBoard","list","tasks","group","setList","ev","from","classList","to","reorderTasks","taskId","dataset","targetTaskId","originalEvent","onAdd","updateTaskBoard","newBoardId","replace","rules","required","autoFocus","boardTitle","App","UX","Images","Forms","setSidebarOpen","showAddBoard","setShowAddBoard","useSelector","state","kanban","handleAddBoardReset","handleAddBoardFormSubmit","addBoard","toLowerCase","fetchBoards","fetchTasks","boards","isLastBoard","KanbanBoards","style","minWidth","Boolean","AvatarGroup","tag","Tag","i","ItemTag","placement","split","join","meta","undefined"],"mappings":"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","file":"static/js/54.082459c5.chunk.js","sourcesContent":["// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Badge, Modal, ModalBody, Button, Form, Input, Label, FormFeedback } from 'reactstrap'\n\n// ** Redux Imports\nimport { useDispatch } from 'react-redux'\n\n// ** Third Party Components\nimport Flatpickr from 'react-flatpickr'\nimport { useDropzone } from 'react-dropzone'\nimport { X, DownloadCloud } from 'react-feather'\nimport Select, { components } from 'react-select' //eslint-disable-line\nimport { useForm, Controller } from 'react-hook-form'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// ** Actions\nimport { updateTask, handleSelectTask } from './store'\n\n// ** Utils\nimport { isObjEmpty, selectThemeColors } from '@utils'\n\n// ** Assignee Avatars\nimport img1 from '@src/assets/images/portrait/small/avatar-s-3.jpg'\nimport img2 from '@src/assets/images/portrait/small/avatar-s-1.jpg'\nimport img3 from '@src/assets/images/portrait/small/avatar-s-4.jpg'\nimport img4 from '@src/assets/images/portrait/small/avatar-s-6.jpg'\nimport img5 from '@src/assets/images/portrait/small/avatar-s-2.jpg'\nimport img6 from '@src/assets/images/portrait/small/avatar-s-11.jpg'\n\n// ** Styles Imports\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\n\n// ** Assignee Select Options\nconst assigneeOptions = [\n  { value: 'Pheobe Buffay', label: 'Pheobe Buffay', img: img1 },\n  { value: 'Chandler Bing', label: 'Chandler Bing', img: img2 },\n  { value: 'Ross Geller', label: 'Ross Geller', img: img3 },\n  { value: 'Monica Geller', label: 'Monica Geller', img: img4 },\n  { value: 'Joey Tribbiani', label: 'Joey Tribbiani', img: img5 },\n  { value: 'Rachel Green', label: 'Rachel Green', img: img6 },\n  { value: 'Jerry Seinfeld', label: 'Jerry Seinfeld', img: img3 },\n  { value: 'Jerry Seinfeld', label: 'Jerry Seinfeld', img: img3 },\n  { value: 'Astro Kramer', label: 'Astro Kramer', img: img2 },\n  { value: 'George Costanza', label: 'George Costanza', img: img5 },\n  { value: 'Charlie Kelly', label: 'Charlie Kelly', img: img4 },\n  { value: 'Dennis Reynolds', label: 'Dennis Reynolds', img: img3 }\n]\n\n// ** Label Select Options\nconst labelOptions = [\n  { value: 'UX', label: 'UX' },\n  { value: 'App', label: 'App' },\n  { value: 'Forms', label: 'Forms' },\n  { value: 'Images', label: 'Images' },\n  { value: 'Code Review', label: 'Code Review' },\n  { value: 'Charts & Maps', label: 'Charts & Maps' }\n]\n\nconst TaskSidebar = props => {\n  // ** Props\n  const { sidebarOpen, labelColors, selectedTask, handleTaskSidebarToggle } = props\n\n  // ** State\n  const [desc, setDesc] = useState('')\n  const [files, setFiles] = useState([])\n  const [labels, setLabels] = useState([])\n  const [dueDate, setDueDate] = useState(new Date())\n  const [assignedTo, setAssignedTo] = useState(null)\n\n  // ** Hooks\n  const dispatch = useDispatch()\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    onDrop: acceptedFiles => {\n      setFiles([...acceptedFiles.map(file => Object.assign(file))])\n    }\n  })\n\n  const {\n    control,\n    setError,\n    setValue,\n    clearErrors,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    defaultValues: { title: '' }\n  })\n\n  // ** Custom Select Components\n  const LabelOptions = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <Badge color={`light-${labelColors[data.label]}`}>{data.label}</Badge>\n      </components.Option>\n    )\n  }\n\n  const AssigneeComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <div className='d-flex align-items-center'>\n          <img className='d-block rounded-circle me-50' src={data.img} height='26' width='26' alt={data.label} />\n          <p className='mb-0'>{data.label}</p>\n        </div>\n      </components.Option>\n    )\n  }\n\n  // ** Function to run when sidebar opens\n  const handleSidebarOpened = () => {\n    if (!isObjEmpty(selectedTask)) {\n      setValue('title', selectedTask.title)\n      setDueDate(selectedTask.dueDate)\n      setDesc(selectedTask.description)\n      if (selectedTask.coverImage) {\n        setFiles([selectedTask.coverImage])\n      }\n      if (selectedTask.assignedTo.length) {\n        const arr = []\n        selectedTask.assignedTo.map(assignee => {\n          arr.push({ value: assignee.title, label: assignee.title, img: assignee.img })\n        })\n        setAssignedTo(arr)\n      }\n      if (selectedTask.labels.length) {\n        const labelsArr = []\n        selectedTask.labels.map(label => {\n          labelsArr.push({ value: label, label })\n        })\n        setLabels(labelsArr)\n      }\n    }\n  }\n\n  // ** Function to run when sidebar closes\n  const handleSidebarClosed = () => {\n    setDesc('')\n    setFiles([])\n    setLabels([])\n    setValue('title', '')\n    setDueDate(new Date())\n    clearErrors()\n    dispatch(handleSelectTask({}))\n    setAssignedTo(null)\n  }\n\n  const onSubmit = data => {\n    if (data.title.length) {\n      const labelsArr = []\n      const assignedArr = []\n\n      if (assignedTo.length) {\n        assignedTo.map(item => {\n          assignedArr.push({ title: item.label, img: item.img })\n        })\n      }\n\n      if (labels.length) {\n        labels.map(label => {\n          labelsArr.push(label.label)\n        })\n      }\n\n      dispatch(\n        updateTask({\n          ...selectedTask,\n          ...data,\n          dueDate,\n          labels: labelsArr,\n          description: desc,\n          assignedTo: assignedArr,\n          // eslint-disable-next-line multiline-ternary\n          ...(files.length && typeof files[0] !== 'string'\n            ? // eslint-disable-next-line multiline-ternary\n              {\n                coverImage: URL.createObjectURL(files[0])\n              }\n            : {})\n        })\n      )\n      handleTaskSidebarToggle()\n    } else {\n      setError('title')\n    }\n  }\n\n  const renderUploadedImage = () => {\n    if (files.length && typeof files[0] !== 'string') {\n      // @ts-ignore\n      return files.map(file => (\n        <img key={file.name} alt={file.name} className='single-file-image img-fluid' src={URL.createObjectURL(file)} />\n      ))\n    } else {\n      if (typeof files[0] === 'string') {\n        return <img alt='task-img' className='single-file-image img-fluid' src={files[0]} />\n      }\n    }\n  }\n\n  const handleResetFields = () => {\n    setDesc('')\n\n    setValue('title', store.selectedTask.title)\n    setDueDate(store.selectedTask.dueDate)\n    if (selectedTask.assignedTo.length) {\n      const arr = []\n      selectedTask.assignedTo.map(assignee => {\n        arr.push({ value: assignee.title, label: assignee.title, img: assignee.img })\n      })\n\n      setAssignedTo(arr)\n    }\n    if (selectedTask.labels.length) {\n      const labels = []\n      selectedTask.labels.map(label => {\n        labels.push({ value: label, label })\n      })\n      setLabels(labels)\n    }\n\n    if (selectedTask.coverImage) {\n      setFiles([selectedTask.coverImage])\n    } else {\n      setFiles([])\n    }\n  }\n\n  return (\n    <Modal\n      isOpen={sidebarOpen}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      onOpened={handleSidebarOpened}\n      onClosed={handleSidebarClosed}\n      toggle={handleTaskSidebarToggle}\n      modalClassName='modal-slide-in sidebar-kanban-modal'\n    >\n      <Form id='form-modal-kanban' className='kanban-task-modal' onSubmit={handleSubmit(onSubmit)}>\n        <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n          <h5 className='modal-title'>Update Task</h5>\n          <X className='fw-normal mt-25' size={16} onClick={handleTaskSidebarToggle} />\n        </div>\n        <PerfectScrollbar options={{ wheelPropagation: false }}>\n          <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n            <div className='mb-1'>\n              <Label className='form-label' for='task-title'>\n                Title <span className='text-danger'>*</span>\n              </Label>\n              <Controller\n                name='title'\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    id='task-title'\n                    placeholder='Title'\n                    className='new-todo-item-title'\n                    invalid={errors.title && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.title && <FormFeedback>Please enter a valid task title</FormFeedback>}\n            </div>\n            <div className='mb-1'>\n              <Label className='form-label' for='due-date'>\n                Due Date\n              </Label>\n              <Flatpickr\n                id='due-date'\n                name='due-date'\n                value={dueDate}\n                className='form-control'\n                options={{ dateFormat: 'Y-m-d' }}\n                onChange={date => setDueDate(date[0])}\n              />\n            </div>\n            <div className='mb-1'>\n              <Label className='form-label' for='task-labels'>\n                Labels\n              </Label>\n              <Select\n                isMulti\n                value={labels}\n                id='task-labels'\n                isClearable={false}\n                options={labelOptions}\n                className='react-select'\n                classNamePrefix='select'\n                theme={selectThemeColors}\n                components={{ Option: LabelOptions }}\n                onChange={data => {\n                  setLabels(data !== null ? [...data] : [])\n                }}\n              />\n            </div>\n            <div className='mb-1'>\n              <Label className='form-label' for='task-assignee'>\n                Assignee\n              </Label>\n              <Select\n                isMulti\n                id='task-assignee'\n                value={assignedTo}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={assigneeOptions}\n                theme={selectThemeColors}\n                onChange={data => setAssignedTo(data)}\n                components={{ Option: AssigneeComponent }}\n              />\n            </div>\n            <div className='mb-1'>\n              <div {...getRootProps({ className: 'dropzone' })}>\n                <input {...getInputProps()} />\n                <div className='d-flex align-items-center justify-content-center flex-column text-center'>\n                  <DownloadCloud size={64} />\n                  <h5>Drop Files here or click to upload</h5>\n                </div>\n                {files.length ? renderUploadedImage() : null}\n              </div>\n            </div>\n            <div className='mb-1'>\n              <Label className='form-label' for='task-desc'>\n                Description\n              </Label>\n              <Input\n                type='textarea'\n                value={desc}\n                name='text'\n                id='task-desc'\n                rows='3'\n                placeholder='Description...'\n                onChange={e => setDesc(e.target.value)}\n              />\n            </div>\n            <div>\n              <Button type='submit' color='primary' className='me-1'>\n                Update\n              </Button>\n              <Button outline color='secondary' onClick={handleResetFields}>\n                Reset\n              </Button>\n            </div>\n          </ModalBody>\n        </PerfectScrollbar>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default TaskSidebar\n","// ** Reactstrap Imports\nimport { Badge, Card, CardBody } from 'reactstrap'\n\n// ** Custom Components\nimport AvatarGroup from '@components/avatar-group'\n\n// ** Third Party Imports\nimport classnames from 'classnames'\nimport { Paperclip, MessageSquare } from 'react-feather'\n\n// ** Redux Imports\nimport { useDispatch } from 'react-redux'\n\n// ** Actions\nimport { handleSelectTask } from './store'\n\nconst KanbanTasks = props => {\n  // ** Props\n  const { task, labelColors, handleTaskSidebarToggle } = props\n\n  // ** Hooks\n  const dispatch = useDispatch()\n\n  const handleTaskClick = () => {\n    dispatch(handleSelectTask(task))\n    handleTaskSidebarToggle()\n  }\n\n  const renderLabels = () => {\n    if (task.labels.length) {\n      return (\n        <div className='mb-1'>\n          {task.labels.map((label, index) => {\n            const isLastChip = task.labels[task.labels.length - 1] === label\n\n            return (\n              <Badge\n                pill\n                key={index}\n                label={label}\n                color={`light-${labelColors[label]}`}\n                className={classnames({ 'me-75': !isLastChip })}\n              >\n                {label}\n              </Badge>\n            )\n          })}\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n\n  const renderAttachmentsComments = () => {\n    if ((task.attachments && task.attachments.length) || (task.comments && task.comments.length)) {\n      return (\n        <div className='d-flex align-items-center'>\n          {task.attachments && task.attachments.length ? (\n            <div className='d-flex align-items-center cursor-pointer me-75'>\n              <Paperclip size={16} className='me-25' />\n              <span>{task.attachments.length}</span>\n            </div>\n          ) : null}\n          {task.comments && task.comments.length ? (\n            <div className='d-flex align-items-center cursor-pointer'>\n              <MessageSquare size={16} className='me-50' />\n              <span>{task.comments.length}</span>\n            </div>\n          ) : null}\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n\n  const taskFooterClasses = () => {\n    if (task.comments && !task.comments.length && task.attachments && !task.attachments.length) {\n      return 'justify-content-end'\n    } else {\n      return 'justify-content-between'\n    }\n  }\n\n  const renderTaskFooter = () => {\n    return (task.attachments && task.attachments.length) ||\n      (task.comments && task.comments.length) ||\n      (task.assignedTo && task.assignedTo.length) ? (\n      <div className={`task-footer d-flex align-items-center mt-1 ${taskFooterClasses()}`}>\n        {renderAttachmentsComments()}\n        {task.assignedTo.length ? (\n          <div>{task.assignedTo.length ? <AvatarGroup data={task.assignedTo} /> : null}</div>\n        ) : null}\n      </div>\n    ) : null\n  }\n\n  return (\n    <Card onClick={handleTaskClick} className='task' data-board-id={task.boardId} data-task-id={task.id}>\n      <CardBody data-task-id={task.id}>\n        {renderLabels()}\n\n        {task.coverImage ? (\n          <img className='img-fluid rounded task-img mb-1' alt={task.title} src={task.coverImage} />\n        ) : null}\n\n        <span className='task-title'>{task.title}</span>\n\n        {renderTaskFooter()}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default KanbanTasks\n","// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Input, Button, FormText, DropdownMenu, DropdownItem, DropdownToggle, UncontrolledDropdown } from 'reactstrap'\n\n// ** Third Party Imports\nimport { ReactSortable } from 'react-sortablejs'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Plus, MoreVertical } from 'react-feather'\n\n// ** Redux Imports\nimport { useDispatch } from 'react-redux'\n\n// ** Actions\nimport { addTask, clearTasks, deleteBoard, reorderTasks, updateTaskBoard } from './store'\n\nimport KanbanTasks from './KanbanTasks'\n// ** Kanban Component\n\nconst defaultValues = {\n  taskTitle: ''\n}\n\nconst KanbanBoard = props => {\n  // ** Props\n  const { board, index, store, labelColors, handleTaskSidebarToggle } = props\n\n  // ** States\n  const [title, setTitle] = useState('')\n  const [showAddTask, setShowAddTask] = useState(null)\n\n  // ** Hooks\n  const dispatch = useDispatch()\n  const {\n    reset,\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  useEffect(() => {\n    setTitle(board.title)\n  }, [board.title])\n\n  const handleAddTaskReset = () => {\n    reset()\n    setShowAddTask(null)\n  }\n\n  const handleOpenAddTask = () => {\n    reset()\n    setShowAddTask(board.id)\n  }\n\n  const handleClearTasks = () => {\n    dispatch(clearTasks(board.id))\n  }\n\n  const handleDeleteBoard = () => {\n    dispatch(deleteBoard(board.id))\n  }\n\n  const handleAddTaskFormSubmit = data => {\n    dispatch(addTask({ title: data.taskTitle, boardId: board.id }))\n    handleAddTaskReset()\n  }\n\n  const renderAddTaskForm = () => {\n    return board.id === showAddTask ? (\n      <form onSubmit={handleSubmit(handleAddTaskFormSubmit)}>\n        <div className='mb-1'>\n          <Controller\n            name='taskTitle'\n            control={control}\n            rules={{ required: true }}\n            render={({ field: { value, onChange } }) => (\n              <Input\n                autoFocus\n                rows='2'\n                value={value}\n                type='textarea'\n                id='task-title'\n                onChange={onChange}\n                placeholder='Add Content'\n                invalid={errors.taskTitle && true}\n                aria-describedby='validation-add-task'\n              />\n            )}\n          />\n          {errors.taskTitle && (\n            <FormText color='danger' id='validation-add-task'>\n              Please enter a valid Task Title\n            </FormText>\n          )}\n        </div>\n        <div>\n          <Button color='primary' size='sm' type='submit' className='me-75'>\n            Add\n          </Button>\n          <Button outline size='sm' color='secondary' onClick={handleAddTaskReset}>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    ) : null\n  }\n\n  const sortTaskOnSameBoard = ev => {\n    if (ev.from.classList[1] === ev.to.classList[1]) {\n      dispatch(\n        reorderTasks({\n          taskId: ev.item.dataset.taskId,\n          targetTaskId: ev.originalEvent.target.dataset.taskId\n        })\n      )\n    }\n  }\n\n  const MoveTaskToAnotherBoard = ev => {\n    dispatch(\n      updateTaskBoard({\n        taskId: ev.item.dataset.taskId,\n        boardId: ev.item.dataset.boardId,\n        newBoardId: ev.to.classList[1].replace('board-', '')\n      })\n    )\n  }\n\n  return (\n    <Fragment key={index}>\n      <div className='board-wrapper'>\n        <div className='d-flex align-items-center justify-content-between'>\n          <div className='d-flex align-items-center board-header'>\n            <Input className='board-title' value={title} onChange={e => setTitle(e.target.value)} />\n          </div>\n          <UncontrolledDropdown className='more-options-dropdown'>\n            <DropdownToggle className='btn-icon' color='transparent' size='sm'>\n              <MoreVertical size={20} />\n            </DropdownToggle>\n            <DropdownMenu end>\n              <DropdownItem\n                href='/'\n                onClick={e => {\n                  e.preventDefault()\n                  handleClearTasks()\n                }}\n              >\n                Clear Tasks\n              </DropdownItem>\n              <DropdownItem\n                href='/'\n                onClick={e => {\n                  e.preventDefault()\n                  handleDeleteBoard()\n                }}\n              >\n                Delete Board\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </div>\n        <div>\n          <ReactSortable\n            list={store.tasks}\n            group='shared-group'\n            setList={() => null}\n            onChange={sortTaskOnSameBoard}\n            onAdd={MoveTaskToAnotherBoard}\n            className={`tasks-wrapper board-${board.id}`}\n          >\n            {store.tasks.map((task, index) => {\n              if (task.boardId === board.id) {\n                return (\n                  <KanbanTasks\n                    task={task}\n                    index={index}\n                    labelColors={labelColors}\n                    key={`${task.boardId}-${index}`}\n                    handleTaskSidebarToggle={handleTaskSidebarToggle}\n                  />\n                )\n              } else {\n                return <Fragment key={`${task.boardId}-${index}`}></Fragment>\n              }\n            })}\n          </ReactSortable>\n\n          {showAddTask === null || (showAddTask !== null && showAddTask !== board.id) ? (\n            <Button size='sm' color='flat-secondary' onClick={handleOpenAddTask}>\n              <Plus size={14} className='me-25' />\n              <span className='align-middle'>Add New Task</span>\n            </Button>\n          ) : (\n            renderAddTaskForm()\n          )}\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default KanbanBoard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\n\n// ** Third Party Imports\nimport { Plus } from 'react-feather'\nimport { useForm, Controller } from 'react-hook-form'\n\n// ** Reactstrap Imports\nimport { Button, Input, FormText } from 'reactstrap'\n\n// ** Redux Imports\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Actions\nimport { fetchBoards, fetchTasks, addBoard } from './store'\n\n// ** Kanban Component\nimport TaskSidebar from './TaskSidebar'\nimport KanbanBoards from './KanbanBoards'\n\n// ** Styles\nimport '@styles/react/apps/app-kanban.scss'\n\nconst defaultValues = {\n  boardTitle: ''\n}\n\nconst labelColors = {\n  App: 'info',\n  UX: 'success',\n  Images: 'warning',\n  Forms: 'success',\n  'Code Review': 'danger',\n  'Charts & Maps': 'primary'\n}\n\nconst KanbanBoard = () => {\n  // ** States\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [showAddBoard, setShowAddBoard] = useState(false)\n\n  // ** Hooks\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.kanban)\n  const {\n    reset,\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  const handleAddBoardReset = () => {\n    reset()\n    setShowAddBoard(false)\n  }\n\n  const handleOpenAddBoard = () => {\n    reset()\n    setShowAddBoard(true)\n  }\n\n  const handleAddBoardFormSubmit = data => {\n    dispatch(addBoard({ title: data.boardTitle, id: data.boardTitle.toLowerCase().replace(/ /g, '-') }))\n    handleAddBoardReset()\n  }\n\n  const handleTaskSidebarToggle = () => setSidebarOpen(!sidebarOpen)\n\n  const renderBoards = () => {\n    return store.boards.map((board, index) => {\n      const isLastBoard = store.boards[store.boards.length - 1].id === board.id\n\n      return (\n        <KanbanBoards\n          store={store}\n          board={board}\n          labelColors={labelColors}\n          isLastBoard={isLastBoard}\n          key={`${board.id}-${index}`}\n          index={`${board.id}-${index}`}\n          handleTaskSidebarToggle={handleTaskSidebarToggle}\n        />\n      )\n    })\n  }\n\n  const renderAddBoardForm = () => {\n    return showAddBoard ? (\n      <form onSubmit={handleSubmit(handleAddBoardFormSubmit)}>\n        <div className='mb-50'>\n          <Controller\n            name='boardTitle'\n            control={control}\n            rules={{ required: true }}\n            render={({ field: { value, onChange } }) => (\n              <Input\n                autoFocus\n                value={value}\n                id='board-title'\n                onChange={onChange}\n                placeholder='Board Title'\n                invalid={Boolean(errors.boardTitle)}\n                aria-describedby='validation-add-board'\n              />\n            )}\n          />\n          {errors.boardTitle && (\n            <FormText color='danger' id='validation-add-board'>\n              Please enter a valid Board Title\n            </FormText>\n          )}\n        </div>\n        <div>\n          <Button color='primary' size='sm' type='submit' className='me-75'>\n            Add\n          </Button>\n          <Button outline size='sm' color='secondary' onClick={handleAddBoardReset}>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    ) : null\n  }\n\n  useEffect(() => {\n    dispatch(fetchBoards())\n    dispatch(fetchTasks())\n  }, [dispatch])\n\n  return store.boards.length ? (\n    <div className='app-kanban-wrapper'>\n      {renderBoards()}\n\n      <div className='ms-1' style={{ minWidth: 150 }}>\n        {!showAddBoard ? (\n          <Button size='sm' color='light-secondary' onClick={handleOpenAddBoard}>\n            <Plus size={14} className='me-25' />\n            <span className='align-middle'> Add Board</span>\n          </Button>\n        ) : (\n          renderAddBoardForm()\n        )}\n      </div>\n\n      <TaskSidebar\n        labelColors={labelColors}\n        sidebarOpen={sidebarOpen}\n        selectedTask={store.selectedTask}\n        handleTaskSidebarToggle={handleTaskSidebarToggle}\n      />\n    </div>\n  ) : null\n}\n\nexport default KanbanBoard\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { UncontrolledTooltip } from 'reactstrap'\n\n// ** Custom Components Imports\nimport Avatar from '@components/avatar'\n\nconst AvatarGroup = props => {\n  // ** Props\n  const { data, tag, className } = props\n\n  // ** Conditional Tag\n  const Tag = tag ? tag : 'div'\n\n  // ** Render Data\n  const renderData = () => {\n    return data.map((item, i) => {\n      const ItemTag = item.tag ? item.tag : 'div'\n      return (\n        <Fragment key={i}>\n          {item.title ? (\n            <UncontrolledTooltip placement={item.placement} target={item.title.split(' ').join('-')}>\n              {item.title}\n            </UncontrolledTooltip>\n          ) : null}\n          {!item.meta ? (\n            <Avatar\n              tag={ItemTag}\n              className={classnames('pull-up', {\n                [item.className]: item.className\n              })}\n              {...(item.title ? { id: item.title.split(' ').join('-') } : {})}\n              {...item}\n              title={undefined}\n              meta={undefined}\n            />\n          ) : null}\n          {item.meta ? <ItemTag className='d-flex align-items-center ps-1'>{item.meta}</ItemTag> : null}\n        </Fragment>\n      )\n    })\n  }\n\n  return (\n    <Tag\n      className={classnames('avatar-group', {\n        [className]: className\n      })}\n    >\n      {renderData()}\n    </Tag>\n  )\n}\n\nexport default AvatarGroup\n\n// ** PropTypes\nAvatarGroup.propTypes = {\n  data: Proptypes.array.isRequired,\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string])\n}\n"],"sourceRoot":""}