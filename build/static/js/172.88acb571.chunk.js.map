{"version":3,"sources":["views/products/list/columns.js","views/products/list/Table.js","views/products/list/index.js"],"names":["statusObj","pending","active","inactive","columns","name","sortable","sortField","width","cell","row","price","selector","status","style","cursor","className","onClick","e","preventDefault","store","dispatch","updateProduct","id","_id","color","pill","approved","to","getProduct","size","deleteProduct","CustomHeader","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","xl","htmlFor","type","value","onChange","target","UsersList","useDispatch","useSelector","state","products","sort","setSort","allData","useState","setSearchTerm","currentPage","setCurrentPage","sortColumn","setSortColumn","setRowsPerPage","sidebarOpen","setSidebarOpen","currentRole","setCurrentRole","label","currentStatus","setCurrentStatus","number","rolesOptions","setrolesOptions","useEffect","q","perPage","page","role","roleSelect","Object","values","ROLES_CONSTANT","map","el","data","length","selectedCategory","noHeader","subHeader","sortServer","pagination","paginationServer","responsive","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","onSort","column","sortDirection","sortIcon","filters","isFiltered","keys","some","k","slice","dataToRender","subHeaderComponent","val","parseInt","currentTarget","CategoryList","Table"],"mappings":"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","file":"static/js/172.88acb571.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { store } from '@store/store'\nimport { getProduct, deleteProduct, updateProduct } from '../store'\n\n// ** Icons Imports\nimport { Slack, User, Settings, Database, Edit2, MoreVertical, FileText, Trash2, Archive, Edit } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button, Input } from 'reactstrap'\nimport { updateProductApi } from '../../../services/product.service'\nimport { toastError, toastSuccess } from '../../../utility/toastutill'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n  if (row.avatar.length) {\n    return <Avatar className='me-1' img={row.avatar} width='32' height='32' />\n  } else {\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={row.avatarColor || 'light-primary'}\n        content={row.fullName || 'John Doe'}\n      />\n    )\n  }\n}\n\nconst handleStatus = async (id, status) => {\n  try {\n\n    status = status === \"PENDING\" ? \"APPROVED\" : \"PENDING\"\n    const obj = {\n      approved: status\n    }\n    const { data: res } = await updateProductApi(obj, id)\n    if (res.message) {\n      toastSuccess(res.message)\n    }\n  } catch (error) {\n    toastError(error)\n  }\n}\n\n// ** Renders Role Columns\nconst renderRole = row => {\n  const roleObj = {\n    subscriber: {\n      class: 'text-primary',\n      icon: User\n    },\n    maintainer: {\n      class: 'text-success',\n      icon: Database\n    },\n    editor: {\n      class: 'text-info',\n      icon: Edit2\n    },\n    author: {\n      class: 'text-warning',\n      icon: Settings\n    },\n    admin: {\n      class: 'text-danger',\n      icon: Slack\n    }\n  }\n\n  const Icon = roleObj[row.role] ? roleObj[row.role].icon : Edit2\n\n  return (\n    <span className='text-truncate text-capitalize align-middle'>\n      <Icon size={18} className={`${roleObj[row.role] ? roleObj[row.role].class : ''} me-50`} />\n      {row.role}\n    </span>\n  )\n}\n\nconst statusObj = {\n  pending: 'light-warning',\n  active: 'light-success',\n  inactive: 'light-secondary'\n}\n\nexport const columns = [\n  // {\n  //   name: 'S.no.',\n  //   sortable: false,\n  //   sortField: 'name',\n  //   width: \"25%\",\n  //   cell: (row, i) => i + 1\n  // },\n  {\n    name: 'Name',\n    sortable: true,\n    sortField: 'name',\n    width: \"25%\",\n    cell: row => row.name\n  },\n  {\n    name: 'Price',\n    sortable: true,\n    sortField: 'Price',\n    width: \"15%\",\n    cell: row => row.price\n  },\n  {\n    name: 'Status',\n    sortable: true,\n    sortField: 'status',\n    selector: row => row.status,\n    width: \"15%\",\n    cell: row => (\n      <Badge style={{ cursor: \"pointer\" }} className='text-capitalize'\n        onClick={e => {\n          e.preventDefault()\n          store.dispatch(\n            updateProduct({\n              status: !row.status,\n              id: row._id\n            })\n          )\n        }}\n        color={statusObj[row.status === true ? 'active' : 'inactive']} pill>\n        {row.status === true ? 'active' : 'inactive'}\n      </Badge>\n    )\n  },\n  {\n    name: 'Approved',\n    sortable: true,\n    sortField: 'status',\n    selector: row => row.approved,\n    width: \"15%\",\n    cell: row => (\n      //   <div className='form-check form-switch'>\n      //   <Input type='switch' name='customSwitch' id='exampleCustomSwitch' defaultChecked={row.approved !== \"PENDING\" ? 'true' : \"false\"}  onChange={ () => handleStatus(row._id, row.approved)}  />\n\n      // </div>\n      <Badge style={{ cursor: \"pointer\" }} onClick={e => {\n        e.preventDefault()\n        store.dispatch(\n          updateProduct({\n            approved: row.approved === \"APPROVED\" ? \"PENDING\" : \"APPROVED\",\n            id: row._id\n          })\n        )\n      }} className='text-capitalize' color={statusObj[row.approved !== \"PENDING\" ? 'active' : 'pending']} pill>\n        {row.approved}\n      </Badge>\n    )\n  },\n\n  {\n    name: 'Actions',\n    cell: row => (\n      <>\n\n        <Link color='primary' to={`/products/edit-product/${row._id}`} className='btn-sm ms-2  btn-primary' onClick={() => {\n\n          store.dispatch(getProduct(row._id))\n        }}>     <Edit size={14} /></Link>\n        <Button color='danger' className='ms-2 btn-sm'\n          onClick={e => {\n            e.preventDefault()\n            store.dispatch(deleteProduct(row._id))\n          }}\n        >    <Trash2 size={14} /></Button>\n      </>\n      // <div className='column-action'>\n      //   <UncontrolledDropdown>\n      //     <DropdownToggle tag='div' className='btn btn-sm'>\n      //       <MoreVertical size={14} className='cursor-pointer' />\n      //     </DropdownToggle>\n      //     <DropdownMenu>\n      //       <DropdownItem tag='a' href='/' className='w-100' onClick={e => { \n      //         e.preventDefault() \n      //         store.dispatch(getProduct(row._id))\n      //         }}\n      //         >\n      //         <Archive size={14} className='me-50' />\n      //         <span className='align-middle'>Edit</span>\n      //       </DropdownItem>\n      //       <DropdownItem\n      //         tag='a'\n      //         href='/'\n      //         className='w-100'\n      //         onClick={e => {\n      //           e.preventDefault()\n      //           store.dispatch(deleteProduct(row._id))\n      //         }}\n      //       >\n      //         <Trash2 size={14} className='me-50' />\n      //         <span className='align-middle'>Delete</span>\n      //       </DropdownItem>\n      //     </DropdownMenu>\n      //   </UncontrolledDropdown>\n      // </div>\n    )\n  }\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Table Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { getAllProducts, getProduct } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown, Share, Printer, FileText, File, Grid, Copy } from 'react-feather'\n\n// ** Utils\nimport { selectThemeColors } from '@utils'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  CardTitle,\n  CardHeader,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown\n} from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport { ROLES_CONSTANT } from '../../../utility/constant'\nimport { Link } from 'react-router-dom'\n\n// ** Table Header\nconst CustomHeader = ({ store, toggleSidebar, handlePerPage, rowsPerPage, handleFilter, searchTerm }) => {\n  // ** Converts table to CSV\n  function convertArrayOfObjectsToCSV(array) {\n    let result\n\n    const columnDelimiter = ','\n    const lineDelimiter = '\\n'\n    const keys = Object.keys(store.data[0])\n\n    result = ''\n    result += keys.join(columnDelimiter)\n    result += lineDelimiter\n\n    array.forEach(item => {\n      let ctr = 0\n      keys.forEach(key => {\n        if (ctr > 0) result += columnDelimiter\n\n        result += item[key]\n\n        ctr++\n      })\n      result += lineDelimiter\n    })\n\n    return result\n  }\n\n  // ** Downloads CSV\n  function downloadCSV(array) {\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n\n    const filename = 'export.csv'\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n      csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n  }\n  return (\n    <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\n      <Row>\n        <Col xl='6' className='d-flex align-items-center p-0'>\n          <div className='d-flex align-items-center w-100'>\n            <label htmlFor='rows-per-page'>Show</label>\n            <Input\n              className='mx-50'\n              type='select'\n              id='rows-per-page'\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: '5rem' }}\n            >\n              <option value='10'>10</option>\n              <option value='25'>25</option>\n              <option value='50'>50</option>\n              <option value='100'>100</option>\n              <option value='500'>500</option>\n            </Input>\n            <label htmlFor='rows-per-page'>Entries</label>\n          </div>\n        </Col>\n        <Col\n          xl='6'\n          className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n        >\n          <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n            <label className='mb-0' htmlFor='search-invoice'>\n              Search:\n            </label>\n            <Input\n              id='search-invoice'\n              className='ms-50 w-100'\n              type='text'\n              value={searchTerm}\n              onChange={e => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className='d-flex align-items-center table-header-actions'>\n            {/* <UncontrolledDropdown className='me-1'>\n              <DropdownToggle color='secondary' caret outline>\n                <Share className='font-small-4 me-50' />\n                <span className='align-middle'>Export</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem className='w-100'>\n                  <Printer className='font-small-4 me-50' />\n                  <span className='align-middle'>Print</span>\n                </DropdownItem>\n                <DropdownItem className='w-100' onClick={() => downloadCSV(store.data)}>\n                  <FileText className='font-small-4 me-50' />\n                  <span className='align-middle'>CSV</span>\n                </DropdownItem>\n                <DropdownItem className='w-100'>\n                  <Grid className='font-small-4 me-50' />\n                  <span className='align-middle'>Excel</span>\n                </DropdownItem>\n                <DropdownItem className='w-100'>\n                  <File className='font-small-4 me-50' />\n                  <span className='align-middle'>PDF</span>\n                </DropdownItem>\n                <DropdownItem className='w-100'>\n                  <Copy className='font-small-4 me-50' />\n                  <span className='align-middle'>Copy</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown> */}\n\n            <Link to=\"/products/add-products\" className='add-new-user btn btn-primary' color='primary'>\n              Add New\n            </Link>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.products)\n  const allData = useSelector(state => state.products.allData)\n\n  // ** States\n  const [sort, setSort] = useState('desc')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortColumn, setSortColumn] = useState('id')\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [currentRole, setCurrentRole] = useState({ value: '', label: 'Select Role' })\n  // const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n  const [rolesOptions, setrolesOptions] = useState([])\n\n  // ** Function to toggle sidebar\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getProduct({\n      sort,\n      sortColumn,\n      q: searchTerm,\n      perPage: rowsPerPage,\n      page: currentPage,\n      role: currentRole.value,\n      status: currentStatus.value\n    }))\n  }, [])\n  useEffect(() => {\n    // dispatch(\n    //   getProduct({\n    //     sort,\n    //     sortColumn,\n    //     q: searchTerm,\n    //     page: currentPage,\n    //     perPage: rowsPerPage,\n    //     role: currentRole.value,\n    //     status: currentStatus.value\n    //     // currentPlan: currentPlan.value\n    //   })\n    // )\n    // ** Set Roles\n\n    const roleSelect = Object.values(ROLES_CONSTANT).map(el => {\n      return { label: el, value: el }\n    })\n    setrolesOptions(roleSelect)\n\n  }, [dispatch, store.data.length, sort, sortColumn, currentPage])\n\n  // ** User filter options\n  // const roleOptions = [\n  //   { value: '', label: 'Select Role' },\n  //   { value: 'admin', label: 'Admin' },\n  //   { value: 'author', label: 'Author' },\n  //   { value: 'editor', label: 'Editor' },\n  //   { value: 'maintainer', label: 'Maintainer' },\n  //   { value: 'subscriber', label: 'Subscriber' }\n  // ]\n\n  // const planOptions = [\n  //   { value: '', label: 'Select Plan' },\n  //   { value: 'basic', label: 'Basic' },\n  //   { value: 'company', label: 'Company' },\n  //   { value: 'enterprise', label: 'Enterprise' },\n  //   { value: 'team', label: 'Team' }\n  // ]\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'active', label: 'Active', number: true },\n    { value: 'inactive', label: 'Inactive', number: false }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getProduct({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: rowsPerPage,\n        page: page.selected + 1,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    setCurrentPage(1)\n\n    dispatch(\n      getProduct({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: value,\n        page: 1,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getProduct({\n        sort,\n        q: val,\n        sortColumn,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      role: currentRole.value,\n      status: currentStatus.value,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSort(sortDirection)\n    setSortColumn(column.sortField)\n    dispatch(\n      getProduct({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        status: currentStatus.value\n      })\n    )\n  }\n\n\n  useEffect(() => {\n    if (store.selectedCategory !== null) {\n      toggleSidebar()\n    }\n\n  }, [store.selectedCategory])\n\n  return (\n    <Fragment>\n      {/* <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Filters</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md='4'>\n              <Label for='role-select'>Role</Label>\n              <Select\n                isClearable={false}\n                value={currentRole}\n                options={rolesOptions}\n                className='react-select'\n                classNamePrefix='select'\n                theme={selectThemeColors}\n                onChange={data => {\n                  setCurrentRole(data)\n                  dispatch(\n                    getProduct({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      role: data.value,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      status: currentStatus.value\n                    })\n                  )\n                }}\n              />\n            </Col>\n            {/* <Col className='my-md-0 my-1' md='4'>\n              <Label for='plan-select'>Plan</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={planOptions}\n                value={currentPlan}\n                onChange={data => {\n                  setCurrentPlan(data)\n                  dispatch(\n                    getProduct({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: currentRole.value,\n                      currentPlan: data.value,\n                      status: currentStatus.value\n                    })\n                  )\n                }}\n              />\n            </Col> \n            <Col md='4'>\n              <Label for='status-select'>Status</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={statusOptions}\n                value={currentStatus}\n                onChange={data => {\n                  setCurrentStatus(data)\n                  dispatch(\n                    getProduct({\n                      sort,\n                      sortColumn,\n                      q: searchTerm,\n                      page: currentPage,\n                      status: data.value,\n                      perPage: rowsPerPage,\n                      role: currentRole.value\n                    })\n                  )\n                }}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card> */}\n\n      <Card className='overflow-hidden'>\n        <div className='react-dataTable'>\n          <DataTable\n            noHeader\n            subHeader\n            sortServer\n            pagination\n            paginationServer\n            responsive\n            paginationComponent={CustomPagination}\n            columns={columns}\n            onSort={handleSort}\n            sortIcon={<ChevronDown />}\n            className='react-dataTable'\n            data={dataToRender()}\n            subHeaderComponent={\n              <CustomHeader\n                store={store}\n                searchTerm={searchTerm}\n                rowsPerPage={rowsPerPage}\n                handleFilter={handleFilter}\n                handlePerPage={handlePerPage}\n                toggleSidebar={toggleSidebar}\n              />\n            }\n          />\n        </div>\n      </Card>\n\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\n\n// ** Icons Imports\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst CategoryList = () => {\n  return (\n    <div className='app-user-list'>\n      {/* <Row>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='primary'\n            statTitle='Total Users'\n            icon={<User size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>21,459</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='danger'\n            statTitle='Paid Users'\n            icon={<UserPlus size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>4,567</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='success'\n            statTitle='Active Users'\n            icon={<UserCheck size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>19,860</h3>}\n          />\n        </Col>\n        <Col lg='3' sm='6'>\n          <StatsHorizontal\n            color='warning'\n            statTitle='Pending Users'\n            icon={<UserX size={20} />}\n            renderStats={<h3 className='fw-bolder mb-75'>237</h3>}\n          />\n        </Col>\n      </Row> */}\n      <Table />\n    </div>\n  )\n}\n\nexport default CategoryList\n"],"sourceRoot":""}